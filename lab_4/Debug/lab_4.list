
lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800e758  0800e758  0001e758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f434  0800f434  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f434  0800f434  0001f434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f43c  0800f43c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f43c  0800f43c  0001f43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f440  0800f440  0001f440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da10  200001ec  0800f630  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dbfc  0800f630  0002dbfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215ef  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004556  00000000  00000000  0004180b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00045d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  00047950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e78b  00000000  00000000  000493a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223b6  00000000  00000000  00067b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6e2d  00000000  00000000  00089ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089f0  00000000  00000000  00140d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e73c 	.word	0x0800e73c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800e73c 	.word	0x0800e73c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b974 	b.w	8001174 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	468e      	mov	lr, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d14d      	bne.n	8000f4e <__udivmoddi4+0xaa>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	4694      	mov	ip, r2
 8000eb6:	d969      	bls.n	8000f8c <__udivmoddi4+0xe8>
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b152      	cbz	r2, 8000ed4 <__udivmoddi4+0x30>
 8000ebe:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec2:	f1c2 0120 	rsb	r1, r2, #32
 8000ec6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ece:	ea41 0e03 	orr.w	lr, r1, r3
 8000ed2:	4094      	lsls	r4, r2
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	0c21      	lsrs	r1, r4, #16
 8000eda:	fbbe f6f8 	udiv	r6, lr, r8
 8000ede:	fa1f f78c 	uxth.w	r7, ip
 8000ee2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ee6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eea:	fb06 f107 	mul.w	r1, r6, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x64>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000efa:	f080 811f 	bcs.w	800113c <__udivmoddi4+0x298>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 811c 	bls.w	800113c <__udivmoddi4+0x298>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb00 f707 	mul.w	r7, r0, r7
 8000f1c:	42a7      	cmp	r7, r4
 8000f1e:	d90a      	bls.n	8000f36 <__udivmoddi4+0x92>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	f080 810a 	bcs.w	8001140 <__udivmoddi4+0x29c>
 8000f2c:	42a7      	cmp	r7, r4
 8000f2e:	f240 8107 	bls.w	8001140 <__udivmoddi4+0x29c>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3a:	1be4      	subs	r4, r4, r7
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	b11d      	cbz	r5, 8000f48 <__udivmoddi4+0xa4>
 8000f40:	40d4      	lsrs	r4, r2
 8000f42:	2300      	movs	r3, #0
 8000f44:	e9c5 4300 	strd	r4, r3, [r5]
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0xc2>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	f000 80ef 	beq.w	8001136 <__udivmoddi4+0x292>
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	fab3 f683 	clz	r6, r3
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d14a      	bne.n	8001004 <__udivmoddi4+0x160>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d302      	bcc.n	8000f78 <__udivmoddi4+0xd4>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	f200 80f9 	bhi.w	800116a <__udivmoddi4+0x2c6>
 8000f78:	1a84      	subs	r4, r0, r2
 8000f7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	469e      	mov	lr, r3
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d0e0      	beq.n	8000f48 <__udivmoddi4+0xa4>
 8000f86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f8a:	e7dd      	b.n	8000f48 <__udivmoddi4+0xa4>
 8000f8c:	b902      	cbnz	r2, 8000f90 <__udivmoddi4+0xec>
 8000f8e:	deff      	udf	#255	; 0xff
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f040 8092 	bne.w	80010be <__udivmoddi4+0x21a>
 8000f9a:	eba1 010c 	sub.w	r1, r1, ip
 8000f9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	2601      	movs	r6, #1
 8000fa8:	0c20      	lsrs	r0, r4, #16
 8000faa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fae:	fb07 1113 	mls	r1, r7, r3, r1
 8000fb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb6:	fb0e f003 	mul.w	r0, lr, r3
 8000fba:	4288      	cmp	r0, r1
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x12c>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fc6:	d202      	bcs.n	8000fce <__udivmoddi4+0x12a>
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	f200 80cb 	bhi.w	8001164 <__udivmoddi4+0x2c0>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000fdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fe0:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe4:	45a6      	cmp	lr, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x156>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ff0:	d202      	bcs.n	8000ff8 <__udivmoddi4+0x154>
 8000ff2:	45a6      	cmp	lr, r4
 8000ff4:	f200 80bb 	bhi.w	800116e <__udivmoddi4+0x2ca>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	eba4 040e 	sub.w	r4, r4, lr
 8000ffe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001002:	e79c      	b.n	8000f3e <__udivmoddi4+0x9a>
 8001004:	f1c6 0720 	rsb	r7, r6, #32
 8001008:	40b3      	lsls	r3, r6
 800100a:	fa22 fc07 	lsr.w	ip, r2, r7
 800100e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001012:	fa20 f407 	lsr.w	r4, r0, r7
 8001016:	fa01 f306 	lsl.w	r3, r1, r6
 800101a:	431c      	orrs	r4, r3
 800101c:	40f9      	lsrs	r1, r7
 800101e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001022:	fa00 f306 	lsl.w	r3, r0, r6
 8001026:	fbb1 f8f9 	udiv	r8, r1, r9
 800102a:	0c20      	lsrs	r0, r4, #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fb09 1118 	mls	r1, r9, r8, r1
 8001034:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001038:	fb08 f00e 	mul.w	r0, r8, lr
 800103c:	4288      	cmp	r0, r1
 800103e:	fa02 f206 	lsl.w	r2, r2, r6
 8001042:	d90b      	bls.n	800105c <__udivmoddi4+0x1b8>
 8001044:	eb1c 0101 	adds.w	r1, ip, r1
 8001048:	f108 3aff 	add.w	sl, r8, #4294967295
 800104c:	f080 8088 	bcs.w	8001160 <__udivmoddi4+0x2bc>
 8001050:	4288      	cmp	r0, r1
 8001052:	f240 8085 	bls.w	8001160 <__udivmoddi4+0x2bc>
 8001056:	f1a8 0802 	sub.w	r8, r8, #2
 800105a:	4461      	add	r1, ip
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb1 f0f9 	udiv	r0, r1, r9
 8001064:	fb09 1110 	mls	r1, r9, r0, r1
 8001068:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800106c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001070:	458e      	cmp	lr, r1
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x1e2>
 8001074:	eb1c 0101 	adds.w	r1, ip, r1
 8001078:	f100 34ff 	add.w	r4, r0, #4294967295
 800107c:	d26c      	bcs.n	8001158 <__udivmoddi4+0x2b4>
 800107e:	458e      	cmp	lr, r1
 8001080:	d96a      	bls.n	8001158 <__udivmoddi4+0x2b4>
 8001082:	3802      	subs	r0, #2
 8001084:	4461      	add	r1, ip
 8001086:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800108a:	fba0 9402 	umull	r9, r4, r0, r2
 800108e:	eba1 010e 	sub.w	r1, r1, lr
 8001092:	42a1      	cmp	r1, r4
 8001094:	46c8      	mov	r8, r9
 8001096:	46a6      	mov	lr, r4
 8001098:	d356      	bcc.n	8001148 <__udivmoddi4+0x2a4>
 800109a:	d053      	beq.n	8001144 <__udivmoddi4+0x2a0>
 800109c:	b15d      	cbz	r5, 80010b6 <__udivmoddi4+0x212>
 800109e:	ebb3 0208 	subs.w	r2, r3, r8
 80010a2:	eb61 010e 	sbc.w	r1, r1, lr
 80010a6:	fa01 f707 	lsl.w	r7, r1, r7
 80010aa:	fa22 f306 	lsr.w	r3, r2, r6
 80010ae:	40f1      	lsrs	r1, r6
 80010b0:	431f      	orrs	r7, r3
 80010b2:	e9c5 7100 	strd	r7, r1, [r5]
 80010b6:	2600      	movs	r6, #0
 80010b8:	4631      	mov	r1, r6
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	f1c2 0320 	rsb	r3, r2, #32
 80010c2:	40d8      	lsrs	r0, r3
 80010c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010c8:	fa21 f303 	lsr.w	r3, r1, r3
 80010cc:	4091      	lsls	r1, r2
 80010ce:	4301      	orrs	r1, r0
 80010d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d4:	fa1f fe8c 	uxth.w	lr, ip
 80010d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010dc:	fb07 3610 	mls	r6, r7, r0, r3
 80010e0:	0c0b      	lsrs	r3, r1, #16
 80010e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010e6:	fb00 f60e 	mul.w	r6, r0, lr
 80010ea:	429e      	cmp	r6, r3
 80010ec:	fa04 f402 	lsl.w	r4, r4, r2
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x260>
 80010f2:	eb1c 0303 	adds.w	r3, ip, r3
 80010f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80010fa:	d22f      	bcs.n	800115c <__udivmoddi4+0x2b8>
 80010fc:	429e      	cmp	r6, r3
 80010fe:	d92d      	bls.n	800115c <__udivmoddi4+0x2b8>
 8001100:	3802      	subs	r0, #2
 8001102:	4463      	add	r3, ip
 8001104:	1b9b      	subs	r3, r3, r6
 8001106:	b289      	uxth	r1, r1
 8001108:	fbb3 f6f7 	udiv	r6, r3, r7
 800110c:	fb07 3316 	mls	r3, r7, r6, r3
 8001110:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001114:	fb06 f30e 	mul.w	r3, r6, lr
 8001118:	428b      	cmp	r3, r1
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x28a>
 800111c:	eb1c 0101 	adds.w	r1, ip, r1
 8001120:	f106 38ff 	add.w	r8, r6, #4294967295
 8001124:	d216      	bcs.n	8001154 <__udivmoddi4+0x2b0>
 8001126:	428b      	cmp	r3, r1
 8001128:	d914      	bls.n	8001154 <__udivmoddi4+0x2b0>
 800112a:	3e02      	subs	r6, #2
 800112c:	4461      	add	r1, ip
 800112e:	1ac9      	subs	r1, r1, r3
 8001130:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001134:	e738      	b.n	8000fa8 <__udivmoddi4+0x104>
 8001136:	462e      	mov	r6, r5
 8001138:	4628      	mov	r0, r5
 800113a:	e705      	b.n	8000f48 <__udivmoddi4+0xa4>
 800113c:	4606      	mov	r6, r0
 800113e:	e6e3      	b.n	8000f08 <__udivmoddi4+0x64>
 8001140:	4618      	mov	r0, r3
 8001142:	e6f8      	b.n	8000f36 <__udivmoddi4+0x92>
 8001144:	454b      	cmp	r3, r9
 8001146:	d2a9      	bcs.n	800109c <__udivmoddi4+0x1f8>
 8001148:	ebb9 0802 	subs.w	r8, r9, r2
 800114c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001150:	3801      	subs	r0, #1
 8001152:	e7a3      	b.n	800109c <__udivmoddi4+0x1f8>
 8001154:	4646      	mov	r6, r8
 8001156:	e7ea      	b.n	800112e <__udivmoddi4+0x28a>
 8001158:	4620      	mov	r0, r4
 800115a:	e794      	b.n	8001086 <__udivmoddi4+0x1e2>
 800115c:	4640      	mov	r0, r8
 800115e:	e7d1      	b.n	8001104 <__udivmoddi4+0x260>
 8001160:	46d0      	mov	r8, sl
 8001162:	e77b      	b.n	800105c <__udivmoddi4+0x1b8>
 8001164:	3b02      	subs	r3, #2
 8001166:	4461      	add	r1, ip
 8001168:	e732      	b.n	8000fd0 <__udivmoddi4+0x12c>
 800116a:	4630      	mov	r0, r6
 800116c:	e709      	b.n	8000f82 <__udivmoddi4+0xde>
 800116e:	4464      	add	r4, ip
 8001170:	3802      	subs	r0, #2
 8001172:	e742      	b.n	8000ffa <__udivmoddi4+0x156>

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <vApplicationGetIdleTaskMemory+0x30>)
 800118e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000208 	.word	0x20000208
 80011a8:	200002c4 	.word	0x200002c4

080011ac <TextLCD_udelay>:

#define STROBE_DELAY_USEC 40

// Works because TIM1 runs at 1 MHz
void TextLCD_udelay(TextLCDType *lcd, uint32_t delay_usec)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	volatile uint32_t curr = lcd->htim->Instance->CNT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	613b      	str	r3, [r7, #16]
	volatile uint32_t stop = curr + delay_usec;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

	int32_t diff = stop - curr;
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]

	while (diff > 0)
 80011d0:	e008      	b.n	80011e4 <TextLCD_udelay+0x38>
	{
		curr = lcd->htim->Instance->CNT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	613b      	str	r3, [r7, #16]
		diff = stop - curr;
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
	while (diff > 0)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dcf3      	bgt.n	80011d2 <TextLCD_udelay+0x26>
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <TextLCD_Strobe>:


void TextLCD_Strobe(TextLCDType *lcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
	// 0x0E == b# 0000 1110

	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04; // b# 0000 0100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7b1b      	ldrb	r3, [r3, #12]
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	b2da      	uxtb	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	b299      	uxth	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 020c 	add.w	r2, r3, #12
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	f004 fd29 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_udelay(lcd, STROBE_DELAY_USEC);
 800122a:	2128      	movs	r1, #40	; 0x28
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffbd 	bl	80011ac <TextLCD_udelay>
	// HAL_Delay(1);

	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;	// b# 1111 1011
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	b2da      	uxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	b299      	uxth	r1, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f103 020c 	add.w	r2, r3, #12
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	f004 fd10 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_udelay(lcd, STROBE_DELAY_USEC);
 800125c:	2128      	movs	r1, #40	; 0x28
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa4 	bl	80011ac <TextLCD_udelay>
	// HAL_Delay(1);
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	// cmd = 76543210
	// cmd & 0xF0 == cmd & (b# 1111 0000) == 7654____
	//       0x0C == b# 0000 1100

	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	b25a      	sxtb	r2, r3
 8001284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001288:	f023 030f 	bic.w	r3, r3, #15
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	b299      	uxth	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f103 020c 	add.w	r2, r3, #12
 80012a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f004 fce4 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff9f 	bl	80011f8 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7b1b      	ldrb	r3, [r3, #12]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	b299      	uxth	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 020c 	add.w	r2, r3, #12
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	f004 fcc5 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff80 	bl	80011f8 <TextLCD_Strobe>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <TextLCD_Data>:


void TextLCD_Data(TextLCDType *lcd, uint8_t data)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	f003 030d 	and.w	r3, r3, #13
 8001316:	b25a      	sxtb	r2, r3
 8001318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131c:	f023 030f 	bic.w	r3, r3, #15
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	b299      	uxth	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f103 020c 	add.w	r2, r3, #12
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	f004 fc97 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff52 	bl	80011f8 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7b1b      	ldrb	r3, [r3, #12]
 8001358:	b25b      	sxtb	r3, r3
 800135a:	f003 030d 	and.w	r3, r3, #13
 800135e:	b25a      	sxtb	r2, r3
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	b25b      	sxtb	r3, r3
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	b299      	uxth	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f103 020c 	add.w	r2, r3, #12
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	f004 fc75 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff30 	bl	80011f8 <TextLCD_Strobe>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <TextLCD_Init>:
  *	Set up 2 lines, 5x8 fonts and no cursor blinking.
  *	https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
  *	Figure 24 (initialize 4-bit mode)
  */
void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress, TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	711a      	strb	r2, [r3, #4]
	lcd->htim = htim;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	609a      	str	r2, [r3, #8]
	lcd->data = 0x38; // b# 0011 1000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2238      	movs	r2, #56	; 0x38
 80013c6:	731a      	strb	r2, [r3, #12]

	HAL_Delay(40); // Minimum startup time
 80013c8:	2028      	movs	r0, #40	; 0x28
 80013ca:	f003 f8ef 	bl	80045ac <HAL_Delay>

	// Do init setting LCD controller into 4-bit mode as per Figure 24
	// 1. Try to set 8-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	791b      	ldrb	r3, [r3, #4]
 80013d6:	b299      	uxth	r1, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f103 020c 	add.w	r2, r3, #12
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	f004 fc49 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff ff04 	bl	80011f8 <TextLCD_Strobe>
	HAL_Delay(5);
 80013f0:	2005      	movs	r0, #5
 80013f2:	f003 f8db 	bl	80045ac <HAL_Delay>
	// 2. Try to set 8-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	791b      	ldrb	r3, [r3, #4]
 80013fe:	b299      	uxth	r1, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f103 020c 	add.w	r2, r3, #12
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	f004 fc35 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff fef0 	bl	80011f8 <TextLCD_Strobe>
	HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f003 f8c7 	bl	80045ac <HAL_Delay>
	// 3. Try to set 8-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	b299      	uxth	r1, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f103 020c 	add.w	r2, r3, #12
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	f004 fc21 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff fedc 	bl	80011f8 <TextLCD_Strobe>

	// At this point display is reset to default 8-bit mode
	// Now configure 4-bit mode
	lcd->data = 0x28;	// b# 0010 1000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2228      	movs	r2, #40	; 0x28
 8001444:	731a      	strb	r2, [r3, #12]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	b299      	uxth	r1, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f103 020c 	add.w	r2, r3, #12
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	f004 fc0d 	bl	8005c7c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fec8 	bl	80011f8 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 8001468:	2128      	movs	r1, #40	; 0x28
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f7ff fefe 	bl	800126c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 8001470:	2108      	movs	r1, #8
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fefa 	bl	800126c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 8001478:	2101      	movs	r1, #1
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fef6 	bl	800126c <TextLCD_Cmd>

	HAL_Delay(5);
 8001480:	2005      	movs	r0, #5
 8001482:	f003 f893 	bl	80045ac <HAL_Delay>

	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 8001486:	2106      	movs	r1, #6
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff feef 	bl	800126c <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 800148e:	210c      	movs	r1, #12
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff feeb 	bl	800126c <TextLCD_Cmd>

	HAL_Delay(5);
 8001496:	2005      	movs	r0, #5
 8001498:	f003 f888 	bl	80045ac <HAL_Delay>

#if 1
	// This code creates custom characters to be used when making a VO-meter on the display
	// A VO-meter shows the volume graphically. the characters are 0x01, 0x02, 0x03, 0x04 and 0x05.
	// By putting out these characters you can draw a 1, 2, 3, 4 and 5 lines.
	for (uint8_t j = 1; j < 6; j++) {
 800149c:	2301      	movs	r3, #1
 800149e:	75fb      	strb	r3, [r7, #23]
 80014a0:	e01c      	b.n	80014dc <TextLCD_Init+0x13c>
		for (uint8_t i = 0; i < 8; i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	75bb      	strb	r3, [r7, #22]
 80014a6:	e013      	b.n	80014d0 <TextLCD_Init+0x130>
			TextLCD_CustomChar(lcd, i + j * 8, (uint8_t) (0xff00 >> (j + 3)));
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	4413      	add	r3, r2
 80014b2:	b2d9      	uxtb	r1, r3
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	3303      	adds	r3, #3
 80014b8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80014bc:	fa42 f303 	asr.w	r3, r2, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f86b 	bl	80015a0 <TextLCD_CustomChar>
		for (uint8_t i = 0; i < 8; i++) {
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	3301      	adds	r3, #1
 80014ce:	75bb      	strb	r3, [r7, #22]
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9e8      	bls.n	80014a8 <TextLCD_Init+0x108>
	for (uint8_t j = 1; j < 6; j++) {
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	3301      	adds	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d9df      	bls.n	80014a2 <TextLCD_Init+0x102>
		}
	}
#endif
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <TextLCD_Position>:
	TextLCD_Cmd(lcd, 0x01);
	HAL_Delay(2);
}

void TextLCD_Position(TextLCDType *lcd, int x, int y)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	// Do modulo 16 and 2 for x and y to ensure within display boundaries
	x = x % 16;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	425a      	negs	r2, r3
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	f002 020f 	and.w	r2, r2, #15
 8001504:	bf58      	it	pl
 8001506:	4253      	negpl	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]
	y = y % 2;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	607b      	str	r3, [r7, #4]

	uint8_t cmd_bit = 0x80;
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4413      	add	r3, r2
 800152a:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 800152c:	7dfa      	ldrb	r2, [r7, #23]
 800152e:	7dbb      	ldrb	r3, [r7, #22]
 8001530:	4313      	orrs	r3, r2
 8001532:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff fe97 	bl	800126c <TextLCD_Cmd>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <TextLCD_Putchar>:
	}
}


void TextLCD_Putchar(TextLCDType *lcd, uint8_t ascii_char)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
	TextLCD_Data(lcd, ascii_char);
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fed2 	bl	8001300 <TextLCD_Data>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <TextLCD_Puts>:

void TextLCD_Puts(TextLCDType *lcd, char *string)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	int i = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
	while (string[i])
 8001572:	e00a      	b.n	800158a <TextLCD_Puts+0x26>
	{
		TextLCD_Putchar(lcd, string[i]);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffe1 	bl	8001546 <TextLCD_Putchar>
		i++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
	while (string[i])
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ee      	bne.n	8001574 <TextLCD_Puts+0x10>
	}
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <TextLCD_CustomChar>:

void TextLCD_CustomChar(TextLCDType *lcd, uint8_t adr, uint8_t data)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
 80015ac:	4613      	mov	r3, r2
 80015ae:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd  = 0x40 | (adr & 0x3f);
 80015b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	73fb      	strb	r3, [r7, #15]
	TextLCD_Cmd(lcd, cmd);
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fe50 	bl	800126c <TextLCD_Cmd>

	TextLCD_Data(lcd, data);
 80015cc:	78bb      	ldrb	r3, [r7, #2]
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fe95 	bl	8001300 <TextLCD_Data>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f0:	d106      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// Here goes your semaphore signaling code
		xSemaphoreGive(semButtonSemaphore);
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_GPIO_EXTI_Callback+0x28>)
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	f007 f82c 	bl	8008658 <xQueueGenericSend>
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200006fc 	.word	0x200006fc

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b0aa      	sub	sp, #168	; 0xa8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f002 ff89 	bl	8004528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f8fb 	bl	8001810 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 800161a:	2001      	movs	r0, #1
 800161c:	f001 fc86 	bl	8002f2c <xTraceEnable>
  ch0 = xTraceRegisterString("ch0");
 8001620:	485f      	ldr	r0, [pc, #380]	; (80017a0 <main+0x194>)
 8001622:	f001 fda8 	bl	8003176 <xTraceRegisterString>
 8001626:	4603      	mov	r3, r0
 8001628:	4a5e      	ldr	r2, [pc, #376]	; (80017a4 <main+0x198>)
 800162a:	6013      	str	r3, [r2, #0]
//  vTracePrintF(ch0, "I am tracing channel %d", 0);
  adc_ch = xTraceRegisterString("adc_ch");
 800162c:	485e      	ldr	r0, [pc, #376]	; (80017a8 <main+0x19c>)
 800162e:	f001 fda2 	bl	8003176 <xTraceRegisterString>
 8001632:	4603      	mov	r3, r0
 8001634:	4a5d      	ldr	r2, [pc, #372]	; (80017ac <main+0x1a0>)
 8001636:	6013      	str	r3, [r2, #0]
  lcd_ch = xTraceRegisterString("lcd_ch");
 8001638:	485d      	ldr	r0, [pc, #372]	; (80017b0 <main+0x1a4>)
 800163a:	f001 fd9c 	bl	8003176 <xTraceRegisterString>
 800163e:	4603      	mov	r3, r0
 8001640:	4a5c      	ldr	r2, [pc, #368]	; (80017b4 <main+0x1a8>)
 8001642:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f000 fac0 	bl	8001bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001648:	f000 fa9e 	bl	8001b88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800164c:	f000 fa72 	bl	8001b34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001650:	f000 f948 	bl	80018e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001654:	f000 f9d4 	bl	8001a00 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001658:	f000 f9a4 	bl	80019a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800165c:	f000 fa1c 	bl	8001a98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  setRGB(0xFF, 0xFF, 0xFF);
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	21ff      	movs	r1, #255	; 0xff
 8001664:	20ff      	movs	r0, #255	; 0xff
 8001666:	f000 fb4d 	bl	8001d04 <setRGB>

	HAL_TIM_Base_Start(&htim2);
 800166a:	4853      	ldr	r0, [pc, #332]	; (80017b8 <main+0x1ac>)
 800166c:	f005 fb28 	bl	8006cc0 <HAL_TIM_Base_Start>
	TextLCD_Init(&hlcd, &hi2c1, 0x4E, &htim2);
 8001670:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <main+0x1ac>)
 8001672:	224e      	movs	r2, #78	; 0x4e
 8001674:	4951      	ldr	r1, [pc, #324]	; (80017bc <main+0x1b0>)
 8001676:	4852      	ldr	r0, [pc, #328]	; (80017c0 <main+0x1b4>)
 8001678:	f7ff fe92 	bl	80013a0 <TextLCD_Init>
	sprintf(g_str_top, "Counter: %d", counter);
 800167c:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <main+0x1b8>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4951      	ldr	r1, [pc, #324]	; (80017c8 <main+0x1bc>)
 8001684:	4851      	ldr	r0, [pc, #324]	; (80017cc <main+0x1c0>)
 8001686:	f00a fc0b 	bl	800bea0 <siprintf>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  adcMutex = xSemaphoreCreateMutex();
 800168a:	2001      	movs	r0, #1
 800168c:	f006 ff98 	bl	80085c0 <xQueueCreateMutex>
 8001690:	4603      	mov	r3, r0
 8001692:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <main+0x1c4>)
 8001694:	6013      	str	r3, [r2, #0]
  lcdMutex = xSemaphoreCreateMutex();
 8001696:	2001      	movs	r0, #1
 8001698:	f006 ff92 	bl	80085c0 <xQueueCreateMutex>
 800169c:	4603      	mov	r3, r0
 800169e:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <main+0x1c8>)
 80016a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semButtonSemaphore = xSemaphoreCreateCounting(5, 0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	2005      	movs	r0, #5
 80016a6:	f006 ffa3 	bl	80085f0 <xQueueCreateCountingSemaphore>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <main+0x1cc>)
 80016ae:	6013      	str	r3, [r2, #0]
  xCreatedEventGroup = xEventGroupCreate();
 80016b0:	f006 fa98 	bl	8007be4 <xEventGroupCreate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a49      	ldr	r2, [pc, #292]	; (80017dc <main+0x1d0>)
 80016b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 256);
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <main+0x1d4>)
 80016bc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80016c0:	461d      	mov	r5, r3
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 fa24 	bl	8007b22 <osThreadCreate>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <main+0x1d8>)
 80016de:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkyTask */
  osThreadDef(blinkyTask, StartBlinkyTask, osPriorityAboveNormal, 0, 256);
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <main+0x1dc>)
 80016e2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80016e6:	461d      	mov	r5, r3
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkyTaskHandle = osThreadCreate(osThread(blinkyTask), NULL);
 80016f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 fa11 	bl	8007b22 <osThreadCreate>
 8001700:	4603      	mov	r3, r0
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <main+0x1e0>)
 8001704:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartAdcTask, osPriorityHigh, 0, 256);
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <main+0x1e4>)
 8001708:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800170c:	461d      	mov	r5, r3
 800170e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 800171a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f006 f9fe 	bl	8007b22 <osThreadCreate>
 8001726:	4603      	mov	r3, r0
 8001728:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <main+0x1e8>)
 800172a:	6013      	str	r3, [r2, #0]

  /* definition and creation of rgbTask */
  osThreadDef(rgbTask, StartRgbTask, osPriorityAboveNormal, 0, 256);
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <main+0x1ec>)
 800172e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001732:	461d      	mov	r5, r3
 8001734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rgbTaskHandle = osThreadCreate(osThread(rgbTask), NULL);
 8001740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f006 f9eb 	bl	8007b22 <osThreadCreate>
 800174c:	4603      	mov	r3, r0
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <main+0x1f0>)
 8001750:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdPrintTask */
  osThreadDef(lcdPrintTask, StartLcdPrintTask, osPriorityNormal, 0, 256);
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <main+0x1f4>)
 8001754:	f107 041c 	add.w	r4, r7, #28
 8001758:	461d      	mov	r5, r3
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdPrintTaskHandle = osThreadCreate(osThread(lcdPrintTask), NULL);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f006 f9d8 	bl	8007b22 <osThreadCreate>
 8001772:	4603      	mov	r3, r0
 8001774:	4a23      	ldr	r2, [pc, #140]	; (8001804 <main+0x1f8>)
 8001776:	6013      	str	r3, [r2, #0]

  /* definition and creation of countingTask */
  osThreadDef(countingTask, StartCountingTask, osPriorityHigh, 0, 256);
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <main+0x1fc>)
 800177a:	463c      	mov	r4, r7
 800177c:	461d      	mov	r5, r3
 800177e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  countingTaskHandle = osThreadCreate(osThread(countingTask), NULL);
 800178a:	463b      	mov	r3, r7
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f006 f9c7 	bl	8007b22 <osThreadCreate>
 8001794:	4603      	mov	r3, r0
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <main+0x200>)
 8001798:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800179a:	f006 f9bb 	bl	8007b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800179e:	e7fe      	b.n	800179e <main+0x192>
 80017a0:	0800e7a0 	.word	0x0800e7a0
 80017a4:	200006ac 	.word	0x200006ac
 80017a8:	0800e7a4 	.word	0x0800e7a4
 80017ac:	200006b0 	.word	0x200006b0
 80017b0:	0800e7ac 	.word	0x0800e7ac
 80017b4:	200006b4 	.word	0x200006b4
 80017b8:	200005c0 	.word	0x200005c0
 80017bc:	2000056c 	.word	0x2000056c
 80017c0:	200006b8 	.word	0x200006b8
 80017c4:	200006f8 	.word	0x200006f8
 80017c8:	0800e7b4 	.word	0x0800e7b4
 80017cc:	200006d4 	.word	0x200006d4
 80017d0:	200006d0 	.word	0x200006d0
 80017d4:	200006f4 	.word	0x200006f4
 80017d8:	200006fc 	.word	0x200006fc
 80017dc:	20001300 	.word	0x20001300
 80017e0:	0800e7c0 	.word	0x0800e7c0
 80017e4:	20000694 	.word	0x20000694
 80017e8:	0800e7dc 	.word	0x0800e7dc
 80017ec:	20000698 	.word	0x20000698
 80017f0:	0800e7f8 	.word	0x0800e7f8
 80017f4:	2000069c 	.word	0x2000069c
 80017f8:	0800e814 	.word	0x0800e814
 80017fc:	200006a0 	.word	0x200006a0
 8001800:	0800e830 	.word	0x0800e830
 8001804:	200006a4 	.word	0x200006a4
 8001808:	0800e84c 	.word	0x0800e84c
 800180c:	200006a8 	.word	0x200006a8

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	; 0x50
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2230      	movs	r2, #48	; 0x30
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f009 fdbd 	bl	800b39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <SystemClock_Config+0xcc>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <SystemClock_Config+0xcc>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <SystemClock_Config+0xcc>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <SystemClock_Config+0xd0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <SystemClock_Config+0xd0>)
 800185e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001874:	2301      	movs	r3, #1
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	2310      	movs	r3, #16
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001884:	2308      	movs	r3, #8
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800188c:	2304      	movs	r3, #4
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001890:	2307      	movs	r3, #7
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fcf7 	bl	800628c <HAL_RCC_OscConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018a4:	f000 fc96 	bl	80021d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a8:	230f      	movs	r3, #15
 80018aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ac:	2302      	movs	r3, #2
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 ff5a 	bl	800677c <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018ce:	f000 fc81 	bl	80021d4 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	; 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ea:	463b      	mov	r3, r7
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <MX_ADC1_Init+0xb8>)
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <MX_ADC1_Init+0xbc>)
 80018fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <MX_ADC1_Init+0xb8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <MX_ADC1_Init+0xb8>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <MX_ADC1_Init+0xb8>)
 800190a:	2201      	movs	r2, #1
 800190c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <MX_ADC1_Init+0xb8>)
 8001910:	2200      	movs	r2, #0
 8001912:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_ADC1_Init+0xb8>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_ADC1_Init+0xb8>)
 800191e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_ADC1_Init+0xb8>)
 8001926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_ADC1_Init+0xb8>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_ADC1_Init+0xb8>)
 8001934:	2202      	movs	r2, #2
 8001936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_ADC1_Init+0xb8>)
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_ADC1_Init+0xb8>)
 8001942:	2201      	movs	r2, #1
 8001944:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001946:	4815      	ldr	r0, [pc, #84]	; (800199c <MX_ADC1_Init+0xb8>)
 8001948:	f002 fe54 	bl	80045f4 <HAL_ADC_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001952:	f000 fc3f 	bl	80021d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_ADC1_Init+0xb8>)
 8001968:	f002 ff82 	bl	8004870 <HAL_ADC_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001972:	f000 fc2f 	bl	80021d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001976:	2301      	movs	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800197a:	2302      	movs	r3, #2
 800197c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_ADC1_Init+0xb8>)
 8001984:	f002 ff74 	bl	8004870 <HAL_ADC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800198e:	f000 fc21 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200004c4 	.word	0x200004c4
 80019a0:	40012000 	.word	0x40012000

080019a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C1_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C1_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019e2:	f004 f807 	bl	80059f4 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 fbf2 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000056c 	.word	0x2000056c
 80019f8:	40005400 	.word	0x40005400
 80019fc:	000186a0 	.word	0x000186a0

08001a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a26:	221f      	movs	r2, #31
 8001a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295
 8001a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a44:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a46:	f005 f8eb 	bl	8006c20 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a50:	f000 fbc0 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a62:	f005 faf1 	bl	8007048 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a6c:	f000 fbb2 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a7e:	f005 fced 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f000 fba4 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200005c0 	.word	0x200005c0

08001a98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <MX_TIM3_Init+0x98>)
 8001ab8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001ac8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001acc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001adc:	f005 f8a0 	bl	8006c20 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f000 fb75 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001af8:	f005 faa6 	bl	8007048 <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b02:	f000 fb67 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b06:	2320      	movs	r3, #32
 8001b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0e:	463b      	mov	r3, r7
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <MX_TIM3_Init+0x94>)
 8001b14:	f005 fca2 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b1e:	f000 fb59 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000608 	.word	0x20000608
 8001b30:	40000400 	.word	0x40000400

08001b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_USART2_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	f005 fcf8 	bl	8007560 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f000 fb2d 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000650 	.word	0x20000650
 8001b84:	40004400 	.word	0x40004400

08001b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_DMA_Init+0x3c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <MX_DMA_Init+0x3c>)
 8001b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_DMA_Init+0x3c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	2038      	movs	r0, #56	; 0x38
 8001bb0:	f003 f9b6 	bl	8004f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bb4:	2038      	movs	r0, #56	; 0x38
 8001bb6:	f003 f9cf 	bl	8004f58 <HAL_NVIC_EnableIRQ>

}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a35      	ldr	r2, [pc, #212]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <MX_GPIO_Init+0x12c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2103      	movs	r1, #3
 8001c52:	4829      	ldr	r0, [pc, #164]	; (8001cf8 <MX_GPIO_Init+0x130>)
 8001c54:	f003 fe82 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4827      	ldr	r0, [pc, #156]	; (8001cfc <MX_GPIO_Init+0x134>)
 8001c5e:	f003 fe7d 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	4826      	ldr	r0, [pc, #152]	; (8001d00 <MX_GPIO_Init+0x138>)
 8001c68:	f003 fe78 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	481d      	ldr	r0, [pc, #116]	; (8001cf8 <MX_GPIO_Init+0x130>)
 8001c84:	f003 fce6 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <MX_GPIO_Init+0x130>)
 8001ca0:	f003 fcd8 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <MX_GPIO_Init+0x134>)
 8001cbc:	f003 fcca 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480a      	ldr	r0, [pc, #40]	; (8001d00 <MX_GPIO_Init+0x138>)
 8001cd8:	f003 fcbc 	bl	8005654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2105      	movs	r1, #5
 8001ce0:	2028      	movs	r0, #40	; 0x28
 8001ce2:	f003 f91d 	bl	8004f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ce6:	2028      	movs	r0, #40	; 0x28
 8001ce8:	f003 f936 	bl	8004f58 <HAL_NVIC_EnableIRQ>

}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400

08001d04 <setRGB>:

/* USER CODE BEGIN 4 */

void setRGB(uint8_t r, uint8_t g, uint8_t b)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	71bb      	strb	r3, [r7, #6]
 8001d12:	4613      	mov	r3, r2
 8001d14:	717b      	strb	r3, [r7, #5]
	r = r ? GPIO_PIN_SET : GPIO_PIN_RESET; // ternary
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	71fb      	strb	r3, [r7, #7]
	g = g ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	71bb      	strb	r3, [r7, #6]
	b = b ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, r);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	461a      	mov	r2, r3
 8001d44:	2102      	movs	r1, #2
 8001d46:	4809      	ldr	r0, [pc, #36]	; (8001d6c <setRGB+0x68>)
 8001d48:	f003 fe08 	bl	800595c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, g);
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2101      	movs	r1, #1
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <setRGB+0x68>)
 8001d54:	f003 fe02 	bl	800595c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, b);
 8001d58:	797b      	ldrb	r3, [r7, #5]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4804      	ldr	r0, [pc, #16]	; (8001d70 <setRGB+0x6c>)
 8001d60:	f003 fdfc 	bl	800595c <HAL_GPIO_WritePin>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020400 	.word	0x40020400

08001d74 <HAL_ADC_ConvHalfCpltCallback>:
	*b = temp;
}

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	vTracePrint(ch0, "HAL_ADC_ConvHalfCpltCallback");
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f996 	bl	80030b4 <xTracePrint>
	xEventGroupSetBits(xCreatedEventGroup, HALF_FLAG);
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f006 f8fa 	bl	8007f88 <xEventGroupSetBits>

}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200006ac 	.word	0x200006ac
 8001da0:	0800e868 	.word	0x0800e868
 8001da4:	20001300 	.word	0x20001300

08001da8 <HAL_ADC_ConvCpltCallback>:
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	vTracePrint(ch0, "HAL_ADC_ConvCpltCallback");
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 f97c 	bl	80030b4 <xTracePrint>
	xEventGroupSetBits(xCreatedEventGroup, FULL_FLAG);
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x30>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 f8e0 	bl	8007f88 <xEventGroupSetBits>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200006ac 	.word	0x200006ac
 8001dd4:	0800e888 	.word	0x0800e888
 8001dd8:	20001300 	.word	0x20001300

08001ddc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osDelay(99999);
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <StartDefaultTask+0x18>)
 8001de6:	f005 fee8 	bl	8007bba <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(99999);
 8001dea:	4802      	ldr	r0, [pc, #8]	; (8001df4 <StartDefaultTask+0x18>)
 8001dec:	f005 fee5 	bl	8007bba <osDelay>
 8001df0:	e7fb      	b.n	8001dea <StartDefaultTask+0xe>
 8001df2:	bf00      	nop
 8001df4:	0001869f 	.word	0x0001869f

08001df8 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void const * argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
	TickType_t now = xTaskGetTickCount();
 8001e00:	f007 fe32 	bl	8009a68 <xTaskGetTickCount>
 8001e04:	4603      	mov	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e08:	2120      	movs	r1, #32
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <StartBlinkyTask+0x28>)
 8001e0c:	f003 fdbf 	bl	800598e <HAL_GPIO_TogglePin>
	  vTaskDelayUntil(&now , 500);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 fbb7 	bl	800958c <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e1e:	e7f3      	b.n	8001e08 <StartBlinkyTask+0x10>
 8001e20:	40020000 	.word	0x40020000

08001e24 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const * argument)
{
 8001e24:	b5b0      	push	{r4, r5, r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN); // Two Channels interleaved
 8001e2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001e30:	4945      	ldr	r1, [pc, #276]	; (8001f48 <StartAdcTask+0x124>)
 8001e32:	4846      	ldr	r0, [pc, #280]	; (8001f4c <StartAdcTask+0x128>)
 8001e34:	f002 fc22 	bl	800467c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8001e38:	4845      	ldr	r0, [pc, #276]	; (8001f50 <StartAdcTask+0x12c>)
 8001e3a:	f004 ff41 	bl	8006cc0 <HAL_TIM_Base_Start>
	TickType_t now = xTaskGetTickCount();
 8001e3e:	f007 fe13 	bl	8009a68 <xTaskGetTickCount>
 8001e42:	4603      	mov	r3, r0
 8001e44:	60bb      	str	r3, [r7, #8]
	EventBits_t uxBits;
	float adc_val_pot_temp = 0;
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
	float adc_val_sou_temp = 0;
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&now, 50);
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	2132      	movs	r1, #50	; 0x32
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f007 fb97 	bl	800958c <vTaskDelayUntil>

	  uxBits = xEventGroupWaitBits(
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <StartAdcTask+0x130>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2111      	movs	r1, #17
 8001e6e:	f005 ff31 	bl	8007cd4 <xEventGroupWaitBits>
 8001e72:	60f8      	str	r0, [r7, #12]
				  HALF_FLAG | FULL_FLAG,
				  pdTRUE,
				  pdFALSE,
				  10000);

		if((uxBits & HALF_FLAG) != 0)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d010      	beq.n	8001ea0 <StartAdcTask+0x7c>
		{
			adc_val_pot_temp = averageSamples(&adc_buf[0], ADC_BUF_LEN / 4, 2);
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001e84:	4830      	ldr	r0, [pc, #192]	; (8001f48 <StartAdcTask+0x124>)
 8001e86:	f000 fd3b 	bl	8002900 <averageSamples>
 8001e8a:	ed87 0a05 	vstr	s0, [r7, #20]
			adc_val_sou_temp = soundLevel(&adc_buf[1], ADC_BUF_LEN / 4, 2);
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <StartAdcTask+0x134>)
 8001e96:	f000 fc89 	bl	80027ac <soundLevel>
 8001e9a:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e9e:	e014      	b.n	8001eca <StartAdcTask+0xa6>
		}
		else if((uxBits & FULL_FLAG)  != 0 )
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <StartAdcTask+0xa6>
		{
			adc_val_pot_temp = averageSamples(&adc_buf[768], ADC_BUF_LEN / 4, 2);
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001eb0:	482a      	ldr	r0, [pc, #168]	; (8001f5c <StartAdcTask+0x138>)
 8001eb2:	f000 fd25 	bl	8002900 <averageSamples>
 8001eb6:	ed87 0a05 	vstr	s0, [r7, #20]
			adc_val_sou_temp = soundLevel(&adc_buf[769], ADC_BUF_LEN / 4, 2);
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001ec0:	4827      	ldr	r0, [pc, #156]	; (8001f60 <StartAdcTask+0x13c>)
 8001ec2:	f000 fc73 	bl	80027ac <soundLevel>
 8001ec6:	ed87 0a04 	vstr	s0, [r7, #16]
		}

		if( xSemaphoreTake( adcMutex, ( TickType_t ) 1000 ) == pdTRUE )
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <StartAdcTask+0x140>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f006 fdce 	bl	8008a74 <xQueueSemaphoreTake>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10c      	bne.n	8001ef8 <StartAdcTask+0xd4>
		{
			adc_val_pot = adc_val_pot_temp;
 8001ede:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <StartAdcTask+0x144>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	6013      	str	r3, [r2, #0]
			adc_val_sou = adc_val_sou_temp;
 8001ee4:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <StartAdcTask+0x148>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6013      	str	r3, [r2, #0]
			xSemaphoreGive( adcMutex );
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <StartAdcTask+0x140>)
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	f006 fbb0 	bl	8008658 <xQueueGenericSend>
		}


		if( xSemaphoreTake( lcdMutex, ( TickType_t ) 1000 ) == pdTRUE )
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <StartAdcTask+0x14c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fdb7 	bl	8008a74 <xQueueSemaphoreTake>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d1a2      	bne.n	8001e52 <StartAdcTask+0x2e>
		{
			sprintf(g_str_btm, "%04.1f, %.1f", adc_val_pot, adc_val_sou);
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <StartAdcTask+0x144>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb21 	bl	8000558 <__aeabi_f2d>
 8001f16:	4604      	mov	r4, r0
 8001f18:	460d      	mov	r5, r1
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <StartAdcTask+0x148>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb1a 	bl	8000558 <__aeabi_f2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9cd 2300 	strd	r2, r3, [sp]
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	462b      	mov	r3, r5
 8001f30:	4910      	ldr	r1, [pc, #64]	; (8001f74 <StartAdcTask+0x150>)
 8001f32:	4811      	ldr	r0, [pc, #68]	; (8001f78 <StartAdcTask+0x154>)
 8001f34:	f009 ffb4 	bl	800bea0 <siprintf>
			xSemaphoreGive( lcdMutex );
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <StartAdcTask+0x14c>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	f006 fb89 	bl	8008658 <xQueueGenericSend>
	  vTaskDelayUntil(&now, 50);
 8001f46:	e784      	b.n	8001e52 <StartAdcTask+0x2e>
 8001f48:	20000700 	.word	0x20000700
 8001f4c:	200004c4 	.word	0x200004c4
 8001f50:	20000608 	.word	0x20000608
 8001f54:	20001300 	.word	0x20001300
 8001f58:	20000702 	.word	0x20000702
 8001f5c:	20000d00 	.word	0x20000d00
 8001f60:	20000d02 	.word	0x20000d02
 8001f64:	200006d0 	.word	0x200006d0
 8001f68:	200006c8 	.word	0x200006c8
 8001f6c:	200006cc 	.word	0x200006cc
 8001f70:	200006f4 	.word	0x200006f4
 8001f74:	0800e8a4 	.word	0x0800e8a4
 8001f78:	200006e4 	.word	0x200006e4

08001f7c <StartRgbTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRgbTask */
void StartRgbTask(void const * argument)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRgbTask */
  /* Infinite loop */

	uint16_t adc_value;
	TickType_t last_blue_tick = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
	TickType_t last_red_tick = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
	TickType_t now = xTaskGetTickCount();
 8001f8c:	f007 fd6c 	bl	8009a68 <xTaskGetTickCount>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		vTaskDelayUntil(&now, 30);
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	211e      	movs	r1, #30
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f007 faf6 	bl	800958c <vTaskDelayUntil>

		if (adcMutex != NULL)
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <StartRgbTask+0xec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d018      	beq.n	8001fda <StartRgbTask+0x5e>
		{
			if( xSemaphoreTake( adcMutex, ( TickType_t ) 1000 ) == pdTRUE )
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <StartRgbTask+0xec>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f006 fd5f 	bl	8008a74 <xQueueSemaphoreTake>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10e      	bne.n	8001fda <StartRgbTask+0x5e>
			{
				adc_value = adc_val_pot;
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	; (800206c <StartRgbTask+0xf0>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	82fb      	strh	r3, [r7, #22]
				xSemaphoreGive( adcMutex );
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <StartRgbTask+0xec>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f006 fb3f 	bl	8008658 <xQueueGenericSend>
		{
//			vTracePrintF(adc_ch, "adc_value blocked");
		}

	 //red
	 if (adc_value > 3000)
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d90d      	bls.n	8002000 <StartRgbTask+0x84>
	 {
		 setRGB(0x00, 0xFF, 0x00);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	21ff      	movs	r1, #255	; 0xff
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fe8b 	bl	8001d04 <setRGB>
		 last_red_tick = now + 1400;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8001ff4:	60fb      	str	r3, [r7, #12]
		 last_blue_tick = now + 600 + 1400;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	e7c9      	b.n	8001f94 <StartRgbTask+0x18>
	 }
	 //yellow
	 else if ((adc_value > 2000) && (now > last_blue_tick))
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002006:	d909      	bls.n	800201c <StartRgbTask+0xa0>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d205      	bcs.n	800201c <StartRgbTask+0xa0>
	 {
		 setRGB(0x00, 0xFF, 0xFF);
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	21ff      	movs	r1, #255	; 0xff
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fe75 	bl	8001d04 <setRGB>
 800201a:	e024      	b.n	8002066 <StartRgbTask+0xea>
	 }
	 //green
	 else if ((adc_value > 1000) && (now > last_blue_tick))
 800201c:	8afb      	ldrh	r3, [r7, #22]
 800201e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002022:	d909      	bls.n	8002038 <StartRgbTask+0xbc>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d205      	bcs.n	8002038 <StartRgbTask+0xbc>
	 {
		 setRGB(0x00, 0x00, 0xFF);
 800202c:	22ff      	movs	r2, #255	; 0xff
 800202e:	2100      	movs	r1, #0
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fe67 	bl	8001d04 <setRGB>
 8002036:	e016      	b.n	8002066 <StartRgbTask+0xea>
	 }
	 //off
	 else if ((adc_value < 1000) && (now > last_blue_tick))
 8002038:	8afb      	ldrh	r3, [r7, #22]
 800203a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203e:	d209      	bcs.n	8002054 <StartRgbTask+0xd8>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d205      	bcs.n	8002054 <StartRgbTask+0xd8>
	 {
		 setRGB(0x00, 0x00, 0x00);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fe59 	bl	8001d04 <setRGB>
 8002052:	e008      	b.n	8002066 <StartRgbTask+0xea>
	 }
	 //blue
	 else if (now > last_red_tick)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d29b      	bcs.n	8001f94 <StartRgbTask+0x18>
	 {
		 setRGB(0xFF, 0x00, 0x00);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	20ff      	movs	r0, #255	; 0xff
 8002062:	f7ff fe4f 	bl	8001d04 <setRGB>
		vTaskDelayUntil(&now, 30);
 8002066:	e795      	b.n	8001f94 <StartRgbTask+0x18>
 8002068:	200006d0 	.word	0x200006d0
 800206c:	200006c8 	.word	0x200006c8

08002070 <StartLcdPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdPrintTask */
void StartLcdPrintTask(void const * argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdPrintTask */
	char str_top[16];
	char str_btm[16];

	TickType_t now = xTaskGetTickCount();
 8002078:	f007 fcf6 	bl	8009a68 <xTaskGetTickCount>
 800207c:	4603      	mov	r3, r0
 800207e:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if (lcdMutex != NULL)
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <StartLcdPrintTask+0xb0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02d      	beq.n	80020e4 <StartLcdPrintTask+0x74>
		{
			if( xSemaphoreTake ( lcdMutex, ( TickType_t ) 1000 ) == pdTRUE )
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <StartLcdPrintTask+0xb0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002090:	4618      	mov	r0, r3
 8002092:	f006 fcef 	bl	8008a74 <xQueueSemaphoreTake>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d123      	bne.n	80020e4 <StartLcdPrintTask+0x74>
			{
				for (int i = 0; i < 16; i++)
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a0:	e016      	b.n	80020d0 <StartLcdPrintTask+0x60>
				{
					str_top[i] = g_str_top[i];
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <StartLcdPrintTask+0xb4>)
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	4413      	add	r3, r2
 80020a8:	7819      	ldrb	r1, [r3, #0]
 80020aa:	f107 021c 	add.w	r2, r7, #28
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	4413      	add	r3, r2
 80020b2:	460a      	mov	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
					str_btm[i] = g_str_btm[i];
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <StartLcdPrintTask+0xb8>)
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	4413      	add	r3, r2
 80020bc:	7819      	ldrb	r1, [r3, #0]
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	4413      	add	r3, r2
 80020c6:	460a      	mov	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 16; i++)
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	3301      	adds	r3, #1
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	dde5      	ble.n	80020a2 <StartLcdPrintTask+0x32>
				}
				xSemaphoreGive( lcdMutex );
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <StartLcdPrintTask+0xb0>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	f006 faba 	bl	8008658 <xQueueGenericSend>
		else
		{
//			vTracePrintF(lcd_ch, "LCD blocked by mutex");
		}

		TextLCD_Position(&hlcd, 0, 0); // marker 1st row
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	4810      	ldr	r0, [pc, #64]	; (800212c <StartLcdPrintTask+0xbc>)
 80020ea:	f7ff f9ff 	bl	80014ec <TextLCD_Position>
		TextLCD_Puts(&hlcd, str_top);
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	4619      	mov	r1, r3
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <StartLcdPrintTask+0xbc>)
 80020f6:	f7ff fa35 	bl	8001564 <TextLCD_Puts>
		TextLCD_Position(&hlcd, 0, 1); // marker 2nd row
 80020fa:	2201      	movs	r2, #1
 80020fc:	2100      	movs	r1, #0
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <StartLcdPrintTask+0xbc>)
 8002100:	f7ff f9f4 	bl	80014ec <TextLCD_Position>
		TextLCD_Puts(&hlcd, str_btm);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <StartLcdPrintTask+0xbc>)
 800210c:	f7ff fa2a 	bl	8001564 <TextLCD_Puts>

		vTaskDelayUntil(&now, 50);
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	2132      	movs	r1, #50	; 0x32
 8002116:	4618      	mov	r0, r3
 8002118:	f007 fa38 	bl	800958c <vTaskDelayUntil>
		if (lcdMutex != NULL)
 800211c:	e7b0      	b.n	8002080 <StartLcdPrintTask+0x10>
 800211e:	bf00      	nop
 8002120:	200006f4 	.word	0x200006f4
 8002124:	200006d4 	.word	0x200006d4
 8002128:	200006e4 	.word	0x200006e4
 800212c:	200006b8 	.word	0x200006b8

08002130 <StartCountingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCountingTask */
void StartCountingTask(void const * argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCountingTask */
	/* Infinite loop */
	for (;;)
	{
		if(semButtonSemaphore != NULL)
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <StartCountingTask+0x6c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d027      	beq.n	8002190 <StartCountingTask+0x60>
		{
			if(xSemaphoreTake(semButtonSemaphore, (TickType_t) 1000) == pdTRUE )
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <StartCountingTask+0x6c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002148:	4618      	mov	r0, r3
 800214a:	f006 fc93 	bl	8008a74 <xQueueSemaphoreTake>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d11d      	bne.n	8002190 <StartCountingTask+0x60>
			{
				counter++;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <StartCountingTask+0x70>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <StartCountingTask+0x70>)
 800215e:	801a      	strh	r2, [r3, #0]

				if( xSemaphoreTake( lcdMutex, ( TickType_t ) 1000 ) == pdTRUE )
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <StartCountingTask+0x74>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002168:	4618      	mov	r0, r3
 800216a:	f006 fc83 	bl	8008a74 <xQueueSemaphoreTake>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10d      	bne.n	8002190 <StartCountingTask+0x60>
				{
					sprintf(g_str_top, "Counter: %d", counter);
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <StartCountingTask+0x70>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	490b      	ldr	r1, [pc, #44]	; (80021a8 <StartCountingTask+0x78>)
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <StartCountingTask+0x7c>)
 800217e:	f009 fe8f 	bl	800bea0 <siprintf>
					xSemaphoreGive( lcdMutex );
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <StartCountingTask+0x74>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	f006 fa64 	bl	8008658 <xQueueGenericSend>
				}
			}
		}
		osDelay(2000);
 8002190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002194:	f005 fd11 	bl	8007bba <osDelay>
		if(semButtonSemaphore != NULL)
 8002198:	e7ce      	b.n	8002138 <StartCountingTask+0x8>
 800219a:	bf00      	nop
 800219c:	200006fc 	.word	0x200006fc
 80021a0:	200006f8 	.word	0x200006f8
 80021a4:	200006f4 	.word	0x200006f4
 80021a8:	0800e7b4 	.word	0x0800e7b4
 80021ac:	200006d4 	.word	0x200006d4

080021b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c2:	f002 f9d3 	bl	800456c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021dc:	e7fe      	b.n	80021dc <Error_Handler+0x8>
	...

080021e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_MspInit+0x54>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_MspInit+0x54>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_MspInit+0x54>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_MspInit+0x54>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_MspInit+0x54>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_MspInit+0x54>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	210f      	movs	r1, #15
 8002222:	f06f 0001 	mvn.w	r0, #1
 8002226:	f002 fe7b 	bl	8004f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <HAL_ADC_MspInit+0xdc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d157      	bne.n	800230a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_ADC_MspInit+0xe0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002292:	2303      	movs	r3, #3
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002296:	2303      	movs	r3, #3
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <HAL_ADC_MspInit+0xe4>)
 80022a6:	f003 f9d5 	bl	8005654 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_ADC_MspInit+0xec>)
 80022ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ee:	480c      	ldr	r0, [pc, #48]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 80022f0:	f002 fe40 	bl	8004f74 <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022fa:	f7ff ff6b 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_ADC_MspInit+0xe8>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40012000 	.word	0x40012000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	2000050c 	.word	0x2000050c
 8002324:	40026410 	.word	0x40026410

08002328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_I2C_MspInit+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12c      	bne.n	80023a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236c:	2312      	movs	r3, #18
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002378:	2304      	movs	r3, #4
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	480c      	ldr	r0, [pc, #48]	; (80023b4 <HAL_I2C_MspInit+0x8c>)
 8002384:	f003 f966 	bl	8005654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40005400 	.word	0x40005400
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020400 	.word	0x40020400

080023b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d10e      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023e6:	e012      	b.n	800240e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x68>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10d      	bne.n	800240e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40000400 	.word	0x40000400

08002424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_UART_MspInit+0x84>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d12b      	bne.n	800249e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_UART_MspInit+0x88>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_UART_MspInit+0x88>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_UART_MspInit+0x88>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_UART_MspInit+0x88>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <HAL_UART_MspInit+0x88>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_UART_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800247e:	230c      	movs	r3, #12
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248e:	2307      	movs	r3, #7
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <HAL_UART_MspInit+0x8c>)
 800249a:	f003 f8db 	bl	8005654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40004400 	.word	0x40004400
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000

080024b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_InitTick+0xd0>)
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <HAL_InitTick+0xd0>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6453      	str	r3, [r2, #68]	; 0x44
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_InitTick+0xd0>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024e0:	f107 020c 	add.w	r2, r7, #12
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 fb66 	bl	8006bbc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024f0:	f004 fb50 	bl	8006b94 <HAL_RCC_GetPCLK2Freq>
 80024f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_InitTick+0xd4>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9b      	lsrs	r3, r3, #18
 8002500:	3b01      	subs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_InitTick+0xd8>)
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_InitTick+0xdc>)
 8002508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_InitTick+0xd8>)
 800250c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002510:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_InitTick+0xd8>)
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_InitTick+0xd8>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_InitTick+0xd8>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_InitTick+0xd8>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800252a:	4818      	ldr	r0, [pc, #96]	; (800258c <HAL_InitTick+0xd8>)
 800252c:	f004 fb78 	bl	8006c20 <HAL_TIM_Base_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11b      	bne.n	8002576 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800253e:	4813      	ldr	r0, [pc, #76]	; (800258c <HAL_InitTick+0xd8>)
 8002540:	f004 fc18 	bl	8006d74 <HAL_TIM_Base_Start_IT>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800254a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800254e:	2b00      	cmp	r3, #0
 8002550:	d111      	bne.n	8002576 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002552:	2019      	movs	r0, #25
 8002554:	f002 fd00 	bl	8004f58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	d808      	bhi.n	8002570 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800255e:	2200      	movs	r2, #0
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	2019      	movs	r0, #25
 8002564:	f002 fcdc 	bl	8004f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_InitTick+0xe0>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e002      	b.n	8002576 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800257a:	4618      	mov	r0, r3
 800257c:	3730      	adds	r7, #48	; 0x30
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	431bde83 	.word	0x431bde83
 800258c:	20001304 	.word	0x20001304
 8002590:	40010000 	.word	0x40010000
 8002594:	20000010 	.word	0x20000010

08002598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800259c:	e7fe      	b.n	800259c <NMI_Handler+0x4>

0800259e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <MemManage_Handler+0x4>

080025aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <BusFault_Handler+0x4>

080025b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <UsageFault_Handler+0x4>

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ca:	f004 fc35 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20001304 	.word	0x20001304

080025d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025e0:	f003 f9f0 	bl	80059c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <DMA2_Stream0_IRQHandler+0x10>)
 80025ee:	f002 fdc7 	bl	8005180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000050c 	.word	0x2000050c

080025fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_kill>:

int _kill(int pid, int sig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002616:	f008 fd91 	bl	800b13c <__errno>
 800261a:	4603      	mov	r3, r0
 800261c:	2216      	movs	r2, #22
 800261e:	601a      	str	r2, [r3, #0]
  return -1;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_exit>:

void _exit (int status)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ffe7 	bl	800260c <_kill>
  while (1) {}    /* Make sure we hang here */
 800263e:	e7fe      	b.n	800263e <_exit+0x12>

08002640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e00a      	b.n	8002668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002652:	f3af 8000 	nop.w
 8002656:	4601      	mov	r1, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbf0      	blt.n	8002652 <_read+0x12>
  }

  return len;
 8002670:	687b      	ldr	r3, [r7, #4]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e009      	b.n	80026a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dbf1      	blt.n	800268c <_write+0x12>
  }
  return len;
 80026a8:	687b      	ldr	r3, [r7, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <_close>:

int _close(int file)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026da:	605a      	str	r2, [r3, #4]
  return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_isatty>:

int _isatty(int file)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <_sbrk+0x5c>)
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <_sbrk+0x60>)
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <_sbrk+0x64>)
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <_sbrk+0x68>)
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	429a      	cmp	r2, r3
 800274a:	d207      	bcs.n	800275c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800274c:	f008 fcf6 	bl	800b13c <__errno>
 8002750:	4603      	mov	r3, r0
 8002752:	220c      	movs	r2, #12
 8002754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e009      	b.n	8002770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <_sbrk+0x64>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <_sbrk+0x64>)
 800276c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20018000 	.word	0x20018000
 800277c:	00000400 	.word	0x00000400
 8002780:	2000134c 	.word	0x2000134c
 8002784:	2000dc00 	.word	0x2000dc00

08002788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <soundLevel>:

#include <math.h>
#include "main.h"

float soundLevel(uint16_t* buffer, uint16_t len, uint16_t stride)
{
 80027ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b0:	b08c      	sub	sp, #48	; 0x30
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	807b      	strh	r3, [r7, #2]
 80027ba:	4613      	mov	r3, r2
 80027bc:	803b      	strh	r3, [r7, #0]
	if (len <= 0)
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <soundLevel+0x1e>
		return 0.0;
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e08e      	b.n	80028e8 <soundLevel+0x13c>
	int32_t sum = 0.0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t sq_sum = 0.0;
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int16_t size = len*stride;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	883b      	ldrh	r3, [r7, #0]
 80027de:	fb12 f303 	smulbb	r3, r2, r3
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	837b      	strh	r3, [r7, #26]
	for (int i = 0; i < size; i += stride)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e024      	b.n	8002836 <soundLevel+0x8a>
	{
		sum += buffer[i];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	4413      	add	r3, r2
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sq_sum += buffer[i]*buffer[i];
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	17da      	asrs	r2, r3, #31
 800281a:	461c      	mov	r4, r3
 800281c:	4615      	mov	r5, r2
 800281e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002822:	eb12 0804 	adds.w	r8, r2, r4
 8002826:	eb43 0905 	adc.w	r9, r3, r5
 800282a:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (int i = 0; i < size; i += stride)
 800282e:	883b      	ldrh	r3, [r7, #0]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	dbd5      	blt.n	80027ec <soundLevel+0x40>
	}

	float mean = ((float)sum) / len;
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002858:	edc7 7a05 	vstr	s15, [r7, #20]
	float variance = ((float)sq_sum) / len - mean * mean;
 800285c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002860:	f7fe faca 	bl	8000df8 <__aeabi_l2f>
 8002864:	ee06 0a90 	vmov	s13, r0
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002876:	edd7 7a05 	vldr	s15, [r7, #20]
 800287a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800287e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002882:	edc7 7a04 	vstr	s15, [r7, #16]

	float rms = sqrt(variance);
 8002886:	6938      	ldr	r0, [r7, #16]
 8002888:	f7fd fe66 	bl	8000558 <__aeabi_f2d>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b10 	vmov	d0, r2, r3
 8002894:	f00b fc26 	bl	800e0e4 <sqrt>
 8002898:	ec53 2b10 	vmov	r2, r3, d0
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f98a 	bl	8000bb8 <__aeabi_d2f>
 80028a4:	4603      	mov	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

	return 20*log10(rms/2048.0);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7fd fe55 	bl	8000558 <__aeabi_f2d>
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <soundLevel+0x14c>)
 80028b4:	f7fd ffd2 	bl	800085c <__aeabi_ddiv>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	ec43 2b17 	vmov	d7, r2, r3
 80028c0:	eeb0 0a47 	vmov.f32	s0, s14
 80028c4:	eef0 0a67 	vmov.f32	s1, s15
 80028c8:	f00b fbce 	bl	800e068 <log10>
 80028cc:	ec51 0b10 	vmov	r0, r1, d0
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <soundLevel+0x150>)
 80028d6:	f7fd fe97 	bl	8000608 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f969 	bl	8000bb8 <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
}
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	3730      	adds	r7, #48	; 0x30
 80028f2:	46bd      	mov	sp, r7
 80028f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028f8:	40a00000 	.word	0x40a00000
 80028fc:	40340000 	.word	0x40340000

08002900 <averageSamples>:

float averageSamples(uint16_t * buffer, uint16_t len, uint16_t stride)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	803b      	strh	r3, [r7, #0]
	if (len <= 0)
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <averageSamples+0x1c>
		return 0.0;
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e02b      	b.n	8002974 <averageSamples+0x74>
	int32_t sum = 0.0;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
	int16_t size = len*stride;
 8002920:	887a      	ldrh	r2, [r7, #2]
 8002922:	883b      	ldrh	r3, [r7, #0]
 8002924:	fb12 f303 	smulbb	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < size; i += stride)
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e00c      	b.n	800294c <averageSamples+0x4c>
	{
		sum += buffer[i];
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4413      	add	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < size; i += stride)
 8002944:	883b      	ldrh	r3, [r7, #0]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	429a      	cmp	r2, r3
 8002954:	dbed      	blt.n	8002932 <averageSamples+0x32>
	}

	float mean = ((float)sum) / len;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a02 	vstr	s15, [r7, #8]

	return mean;
 8002972:	68bb      	ldr	r3, [r7, #8]
}
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eeb0 0a67 	vmov.f32	s0, s15
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029b2:	f7ff fee9 	bl	8002788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f008 fcbd 	bl	800b334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fe27 	bl	800160c <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80029cc:	0800f444 	.word	0x0800f444
  ldr r2, =_sbss
 80029d0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80029d4:	2000dbfc 	.word	0x2000dbfc

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>

080029da <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f006 fa78 	bl	8008ed8 <uxQueueGetQueueNumber>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f006 fa86 	bl	8008f0c <ucQueueGetQueueType>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f007 fb70 	bl	800a0f8 <uxTaskGetTaskNumber>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29b      	uxth	r3, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f007 fb63 	bl	800a0f8 <uxTaskGetTaskNumber>
 8002a32:	4603      	mov	r3, r0
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b29b      	uxth	r3, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f007 fb53 	bl	800a0f8 <uxTaskGetTaskNumber>
 8002a52:	4603      	mov	r3, r0
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f007 fb60 	bl	800a124 <vTaskSetTaskNumber>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f007 fb3d 	bl	800a0f8 <uxTaskGetTaskNumber>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	4313      	orrs	r3, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f007 fb4a 	bl	800a124 <vTaskSetTaskNumber>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff9a 	bl	80029da <prvTraceGetQueueNumber>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29b      	uxth	r3, r3
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff8d 	bl	80029da <prvTraceGetQueueNumber>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	b29b      	uxth	r3, r3
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff7d 	bl	80029da <prvTraceGetQueueNumber>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f006 f9ff 	bl	8008ef0 <vQueueSetQueueNumber>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff67 	bl	80029da <prvTraceGetQueueNumber>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	4313      	orrs	r3, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f006 f9e9 	bl	8008ef0 <vQueueSetQueueNumber>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <prvTraceGetEventGroupNumberLow16>:
#endif

#if (TRC_CFG_INCLUDE_EVENT_GROUP_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetEventGroupNumberLow16(void* pvEventGroup)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxEventGroupGetNumber(pvEventGroup));
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 fafe 	bl	8008130 <uxEventGroupGetNumber>
 8002b34:	4603      	mov	r3, r0
 8002b36:	b29b      	uxth	r3, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvTraceGetEventGroupNumberHigh16>:

uint16_t prvTraceGetEventGroupNumberHigh16(void* pvEventGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxEventGroupGetNumber(pvEventGroup));
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 faf1 	bl	8008130 <uxEventGroupGetNumber>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	b29b      	uxth	r3, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <prvTraceSetEventGroupNumberLow16>:

void prvTraceSetEventGroupNumberLow16(void* pvEventGroup, uint16_t uiValue)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
	vEventGroupSetNumber(pvEventGroup, TRACE_SET_LOW16(uxEventGroupGetNumber(pvEventGroup), uiValue));
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 fae1 	bl	8008130 <uxEventGroupGetNumber>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f005 faee 	bl	800815c <vEventGroupSetNumber>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <prvTraceSetEventGroupNumberHigh16>:

void prvTraceSetEventGroupNumberHigh16(void* pvEventGroup, uint16_t uiValue)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
	vEventGroupSetNumber(pvEventGroup, TRACE_SET_HIGH16(uxEventGroupGetNumber(pvEventGroup), uiValue));
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f005 facb 	bl	8008130 <uxEventGroupGetNumber>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f005 fad8 	bl	800815c <vEventGroupSetNumber>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8002bb8:	f007 fba2 	bl	800a300 <xTaskGetCurrentTaskHandle>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable()
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2209      	movs	r2, #9
 8002bf2:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8002bf4:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8002bfe:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	220a      	movs	r2, #10
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8002c08:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	220a      	movs	r2, #10
 8002c0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8002c12:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	220f      	movs	r2, #15
 8002c18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8002c1c:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8002c26:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8002c3a:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2205      	movs	r2, #5
 8002c40:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8002c44:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8002c4e:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	220f      	movs	r2, #15
 8002c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	220f      	movs	r2, #15
 8002c68:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	220f      	movs	r2, #15
 8002c72:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8002c80:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	220f      	movs	r2, #15
 8002c86:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	220f      	movs	r2, #15
 8002c90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	220f      	movs	r2, #15
 8002c9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2213      	movs	r2, #19
 8002ccc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2211      	movs	r2, #17
 8002cd6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2213      	movs	r2, #19
 8002cea:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2213      	movs	r2, #19
 8002cf4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2213      	movs	r2, #19
 8002cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8002d02:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	22a0      	movs	r2, #160	; 0xa0
 8002d12:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d1e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d2a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f240 22fd 	movw	r2, #765	; 0x2fd
 8002d36:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f240 3252 	movw	r2, #850	; 0x352
 8002d42:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f240 32a2 	movw	r2, #930	; 0x3a2
 8002d4e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f240 4201 	movw	r2, #1025	; 0x401
 8002d5a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8002d66:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8002d72:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20009a78 	.word	0x20009a78

08002d84 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack()
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	825a      	strh	r2, [r3, #18]
 8002d94:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002d96:	8a5a      	ldrh	r2, [r3, #18]
 8002d98:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002d9a:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002d9e:	220a      	movs	r2, #10
 8002da0:	829a      	strh	r2, [r3, #20]
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002da4:	8a9a      	ldrh	r2, [r3, #20]
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002da8:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dac:	2214      	movs	r2, #20
 8002dae:	82da      	strh	r2, [r3, #22]
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002db2:	8ada      	ldrh	r2, [r3, #22]
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002db6:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dba:	221e      	movs	r2, #30
 8002dbc:	831a      	strh	r2, [r3, #24]
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dc0:	8b1a      	ldrh	r2, [r3, #24]
 8002dc2:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dc4:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dc8:	222d      	movs	r2, #45	; 0x2d
 8002dca:	835a      	strh	r2, [r3, #26]
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dce:	8b5a      	ldrh	r2, [r3, #26]
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dd2:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dd6:	2232      	movs	r2, #50	; 0x32
 8002dd8:	839a      	strh	r2, [r3, #28]
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ddc:	8b9a      	ldrh	r2, [r3, #28]
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002de0:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002de4:	2237      	movs	r2, #55	; 0x37
 8002de6:	83da      	strh	r2, [r3, #30]
 8002de8:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dea:	8bda      	ldrh	r2, [r3, #30]
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dee:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002df2:	223c      	movs	r2, #60	; 0x3c
 8002df4:	841a      	strh	r2, [r3, #32]
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002df8:	8c1a      	ldrh	r2, [r3, #32]
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002dfc:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e00:	2241      	movs	r2, #65	; 0x41
 8002e02:	845a      	strh	r2, [r3, #34]	; 0x22
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e06:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e0a:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e0e:	2209      	movs	r2, #9
 8002e10:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e14:	2213      	movs	r2, #19
 8002e16:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e1a:	221d      	movs	r2, #29
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e20:	222c      	movs	r2, #44	; 0x2c
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e26:	2231      	movs	r2, #49	; 0x31
 8002e28:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e2c:	2236      	movs	r2, #54	; 0x36
 8002e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e32:	223b      	movs	r2, #59	; 0x3b
 8002e34:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e3e:	2245      	movs	r2, #69	; 0x45
 8002e40:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	e009      	b.n	8002e5c <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8002e48:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d9f2      	bls.n	8002e48 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	e008      	b.n	8002e7a <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8002e68:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3348      	adds	r3, #72	; 0x48
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b45      	cmp	r3, #69	; 0x45
 8002e7e:	d9f3      	bls.n	8002e68 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20001380 	.word	0x20001380

08002e94 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d827      	bhi.n	8002ef4 <pszTraceGetErrorNotEnoughHandles+0x60>
 8002ea4:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <pszTraceGetErrorNotEnoughHandles+0x18>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ee5 	.word	0x08002ee5
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	08002ef1 	.word	0x08002ef1
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8002ed2:	e010      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8002ed6:	e00e      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <pszTraceGetErrorNotEnoughHandles+0x78>)
 8002eda:	e00c      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8002ede:	e00a      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8002ee2:	e008      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8002ee6:	e006      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <pszTraceGetErrorNotEnoughHandles+0x88>)
 8002eea:	e004      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8002eee:	e002      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8002ef2:	e000      	b.n	8002ef6 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	0800e8b4 	.word	0x0800e8b4
 8002f08:	0800e8fc 	.word	0x0800e8fc
 8002f0c:	0800e944 	.word	0x0800e944
 8002f10:	0800e998 	.word	0x0800e998
 8002f14:	0800e9e4 	.word	0x0800e9e4
 8002f18:	0800ea30 	.word	0x0800ea30
 8002f1c:	0800ea7c 	.word	0x0800ea7c
 8002f20:	0800ead0 	.word	0x0800ead0
 8002f24:	0800eb28 	.word	0x0800eb28
 8002f28:	0800eb84 	.word	0x0800eb84

08002f2c <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8002f34:	f000 f930 	bl	8003198 <xTraceInitialize>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e01f      	b.n	8002f82 <xTraceEnable+0x56>
	}

	if (uiStartOption == TRC_START)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10b      	bne.n	8002f60 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8002f48:	f7ff fe46 	bl	8002bd8 <xTraceKernelPortEnable>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e015      	b.n	8002f82 <xTraceEnable+0x56>
		}
		
		prvTraceInitTimestamps();
 8002f56:	f000 f89d 	bl	8003094 <prvTraceInitTimestamps>

		prvTraceStart();
 8002f5a:	f000 f823 	bl	8002fa4 <prvTraceStart>
 8002f5e:	e00f      	b.n	8002f80 <xTraceEnable+0x54>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d104      	bne.n	8002f70 <xTraceEnable+0x44>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8002f66:	4809      	ldr	r0, [pc, #36]	; (8002f8c <xTraceEnable+0x60>)
 8002f68:	f000 ff78 	bl	8003e5c <prvTraceError>

		return TRC_FAIL;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e008      	b.n	8002f82 <xTraceEnable+0x56>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <xTraceEnable+0x54>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8002f76:	4806      	ldr	r0, [pc, #24]	; (8002f90 <xTraceEnable+0x64>)
 8002f78:	f000 ff70 	bl	8003e5c <prvTraceError>

		return TRC_FAIL;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <xTraceEnable+0x56>
	}

	return TRC_SUCCESS;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	0800ebb4 	.word	0x0800ebb4
 8002f90:	0800ebf4 	.word	0x0800ebf4

08002f94 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	prvTraceStop();
 8002f98:	f000 f864 	bl	8003064 <prvTraceStop>

	return TRC_SUCCESS;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == 0)
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <prvTraceStart+0xb0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d047      	beq.n	8003046 <prvTraceStart+0xa2>
	{
		TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <prvTraceStart+0xb0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d044      	beq.n	800304a <prvTraceStart+0xa6>
		return; /* Already running */

	if (traceErrorMessage == 0)
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <prvTraceStart+0xb4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d141      	bne.n	800304c <prvTraceStart+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fce:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	bf00      	nop
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <prvTraceStart+0xb8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <prvTraceStart+0xb8>)
 8002fe6:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <prvTraceStart+0xb0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8002ff0:	f7ff fde0 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fd07 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d110      	bne.n	8003028 <prvTraceStart+0x84>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8003006:	2003      	movs	r0, #3
 8003008:	f000 fdac 	bl	8003b64 <prvTraceGetObjectHandle>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <prvTraceStart+0xbc>)
 8003014:	4619      	mov	r1, r3
 8003016:	2003      	movs	r0, #3
 8003018:	f000 fe80 	bl	8003d1c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2200      	movs	r2, #0
 8003020:	4619      	mov	r1, r3
 8003022:	2003      	movs	r0, #3
 8003024:	f000 fc90 	bl	8003948 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fc22 	bl	8003874 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <prvTraceStart+0xb8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3b01      	subs	r3, #1
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <prvTraceStart+0xb8>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	e002      	b.n	800304c <prvTraceStart+0xa8>
		return;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <prvTraceStart+0xa8>
		return; /* Already running */
 800304a:	bf00      	nop
	}
}
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20009a78 	.word	0x20009a78
 8003058:	20001410 	.word	0x20001410
 800305c:	20001368 	.word	0x20001368
 8003060:	0800ec34 	.word	0x0800ec34

08003064 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != 0)
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <prvTraceStop+0x28>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <prvTraceStop+0x28>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <prvTraceStop+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <prvTraceStop+0x2c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4798      	blx	r3
	}
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20009a78 	.word	0x20009a78
 8003090:	20001374 	.word	0x20001374

08003094 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <prvTraceInitTimestamps+0x18>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <prvTraceInitTimestamps+0x1c>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e0001004 	.word	0xe0001004
 80030b0:	20001378 	.word	0x20001378

080030b4 <xTracePrint>:
 * Generates a User Event with a text label. The label is created/looked up
 * in the symbol table using xTraceStringRegister.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrint(TraceStringHandle_t chn, const char* str)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80030c4:	68fb      	ldr	r3, [r7, #12]
#if (TRC_CFG_USE_SEPARATE_USER_EVENT_BUFFER == 0)
	UserEvent* ue;
	uint8_t dts1;
	TRACE_ALLOC_CRITICAL_SECTION();

	trcCRITICAL_SECTION_BEGIN();
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	bf00      	nop
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <xTracePrint+0x94>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <xTracePrint+0x94>)
 80030dc:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <xTracePrint+0x98>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01e      	beq.n	8003126 <xTracePrint+0x72>
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <xTracePrint+0x9c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01a      	beq.n	8003126 <xTracePrint+0x72>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80030f0:	20ff      	movs	r0, #255	; 0xff
 80030f2:	f000 ff8f 	bl	8004014 <prvTraceGetDTS>
 80030f6:	4603      	mov	r3, r0
 80030f8:	76fb      	strb	r3, [r7, #27]
		ue = (UserEvent*) prvTraceNextFreeEventBufferSlot();
 80030fa:	f000 fcd3 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 80030fe:	6178      	str	r0, [r7, #20]
		if (ue != 0)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00f      	beq.n	8003126 <xTracePrint+0x72>
		{
			ue->dts = dts1;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	7efa      	ldrb	r2, [r7, #27]
 800310a:	705a      	strb	r2, [r3, #1]
			ue->type = USER_EVENT;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2298      	movs	r2, #152	; 0x98
 8003110:	701a      	strb	r2, [r3, #0]
			ue->payload = prvTraceOpenSymbol(str, chn);
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	6838      	ldr	r0, [r7, #0]
 8003116:	f000 fe5b 	bl	8003dd0 <prvTraceOpenSymbol>
 800311a:	4603      	mov	r3, r0
 800311c:	b29a      	uxth	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003122:	f000 ff4f 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <xTracePrint+0x94>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <xTracePrint+0x94>)
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	bf00      	nop

		prvTraceUBHelper2(channel, tempDataBuffer, noOfSlots);
	}
#endif

	return TRC_SUCCESS;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001368 	.word	0x20001368
 800314c:	20009a78 	.word	0x20009a78
 8003150:	20001370 	.word	0x20001370

08003154 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != 0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fe35 	bl	8003dd0 <prvTraceOpenSymbol>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ffe3 	bl	8003154 <xTraceStringRegister>

	return trcStr;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <xTraceInitialize>:
#endif

traceResult xTraceInitialize()
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 800319c:	4b8a      	ldr	r3, [pc, #552]	; (80033c8 <xTraceInitialize+0x230>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e10d      	b.n	80033c4 <xTraceInitialize+0x22c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80031a8:	4b88      	ldr	r3, [pc, #544]	; (80033cc <xTraceInitialize+0x234>)
 80031aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ae:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80031b0:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <xTraceInitialize+0x238>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80031b6:	4b87      	ldr	r3, [pc, #540]	; (80033d4 <xTraceInitialize+0x23c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80031bc:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <xTraceInitialize+0x240>)
 80031be:	4a87      	ldr	r2, [pc, #540]	; (80033dc <xTraceInitialize+0x244>)
 80031c0:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80031c2:	4b87      	ldr	r3, [pc, #540]	; (80033e0 <xTraceInitialize+0x248>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a87      	ldr	r2, [pc, #540]	; (80033e4 <xTraceInitialize+0x24c>)
 80031c8:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 80031ca:	4887      	ldr	r0, [pc, #540]	; (80033e8 <xTraceInitialize+0x250>)
 80031cc:	f7ff fcf9 	bl	8002bc2 <xTraceKernelPortInitialize>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <xTraceInitialize+0x42>
	{
		return TRC_FAIL;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0f4      	b.n	80033c4 <xTraceInitialize+0x22c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <xTraceInitialize+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f248 6264 	movw	r2, #34404	; 0x8664
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f008 f8da 	bl	800b39e <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 80031ea:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <xTraceInitialize+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 80031f2:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 80031f4:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <xTraceInitialize+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2207      	movs	r2, #7
 80031fa:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80031fc:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <xTraceInitialize+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2200      	movs	r2, #0
 8003202:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003204:	4b74      	ldr	r3, [pc, #464]	; (80033d8 <xTraceInitialize+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f248 6264 	movw	r2, #34404	; 0x8664
 800320c:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <xTraceInitialize+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003216:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8003218:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <xTraceInitialize+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8003222:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <xTraceInitialize+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800322a:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <xTraceInitialize+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8003232:	f7ff fcd9 	bl	8002be8 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003236:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <xTraceInitialize+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 800323e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <xTraceInitialize+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f44f 7248 	mov.w	r2, #800	; 0x320
 800324a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <xTraceInitialize+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8003258:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <xTraceInitialize+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8003260:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003264:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <xTraceInitialize+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	2250      	movs	r2, #80	; 0x50
 800326e:	495f      	ldr	r1, [pc, #380]	; (80033ec <xTraceInitialize+0x254>)
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fd2d 	bl	8003cd0 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8003276:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <xTraceInitialize+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 800327e:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <xTraceInitialize+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800328a:	220a      	movs	r2, #10
 800328c:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
	RecorderDataPtr->endmarker1 = 0x0B;
 8003290:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <xTraceInitialize+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003298:	220b      	movs	r2, #11
 800329a:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
	RecorderDataPtr->endmarker2 = 0x0C;
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <xTraceInitialize+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032a6:	220c      	movs	r2, #12
 80032a8:	f883 265a 	strb.w	r2, [r3, #1626]	; 0x65a
	RecorderDataPtr->endmarker3 = 0x0D;
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <xTraceInitialize+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032b4:	220d      	movs	r2, #13
 80032b6:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
	RecorderDataPtr->endmarker4 = 0x71;
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <xTraceInitialize+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032c2:	2271      	movs	r2, #113	; 0x71
 80032c4:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
	RecorderDataPtr->endmarker5 = 0x72;
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <xTraceInitialize+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032d0:	2272      	movs	r2, #114	; 0x72
 80032d2:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
	RecorderDataPtr->endmarker6 = 0x73;
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <xTraceInitialize+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032de:	2273      	movs	r2, #115	; 0x73
 80032e0:	f883 265e 	strb.w	r2, [r3, #1630]	; 0x65e
	RecorderDataPtr->endmarker7 = 0x74;
 80032e4:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <xTraceInitialize+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032ec:	2274      	movs	r2, #116	; 0x74
 80032ee:	f883 265f 	strb.w	r2, [r3, #1631]	; 0x65f
	RecorderDataPtr->endmarker8 = 0xF1;
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <xTraceInitialize+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032fa:	22f1      	movs	r2, #241	; 0xf1
 80032fc:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
	RecorderDataPtr->endmarker9 = 0xF2;
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <xTraceInitialize+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003308:	22f2      	movs	r2, #242	; 0xf2
 800330a:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
	RecorderDataPtr->endmarker10 = 0xF3;
 800330e:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <xTraceInitialize+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003316:	22f3      	movs	r2, #243	; 0xf3
 8003318:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
	RecorderDataPtr->endmarker11 = 0xF4;
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <xTraceInitialize+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003324:	22f4      	movs	r2, #244	; 0xf4
 8003326:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 800332a:	f7ff fd2b 	bl	8002d84 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <xTraceInitialize+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	22f4      	movs	r2, #244	; 0xf4
 8003334:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <xTraceInitialize+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	22f3      	movs	r2, #243	; 0xf3
 800333c:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <xTraceInitialize+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	22f2      	movs	r2, #242	; 0xf2
 8003344:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <xTraceInitialize+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	22f1      	movs	r2, #241	; 0xf1
 800334c:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <xTraceInitialize+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2274      	movs	r2, #116	; 0x74
 8003354:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <xTraceInitialize+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2273      	movs	r2, #115	; 0x73
 800335c:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <xTraceInitialize+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2272      	movs	r2, #114	; 0x72
 8003364:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <xTraceInitialize+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2271      	movs	r2, #113	; 0x71
 800336c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <xTraceInitialize+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2204      	movs	r2, #4
 8003374:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <xTraceInitialize+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2203      	movs	r2, #3
 800337c:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <xTraceInitialize+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2202      	movs	r2, #2
 8003384:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <xTraceInitialize+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != 0)
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <xTraceInitialize+0x23c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <xTraceInitialize+0x220>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <xTraceInitialize+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <xTraceInitialize+0x23c>)
 80033a0:	6811      	ldr	r1, [r2, #0]
 80033a2:	2250      	movs	r2, #80	; 0x50
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fc93 	bl	8003cd0 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <xTraceInitialize+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 80033b4:	f7ff fe56 	bl	8003064 <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 80033b8:	f001 f834 	bl	8004424 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <xTraceInitialize+0x230>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20009a7c 	.word	0x20009a7c
 80033cc:	2000137c 	.word	0x2000137c
 80033d0:	2000137e 	.word	0x2000137e
 80033d4:	20001410 	.word	0x20001410
 80033d8:	20009a78 	.word	0x20009a78
 80033dc:	20001414 	.word	0x20001414
 80033e0:	e0001004 	.word	0xe0001004
 80033e4:	20001378 	.word	0x20001378
 80033e8:	20001350 	.word	0x20001350
 80033ec:	0800ed80 	.word	0x0800ed80

080033f0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d044      	beq.n	800348a <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <prvTraceStoreTaskReady+0xa8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d042      	beq.n	800348e <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <prvTraceStoreTaskReady+0xac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8003410:	4823      	ldr	r0, [pc, #140]	; (80034a0 <prvTraceStoreTaskReady+0xb0>)
 8003412:	f000 fd23 	bl	8003e5c <prvTraceError>
		return;
 8003416:	e03b      	b.n	8003490 <prvTraceStoreTaskReady+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	60fb      	str	r3, [r7, #12]
  return(result);
 800341e:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	2301      	movs	r3, #1
 8003424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	bf00      	nop
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <prvTraceStoreTaskReady+0xac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <prvTraceStoreTaskReady+0xac>)
 8003436:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <prvTraceStoreTaskReady+0xb4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003442:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003446:	f000 fde5 	bl	8004014 <prvTraceGetDTS>
 800344a:	4603      	mov	r3, r0
 800344c:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8003452:	f000 fb27 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 8003456:	6178      	str	r0, [r7, #20]
		if (tr != 0)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	8b7a      	ldrh	r2, [r7, #26]
 8003468:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	7e7a      	ldrb	r2, [r7, #25]
 800346e:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003470:	f000 fda8 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <prvTraceStoreTaskReady+0xac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <prvTraceStoreTaskReady+0xac>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	e002      	b.n	8003490 <prvTraceStoreTaskReady+0xa0>
		return;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <prvTraceStoreTaskReady+0xa0>
		return;
 800348e:	bf00      	nop
}
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c
 800349c:	20001368 	.word	0x20001368
 80034a0:	0800ed94 	.word	0x0800ed94
 80034a4:	20009a78 	.word	0x20009a78

080034a8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == 0)
 80034b4:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8084 	beq.w	80035c6 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da03      	bge.n	80034cc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	425b      	negs	r3, r3
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	e001      	b.n	80034d0 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80034d6:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
 80034da:	2301      	movs	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	bf00      	nop
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <vTraceStoreMemMangEvent+0x12c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a39      	ldr	r2, [pc, #228]	; (80035d4 <vTraceStoreMemMangEvent+0x12c>)
 80034ee:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	440a      	add	r2, r1
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	429a      	cmp	r2, r3
 8003514:	d905      	bls.n	8003522 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <vTraceStoreMemMangEvent+0x128>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d041      	beq.n	80035b0 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 800352c:	20ff      	movs	r0, #255	; 0xff
 800352e:	f000 fd71 	bl	8004014 <prvTraceGetDTS>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8003538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800353a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800353e:	f000 f90f 	bl	8003760 <prvTraceGetParam>
 8003542:	4603      	mov	r3, r0
 8003544:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003546:	f000 faad 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 800354a:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != 0)
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003558:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003564:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003566:	f000 fd2d 	bl	8003fc4 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003570:	f000 f8f6 	bl	8003760 <prvTraceGetParam>
 8003574:	4603      	mov	r3, r0
 8003576:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 800357e:	f000 fa91 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 8003582:	6238      	str	r0, [r7, #32]
			if (ma != 0)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800358e:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003596:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80035ac:	f000 fd0a 	bl	8003fc4 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <vTraceStoreMemMangEvent+0x12c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <vTraceStoreMemMangEvent+0x12c>)
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	e000      	b.n	80035c8 <vTraceStoreMemMangEvent+0x120>
		return;
 80035c6:	bf00      	nop
}
 80035c8:	3738      	adds	r7, #56	; 0x38
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20009a78 	.word	0x20009a78
 80035d4:	20001368 	.word	0x20001368

080035d8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	460b      	mov	r3, r1
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <prvTraceStoreKernelCall+0xa8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80035ee:	4825      	ldr	r0, [pc, #148]	; (8003684 <prvTraceStoreKernelCall+0xac>)
 80035f0:	f000 fc34 	bl	8003e5c <prvTraceError>
		return;
 80035f4:	e040      	b.n	8003678 <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <prvTraceStoreKernelCall+0xb0>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03b      	beq.n	8003676 <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	617b      	str	r3, [r7, #20]
  return(result);
 8003604:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	2301      	movs	r3, #1
 800360a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	bf00      	nop
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <prvTraceStoreKernelCall+0xa8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <prvTraceStoreKernelCall+0xa8>)
 800361c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <prvTraceStoreKernelCall+0xb4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003628:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800362c:	f000 fcf2 	bl	8004014 <prvTraceGetDTS>
 8003630:	4603      	mov	r3, r0
 8003632:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 800363a:	f000 fa33 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 800363e:	61f8      	str	r0, [r7, #28]
		if (kse != 0)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800364a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800365a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800365c:	f000 fcb2 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <prvTraceStoreKernelCall+0xa8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	4a06      	ldr	r2, [pc, #24]	; (8003680 <prvTraceStoreKernelCall+0xa8>)
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	e000      	b.n	8003678 <prvTraceStoreKernelCall+0xa0>
		return;
 8003676:	bf00      	nop
}
 8003678:	3728      	adds	r7, #40	; 0x28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20001368 	.word	0x20001368
 8003684:	0800edcc 	.word	0x0800edcc
 8003688:	20001370 	.word	0x20001370
 800368c:	20009a78 	.word	0x20009a78

08003690 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <prvTraceStoreKernelCallWithParam+0xc0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80036a8:	482a      	ldr	r0, [pc, #168]	; (8003754 <prvTraceStoreKernelCallWithParam+0xc4>)
 80036aa:	f000 fbd7 	bl	8003e5c <prvTraceError>
		return;
 80036ae:	e04b      	b.n	8003748 <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	617b      	str	r3, [r7, #20]
  return(result);
 80036b6:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	bf00      	nop
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <prvTraceStoreKernelCallWithParam+0xc0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <prvTraceStoreKernelCallWithParam+0xc0>)
 80036ce:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <prvTraceStoreKernelCallWithParam+0xc8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02b      	beq.n	8003732 <prvTraceStoreKernelCallWithParam+0xa2>
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <prvTraceStoreKernelCallWithParam+0xcc>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d027      	beq.n	8003732 <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80036e2:	20ff      	movs	r0, #255	; 0xff
 80036e4:	f000 fc96 	bl	8004014 <prvTraceGetDTS>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	20ff      	movs	r0, #255	; 0xff
 80036f2:	f000 f835 	bl	8003760 <prvTraceGetParam>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8003702:	f000 f9cf 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 8003706:	61f8      	str	r0, [r7, #28]
		if (kse != 0)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003714:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003724:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800372c:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 800372e:	f000 fc49 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <prvTraceStoreKernelCallWithParam+0xc0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3b01      	subs	r3, #1
 8003738:	4a05      	ldr	r2, [pc, #20]	; (8003750 <prvTraceStoreKernelCallWithParam+0xc0>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	bf00      	nop
}
 8003748:	3728      	adds	r7, #40	; 0x28
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20001368 	.word	0x20001368
 8003754:	0800ee04 	.word	0x0800ee04
 8003758:	20009a78 	.word	0x20009a78
 800375c:	20001370 	.word	0x20001370

08003760 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d801      	bhi.n	8003776 <prvTraceGetParam+0x16>
	{
		return param;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	e01d      	b.n	80037b2 <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8003776:	f000 f995 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 800377a:	60f8      	str	r0, [r7, #12]
		if (xps != 0)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	43da      	mvns	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4013      	ands	r3, r2
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	43da      	mvns	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4013      	ands	r3, r2
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80037a8:	f000 fc0c 	bl	8003fc4 <prvTraceUpdateCounters>
		}

		return param & param_max;
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4013      	ands	r3, r2
	}
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80037d2:	4825      	ldr	r0, [pc, #148]	; (8003868 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 80037d4:	f000 fb42 	bl	8003e5c <prvTraceError>
		return;
 80037d8:	e041      	b.n	800385e <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	613b      	str	r3, [r7, #16]
  return(result);
 80037e0:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	2301      	movs	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	bf00      	nop
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80037f8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2b00      	cmp	r3, #0
 8003802:	d021      	beq.n	8003848 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01d      	beq.n	8003848 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800380c:	20ff      	movs	r0, #255	; 0xff
 800380e:	f000 fc01 	bl	8004014 <prvTraceGetDTS>
 8003812:	4603      	mov	r3, r0
 8003814:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800381c:	f7ff ffa0 	bl	8003760 <prvTraceGetParam>
 8003820:	4603      	mov	r3, r0
 8003822:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003824:	f000 f93e 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 8003828:	61b8      	str	r0, [r7, #24]
		if (kse != 0)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	7ffa      	ldrb	r2, [r7, #31]
 8003834:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003842:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003844:	f000 fbbe 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	bf00      	nop
}
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20001368 	.word	0x20001368
 8003868:	0800ee3c 	.word	0x0800ee3c
 800386c:	20009a78 	.word	0x20009a78
 8003870:	20001370 	.word	0x20001370

08003874 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387e:	f3ef 8310 	mrs	r3, PRIMASK
 8003882:	60fb      	str	r3, [r7, #12]
  return(result);
 8003884:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	2301      	movs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	bf00      	nop
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <prvTraceStoreTaskswitch+0xc4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a27      	ldr	r2, [pc, #156]	; (8003938 <prvTraceStoreTaskswitch+0xc4>)
 800389c:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800389e:	4b27      	ldr	r3, [pc, #156]	; (800393c <prvTraceStoreTaskswitch+0xc8>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	79fa      	ldrb	r2, [r7, #7]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d038      	beq.n	800391a <prvTraceStoreTaskswitch+0xa6>
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <prvTraceStoreTaskswitch+0xcc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d033      	beq.n	800391a <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <prvTraceStoreTaskswitch+0xd0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80038b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80038bc:	f000 fbaa 	bl	8004014 <prvTraceGetDTS>
 80038c0:	4603      	mov	r3, r0
 80038c2:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <prvTraceStoreTaskswitch+0xc8>)
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 80038ca:	4b1c      	ldr	r3, [pc, #112]	; (800393c <prvTraceStoreTaskswitch+0xc8>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 80038d0:	f000 f8e8 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 80038d4:	6178      	str	r0, [r7, #20]

		if (ts != 0)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01e      	beq.n	800391a <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <prvTraceStoreTaskswitch+0xc8>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	4619      	mov	r1, r3
 80038e2:	2003      	movs	r0, #3
 80038e4:	f000 f89e 	bl	8003a24 <prvTraceGetObjectState>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d103      	bne.n	80038f6 <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2207      	movs	r2, #7
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e002      	b.n	80038fc <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2206      	movs	r2, #6
 80038fa:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	8b7a      	ldrh	r2, [r7, #26]
 8003900:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	7e7a      	ldrb	r2, [r7, #25]
 8003906:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <prvTraceStoreTaskswitch+0xc8>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2201      	movs	r2, #1
 800390e:	4619      	mov	r1, r3
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f863 	bl	80039dc <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8003916:	f000 fb55 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <prvTraceStoreTaskswitch+0xc4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	4a05      	ldr	r2, [pc, #20]	; (8003938 <prvTraceStoreTaskswitch+0xc4>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	bf00      	nop
}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20001368 	.word	0x20001368
 800393c:	20001370 	.word	0x20001370
 8003940:	20009a78 	.word	0x20009a78
 8003944:	20001354 	.word	0x20001354

08003948 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
 8003952:	460b      	mov	r3, r1
 8003954:	71bb      	strb	r3, [r7, #6]
 8003956:	4613      	mov	r3, r2
 8003958:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <prvTraceSetPriorityProperty+0x48>)
 800395c:	681c      	ldr	r4, [r3, #0]
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	79bb      	ldrb	r3, [r7, #6]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f8c1 	bl	8003aec <uiIndexOfObject>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <prvTraceSetPriorityProperty+0x48>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	4413      	add	r3, r2
 8003976:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800397a:	440b      	add	r3, r1
 800397c:	3301      	adds	r3, #1
 800397e:	4423      	add	r3, r4
 8003980:	797a      	ldrb	r2, [r7, #5]
 8003982:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	bf00      	nop
 8003990:	20009a78 	.word	0x20009a78

08003994 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	460a      	mov	r2, r1
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	4613      	mov	r3, r2
 80039a2:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <prvTraceGetPriorityProperty+0x44>)
 80039a6:	681c      	ldr	r4, [r3, #0]
 80039a8:	79fa      	ldrb	r2, [r7, #7]
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f89c 	bl	8003aec <uiIndexOfObject>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <prvTraceGetPriorityProperty+0x44>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4413      	add	r3, r2
 80039c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039c4:	440b      	add	r3, r1
 80039c6:	3301      	adds	r3, #1
 80039c8:	4423      	add	r3, r4
 80039ca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20009a78 	.word	0x20009a78

080039dc <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
 80039e6:	460b      	mov	r3, r1
 80039e8:	71bb      	strb	r3, [r7, #6]
 80039ea:	4613      	mov	r3, r2
 80039ec:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <prvTraceSetObjectState+0x44>)
 80039f0:	681c      	ldr	r4, [r3, #0]
 80039f2:	79fa      	ldrb	r2, [r7, #7]
 80039f4:	79bb      	ldrb	r3, [r7, #6]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f877 	bl	8003aec <uiIndexOfObject>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4619      	mov	r1, r3
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <prvTraceSetObjectState+0x44>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a0e:	440b      	add	r3, r1
 8003a10:	4423      	add	r3, r4
 8003a12:	797a      	ldrb	r2, [r7, #5]
 8003a14:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	20009a78 	.word	0x20009a78

08003a24 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	460a      	mov	r2, r1
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <prvTraceGetObjectState+0x40>)
 8003a36:	681c      	ldr	r4, [r3, #0]
 8003a38:	79fa      	ldrb	r2, [r7, #7]
 8003a3a:	79bb      	ldrb	r3, [r7, #6]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f854 	bl	8003aec <uiIndexOfObject>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4619      	mov	r1, r3
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvTraceGetObjectState+0x40>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a54:	440b      	add	r3, r1
 8003a56:	4423      	add	r3, r4
 8003a58:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	20009a78 	.word	0x20009a78

08003a68 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvTraceSetTaskInstanceFinished+0x38>)
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2103      	movs	r1, #3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f836 	bl	8003aec <uiIndexOfObject>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <prvTraceSetTaskInstanceFinished+0x38>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4423      	add	r3, r4
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20009a78 	.word	0x20009a78

08003aa4 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e014      	b.n	8003ae0 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003ac0:	d304      	bcc.n	8003acc <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003ac2:	4809      	ldr	r0, [pc, #36]	; (8003ae8 <prvTraceNextFreeEventBufferSlot+0x44>)
 8003ac4:	f000 f9ca 	bl	8003e5c <prvTraceError>
		return 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e009      	b.n	8003ae0 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8003adc:	4413      	add	r3, r2
 8003ade:	3304      	adds	r3, #4
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20009a78 	.word	0x20009a78
 8003ae8:	0800ee74 	.word	0x0800ee74

08003aec <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	460a      	mov	r2, r1
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003afc:	79bb      	ldrb	r3, [r7, #6]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d823      	bhi.n	8003b4a <uiIndexOfObject+0x5e>
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <uiIndexOfObject+0x70>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	79bb      	ldrb	r3, [r7, #6]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d817      	bhi.n	8003b4a <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <uiIndexOfObject+0x70>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	79bb      	ldrb	r3, [r7, #6]
 8003b20:	3338      	adds	r3, #56	; 0x38
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <uiIndexOfObject+0x70>)
 8003b2a:	6819      	ldr	r1, [r3, #0]
 8003b2c:	79bb      	ldrb	r3, [r7, #6]
 8003b2e:	440b      	add	r3, r1
 8003b30:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003b34:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	fb11 f303 	smulbb	r3, r1, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	81fb      	strh	r3, [r7, #14]
		return index;
 8003b46:	89fb      	ldrh	r3, [r7, #14]
 8003b48:	e003      	b.n	8003b52 <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003b4a:	4805      	ldr	r0, [pc, #20]	; (8003b60 <uiIndexOfObject+0x74>)
 8003b4c:	f000 f986 	bl	8003e5c <prvTraceError>
	return 0;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20009a78 	.word	0x20009a78
 8003b60:	0800ee9c 	.word	0x0800ee9c

08003b64 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f383 8810 	msr	PRIMASK, r3
}
 8003b82:	bf00      	nop
 8003b84:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <prvTraceGetObjectHandle+0x124>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <prvTraceGetObjectHandle+0x124>)
 8003b8c:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <prvTraceGetObjectHandle+0x12c>)
 8003b9a:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <prvTraceGetObjectHandle+0x12c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d114      	bne.n	8003bd6 <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <prvTraceGetObjectHandle+0x12c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4935      	ldr	r1, [pc, #212]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <prvTraceGetObjectHandle+0x12c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003bc8:	3201      	adds	r2, #1
 8003bca:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003bce:	4413      	add	r3, r2
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <prvTraceGetObjectHandle+0x12c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003be2:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003be8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	4927      	ldr	r1, [pc, #156]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	440b      	add	r3, r1
 8003bf6:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d90a      	bls.n	8003c12 <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f948 	bl	8002e94 <pszTraceGetErrorNotEnoughHandles>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f928 	bl	8003e5c <prvTraceError>
		handle = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e029      	b.n	8003c66 <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003c1a:	3201      	adds	r2, #1
 8003c1c:	b291      	uxth	r1, r2
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c2c:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c32:	3308      	adds	r3, #8
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003c3a:	1acb      	subs	r3, r1, r3
 8003c3c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c42:	3318      	adds	r3, #24
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	88db      	ldrh	r3, [r3, #6]
 8003c4a:	461a      	mov	r2, r3
		if (hndCount >
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	dd09      	ble.n	8003c66 <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003c56:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8003c58:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <prvTraceGetObjectHandle+0x128>)
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	460a      	mov	r2, r1
 8003c64:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <prvTraceGetObjectHandle+0x124>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <prvTraceGetObjectHandle+0x124>)
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	bf00      	nop

	return handle;
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001368 	.word	0x20001368
 8003c8c:	20001380 	.word	0x20001380
 8003c90:	20009a80 	.word	0x20009a80

08003c94 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	71fb      	strb	r3, [r7, #7]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8003ca4:	79fa      	ldrb	r2, [r7, #7]
 8003ca6:	79bb      	ldrb	r3, [r7, #6]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff1e 	bl	8003aec <uiIndexOfObject>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <prvMarkObjectAsUsed+0x38>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	4413      	add	r3, r2
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20009a78 	.word	0x20009a78

08003cd0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e010      	b.n	8003d04 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	441a      	add	r2, r3
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	440b      	add	r3, r1
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3ea      	bcc.n	8003ce2 <prvStrncpy+0x12>
			break;
	}
}
 8003d0c:	e000      	b.n	8003d10 <prvStrncpy+0x40>
			break;
 8003d0e:	bf00      	nop
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	603a      	str	r2, [r7, #0]
 8003d26:	71fb      	strb	r3, [r7, #7]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <prvTraceSetObjectName+0x1a>
	{
		name = "";
 8003d32:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <prvTraceSetObjectName+0x9c>)
 8003d34:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d903      	bls.n	8003d44 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8003d3c:	481f      	ldr	r0, [pc, #124]	; (8003dbc <prvTraceSetObjectName+0xa0>)
 8003d3e:	f000 f88d 	bl	8003e5c <prvTraceError>
		return;
 8003d42:	e036      	b.n	8003db2 <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8003d4a:	481d      	ldr	r0, [pc, #116]	; (8003dc0 <prvTraceSetObjectName+0xa4>)
 8003d4c:	f000 f886 	bl	8003e5c <prvTraceError>
		return;
 8003d50:	e02f      	b.n	8003db2 <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <prvTraceSetObjectName+0xa8>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	79ba      	ldrb	r2, [r7, #6]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d908      	bls.n	8003d76 <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f894 	bl	8002e94 <pszTraceGetErrorNotEnoughHandles>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f874 	bl	8003e5c <prvTraceError>
 8003d74:	e01d      	b.n	8003db2 <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8003d76:	79fa      	ldrb	r2, [r7, #7]
 8003d78:	79bb      	ldrb	r3, [r7, #6]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff feb5 	bl	8003aec <uiIndexOfObject>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <prvTraceSetObjectName+0xac>)
 8003d88:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == 0)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <prvTraceSetObjectName+0xb0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <prvTraceSetObjectName+0xa8>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <prvTraceSetObjectName+0xac>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	3388      	adds	r3, #136	; 0x88
 8003d9c:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <prvTraceSetObjectName+0xa8>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	4413      	add	r3, r2
 8003da6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003daa:	461a      	mov	r2, r3
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	f7ff ff8f 	bl	8003cd0 <prvStrncpy>
		}
	}
}
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	0800ef0c 	.word	0x0800ef0c
 8003dbc:	0800ef10 	.word	0x0800ef10
 8003dc0:	0800ef40 	.word	0x0800ef40
 8003dc4:	20009a78 	.word	0x20009a78
 8003dc8:	20009a84 	.word	0x20009a84
 8003dcc:	20001410 	.word	0x20001410

08003dd0 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != 0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 8003de2:	f107 020b 	add.w	r2, r7, #11
 8003de6:	f107 030a 	add.w	r3, r7, #10
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 faeb 	bl	80043c8 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	613b      	str	r3, [r7, #16]
  return(result);
 8003df8:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	bf00      	nop
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <prvTraceOpenSymbol+0x88>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <prvTraceOpenSymbol+0x88>)
 8003e10:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8003e12:	7ab9      	ldrb	r1, [r7, #10]
 8003e14:	7afa      	ldrb	r2, [r7, #11]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f9c5 	bl	80041a8 <prvTraceLookupSymbolTableEntry>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	83fb      	strh	r3, [r7, #30]
	if (!result)
 8003e22:	8bfb      	ldrh	r3, [r7, #30]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <prvTraceOpenSymbol+0x68>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8003e28:	7ab9      	ldrb	r1, [r7, #10]
 8003e2a:	7afa      	ldrb	r2, [r7, #11]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa20 	bl	8004274 <prvTraceCreateSymbolTableEntry>
 8003e34:	4603      	mov	r3, r0
 8003e36:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <prvTraceOpenSymbol+0x88>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <prvTraceOpenSymbol+0x88>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	bf00      	nop

	return result;
 8003e4e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20001368 	.word	0x20001368

08003e5c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != 0)
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <prvTraceError+0x50>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <prvTraceError+0x14>
	{
		xTraceDisable();
 8003e6c:	f7ff f892 	bl	8002f94 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == 0)
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <prvTraceError+0x54>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d115      	bne.n	8003ea4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <prvTraceError+0x54>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != 0)
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <prvTraceError+0x50>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <prvTraceError+0x50>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <prvTraceError+0x54>)
 8003e90:	6811      	ldr	r1, [r2, #0]
 8003e92:	2250      	movs	r2, #80	; 0x50
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff1b 	bl	8003cd0 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <prvTraceError+0x50>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20009a78 	.word	0x20009a78
 8003eb0:	20001410 	.word	0x20001410

08003eb4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8003ec6:	e071      	b.n	8003fac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8003ec8:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003ee2:	2b98      	cmp	r3, #152	; 0x98
 8003ee4:	d929      	bls.n	8003f3a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003ef4:	2ba7      	cmp	r3, #167	; 0xa7
 8003ef6:	d820      	bhi.n	8003f3a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003f06:	3368      	adds	r3, #104	; 0x68
 8003f08:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	441a      	add	r2, r3
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d244      	bcs.n	8003fa4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8003f26:	4413      	add	r3, r2
 8003f28:	1d18      	adds	r0, r3, #4
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	461a      	mov	r2, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	f007 fa33 	bl	800b39e <memset>
		{
 8003f38:	e034      	b.n	8003fa4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d12c      	bne.n	8003fa6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20d      	bcs.n	8003f76 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f007 fa15 	bl	800b39e <memset>
 8003f74:	e017      	b.n	8003fa6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8003f7e:	2204      	movs	r2, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f007 fa0b 	bl	800b39e <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	2204      	movs	r2, #4
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 f9fe 	bl	800b39e <memset>
 8003fa2:	e000      	b.n	8003fa6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 8003fa4:	bf00      	nop
			}
		}
		i++;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d389      	bcc.n	8003ec8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20009a78 	.word	0x20009a78

08003fc4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01b      	beq.n	800400a <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	3201      	adds	r2, #1
 8003fda:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	3201      	adds	r2, #1
 8003fe4:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003ff0:	d307      	bcc.n	8004002 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <prvTraceUpdateCounters+0x4c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f7ff ff56 	bl	8003eb4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8004008:	e000      	b.n	800400c <prvTraceUpdateCounters+0x48>
		return;
 800400a:	bf00      	nop
#endif
}
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20009a78 	.word	0x20009a78

08004014 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 800402a:	4b58      	ldr	r3, [pc, #352]	; (800418c <prvTraceGetDTS+0x178>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d116      	bne.n	8004062 <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 8004034:	4b56      	ldr	r3, [pc, #344]	; (8004190 <prvTraceGetDTS+0x17c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800403c:	4b54      	ldr	r3, [pc, #336]	; (8004190 <prvTraceGetDTS+0x17c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b52      	ldr	r3, [pc, #328]	; (800418c <prvTraceGetDTS+0x178>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0892      	lsrs	r2, r2, #2
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
 8004048:	e00b      	b.n	8004062 <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 800404a:	4b52      	ldr	r3, [pc, #328]	; (8004194 <prvTraceGetDTS+0x180>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b52      	ldr	r3, [pc, #328]	; (8004198 <prvTraceGetDTS+0x184>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d005      	beq.n	8004062 <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004056:	4b51      	ldr	r3, [pc, #324]	; (800419c <prvTraceGetDTS+0x188>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b4c      	ldr	r3, [pc, #304]	; (800418c <prvTraceGetDTS+0x178>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	0892      	lsrs	r2, r2, #2
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa14 	bl	8004494 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4b4c      	ldr	r3, [pc, #304]	; (80041a0 <prvTraceGetDTS+0x18c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <prvTraceGetDTS+0x18c>)
 800407a:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <prvTraceGetDTS+0x178>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d043      	beq.n	800410e <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <prvTraceGetDTS+0x178>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d91d      	bls.n	80040ce <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <prvTraceGetDTS+0x178>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004098:	4b3c      	ldr	r3, [pc, #240]	; (800418c <prvTraceGetDTS+0x178>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <prvTraceGetDTS+0x178>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	440a      	add	r2, r1
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <prvTraceGetDTS+0x178>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80040b2:	4b36      	ldr	r3, [pc, #216]	; (800418c <prvTraceGetDTS+0x178>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80040be:	fb00 f202 	mul.w	r2, r0, r2
 80040c2:	1a9a      	subs	r2, r3, r2
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <prvTraceGetDTS+0x178>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	440a      	add	r2, r1
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
 80040cc:	e007      	b.n	80040de <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <prvTraceGetDTS+0x178>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80040d4:	4b2d      	ldr	r3, [pc, #180]	; (800418c <prvTraceGetDTS+0x178>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80040de:	4b2b      	ldr	r3, [pc, #172]	; (800418c <prvTraceGetDTS+0x178>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <prvTraceGetDTS+0x178>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d313      	bcc.n	8004116 <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <prvTraceGetDTS+0x178>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	3201      	adds	r2, #1
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80040f8:	4b24      	ldr	r3, [pc, #144]	; (800418c <prvTraceGetDTS+0x178>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <prvTraceGetDTS+0x178>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <prvTraceGetDTS+0x178>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1a8a      	subs	r2, r1, r2
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
 800410c:	e003      	b.n	8004116 <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <prvTraceGetDTS+0x178>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d92c      	bls.n	8004178 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800411e:	f7ff fcc1 	bl	8003aa4 <prvTraceNextFreeEventBufferSlot>
 8004122:	6178      	str	r0, [r7, #20]

		if (xts != 0)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d026      	beq.n	8004178 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004130:	4293      	cmp	r3, r2
 8004132:	d10b      	bne.n	800414c <prvTraceGetDTS+0x138>
			{
				xts->type = XTS16;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	22a9      	movs	r2, #169	; 0xa9
 8004138:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b29a      	uxth	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2200      	movs	r2, #0
 8004148:	705a      	strb	r2, [r3, #1]
 800414a:	e013      	b.n	8004174 <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	2bff      	cmp	r3, #255	; 0xff
 8004150:	d10d      	bne.n	800416e <prvTraceGetDTS+0x15a>
			{
				xts->type = XTS8;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	22a8      	movs	r2, #168	; 0xa8
 8004156:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29a      	uxth	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	b2da      	uxtb	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	705a      	strb	r2, [r3, #1]
 800416c:	e002      	b.n	8004174 <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800416e:	480d      	ldr	r0, [pc, #52]	; (80041a4 <prvTraceGetDTS+0x190>)
 8004170:	f7ff fe74 	bl	8003e5c <prvTraceError>
			}
			prvTraceUpdateCounters();
 8004174:	f7ff ff26 	bl	8003fc4 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	b29a      	uxth	r2, r3
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20009a78 	.word	0x20009a78
 8004190:	2000136c 	.word	0x2000136c
 8004194:	e0001004 	.word	0xe0001004
 8004198:	20001378 	.word	0x20001378
 800419c:	20000000 	.word	0x20000000
 80041a0:	20009a88 	.word	0x20009a88
 80041a4:	0800ef70 	.word	0x0800ef70

080041a8 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	72fb      	strb	r3, [r7, #11]
 80041b6:	4613      	mov	r3, r2
 80041b8:	72bb      	strb	r3, [r7, #10]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	889b      	ldrh	r3, [r3, #4]
 80041ca:	82fb      	strh	r3, [r7, #22]

	TRACE_ASSERT(name != 0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 80041cc:	e045      	b.n	800425a <prvTraceLookupSymbolTableEntry+0xb2>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	8afb      	ldrh	r3, [r7, #22]
 80041d4:	3302      	adds	r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d126      	bne.n	8004234 <prvTraceLookupSymbolTableEntry+0x8c>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	3303      	adds	r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d11a      	bne.n	8004234 <prvTraceLookupSymbolTableEntry+0x8c>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	1d19      	adds	r1, r3, #4
 8004206:	7abb      	ldrb	r3, [r7, #10]
 8004208:	440b      	add	r3, r1
 800420a:	4413      	add	r3, r2
 800420c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10f      	bne.n	8004234 <prvTraceLookupSymbolTableEntry+0x8c>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	8afb      	ldrh	r3, [r7, #22]
 800421a:	3304      	adds	r3, #4
 800421c:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8004220:	4413      	add	r3, r2
 8004222:	3304      	adds	r3, #4
 8004224:	7aba      	ldrb	r2, [r7, #10]
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	4618      	mov	r0, r3
 800422a:	f007 fe9c 	bl	800bf66 <strncmp>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <prvTraceLookupSymbolTableEntry+0xba>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	8afb      	ldrh	r3, [r7, #22]
 800423a:	4413      	add	r3, r2
 800423c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8004240:	b29a      	uxth	r2, r3
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <prvTraceLookupSymbolTableEntry+0xc8>)
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	3301      	adds	r3, #1
 800424a:	440b      	add	r3, r1
 800424c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8004250:	b29b      	uxth	r3, r3
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	4413      	add	r3, r2
 8004258:	82fb      	strh	r3, [r7, #22]
	while (i != 0)
 800425a:	8afb      	ldrh	r3, [r7, #22]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1b6      	bne.n	80041ce <prvTraceLookupSymbolTableEntry+0x26>
 8004260:	e000      	b.n	8004264 <prvTraceLookupSymbolTableEntry+0xbc>
						break; /* found */
 8004262:	bf00      	nop
	}
	return i;
 8004264:	8afb      	ldrh	r3, [r7, #22]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20009a78 	.word	0x20009a78

08004274 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	72fb      	strb	r3, [r7, #11]
 8004282:	4613      	mov	r3, r2
 8004284:	72bb      	strb	r3, [r7, #10]
	TraceStringHandle_t ret = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != 0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800428a:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8004292:	7abb      	ldrb	r3, [r7, #10]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800429c:	d305      	bcc.n	80042aa <prvTraceCreateSymbolTableEntry+0x36>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 800429e:	4849      	ldr	r0, [pc, #292]	; (80043c4 <prvTraceCreateSymbolTableEntry+0x150>)
 80042a0:	f7ff fddc 	bl	8003e5c <prvTraceError>
		ret = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e085      	b.n	80043b6 <prvTraceCreateSymbolTableEntry+0x142>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	7afb      	ldrb	r3, [r7, #11]
 80042b0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4413      	add	r3, r2
 80042b8:	8899      	ldrh	r1, [r3, #4]
		RecorderDataPtr->SymbolTable.symbytes
 80042ba:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80042be:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80042c6:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80042c8:	4413      	add	r3, r2
 80042ca:	460a      	mov	r2, r1
 80042cc:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	889b      	ldrh	r3, [r3, #4]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 80042e4:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80042f0:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80042f2:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80042f4:	4413      	add	r3, r2
 80042f6:	460a      	mov	r2, r1
 80042f8:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8004308:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800430e:	4413      	add	r3, r2
 8004310:	460a      	mov	r2, r1
 8004312:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0a19      	lsrs	r1, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 800431c:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8004326:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 8004328:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 800432a:	4413      	add	r3, r2
 800432c:	460a      	mov	r2, r1
 800432e:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004334:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800433e:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004340:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	7aba      	ldrb	r2, [r7, #10]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fcbf 	bl	8003cd0 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004354:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
 800435e:	7abb      	ldrb	r3, [r7, #10]
 8004360:	440b      	add	r3, r1
 8004362:	3304      	adds	r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004376:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	b289      	uxth	r1, r1
 800437c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	460a      	mov	r2, r1
 8004386:	809a      	strh	r2, [r3, #4]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8004390:	7abb      	ldrb	r3, [r7, #10]
 8004392:	441a      	add	r2, r3
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3205      	adds	r2, #5
 800439a:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <prvTraceCreateSymbolTableEntry+0x14c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	7abb      	ldrb	r3, [r7, #10]
 80043aa:	3305      	adds	r3, #5
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	617b      	str	r3, [r7, #20]
	}

	return ret;
 80043b6:	697b      	ldr	r3, [r7, #20]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20009a78 	.word	0x20009a78
 80043c4:	0800ef94 	.word	0x0800ef94

080043c8 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 80043d4:	2301      	movs	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != 0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != 0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != 0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00f      	beq.n	8004402 <prvTraceGetChecksum+0x3a>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 80043e2:	e006      	b.n	80043f2 <prvTraceGetChecksum+0x2a>
		{
			crc += c;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
			length++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	75fb      	strb	r3, [r7, #23]
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	701a      	strb	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM()
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <xTraceHardwarePortInitCortexM+0x54>)
 800442a:	4a14      	ldr	r2, [pc, #80]	; (800447c <xTraceHardwarePortInitCortexM+0x58>)
 800442c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <xTraceHardwarePortInitCortexM+0x5c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <xTraceHardwarePortInitCortexM+0x5c>)
 8004434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004438:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <xTraceHardwarePortInitCortexM+0x5c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8004442:	4810      	ldr	r0, [pc, #64]	; (8004484 <xTraceHardwarePortInitCortexM+0x60>)
 8004444:	f7ff fd0a 	bl	8003e5c <prvTraceError>
			break;
 8004448:	e013      	b.n	8004472 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <xTraceHardwarePortInitCortexM+0x64>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8004456:	480d      	ldr	r0, [pc, #52]	; (800448c <xTraceHardwarePortInitCortexM+0x68>)
 8004458:	f7ff fd00 	bl	8003e5c <prvTraceError>
			break;
 800445c:	e009      	b.n	8004472 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <xTraceHardwarePortInitCortexM+0x6c>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <xTraceHardwarePortInitCortexM+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a07      	ldr	r2, [pc, #28]	; (8004488 <xTraceHardwarePortInitCortexM+0x64>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e0001fb0 	.word	0xe0001fb0
 800447c:	c5acce55 	.word	0xc5acce55
 8004480:	e000edfc 	.word	0xe000edfc
 8004484:	0800efdc 	.word	0x0800efdc
 8004488:	e0001000 	.word	0xe0001000
 800448c:	0800f008 	.word	0x0800f008
 8004490:	e0001004 	.word	0xe0001004

08004494 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <prvTracePortGetTimeStamp+0x80>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d028      	beq.n	8004508 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <prvTracePortGetTimeStamp+0x84>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
		return;
 80044be:	e023      	b.n	8004508 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 80044c0:	4b16      	ldr	r3, [pc, #88]	; (800451c <prvTracePortGetTimeStamp+0x88>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <prvTracePortGetTimeStamp+0x8c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	1ad2      	subs	r2, r2, r3
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <prvTracePortGetTimeStamp+0x90>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <prvTracePortGetTimeStamp+0x90>)
 80044e4:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <prvTracePortGetTimeStamp+0x84>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <prvTracePortGetTimeStamp+0x84>)
 80044f0:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <prvTracePortGetTimeStamp+0x84>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8004500:	4a07      	ldr	r2, [pc, #28]	; (8004520 <prvTracePortGetTimeStamp+0x8c>)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e000      	b.n	800450a <prvTracePortGetTimeStamp+0x76>
		return;
 8004508:	bf00      	nop
}
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	2000135c 	.word	0x2000135c
 8004518:	20001360 	.word	0x20001360
 800451c:	e0001004 	.word	0xe0001004
 8004520:	20009a8c 	.word	0x20009a8c
 8004524:	20009a90 	.word	0x20009a90

08004528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <HAL_Init+0x40>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <HAL_Init+0x40>)
 8004532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_Init+0x40>)
 800453e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_Init+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_Init+0x40>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004550:	2003      	movs	r0, #3
 8004552:	f000 fcda 	bl	8004f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004556:	200f      	movs	r0, #15
 8004558:	f7fd ffac 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800455c:	f7fd fe40 	bl	80021e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023c00 	.word	0x40023c00

0800456c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_IncTick+0x20>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_IncTick+0x24>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4413      	add	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_IncTick+0x24>)
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000014 	.word	0x20000014
 8004590:	20009a94 	.word	0x20009a94

08004594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return uwTick;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_GetTick+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20009a94 	.word	0x20009a94

080045ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b4:	f7ff ffee 	bl	8004594 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d005      	beq.n	80045d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_Delay+0x44>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045d2:	bf00      	nop
 80045d4:	f7ff ffde 	bl	8004594 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d8f7      	bhi.n	80045d4 <HAL_Delay+0x28>
  {
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000014 	.word	0x20000014

080045f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e033      	b.n	8004672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd fe10 	bl	8002238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800463a:	f023 0302 	bic.w	r3, r3, #2
 800463e:	f043 0202 	orr.w	r2, r3, #2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa34 	bl	8004ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	f043 0201 	orr.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
 8004662:	e001      	b.n	8004668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_ADC_Start_DMA+0x1e>
 8004696:	2302      	movs	r3, #2
 8004698:	e0ce      	b.n	8004838 <HAL_ADC_Start_DMA+0x1bc>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d018      	beq.n	80046e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046c0:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <HAL_ADC_Start_DMA+0x1c4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5f      	ldr	r2, [pc, #380]	; (8004844 <HAL_ADC_Start_DMA+0x1c8>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9a      	lsrs	r2, r3, #18
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046d4:	e002      	b.n	80046dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3b01      	subs	r3, #1
 80046da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f9      	bne.n	80046d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	d107      	bne.n	8004702 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004700:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	f040 8086 	bne.w	800481e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800473c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	d106      	bne.n	8004760 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f023 0206 	bic.w	r2, r3, #6
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
 800475e:	e002      	b.n	8004766 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <HAL_ADC_Start_DMA+0x1cc>)
 8004770:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <HAL_ADC_Start_DMA+0x1d0>)
 8004778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	4a34      	ldr	r2, [pc, #208]	; (8004850 <HAL_ADC_Start_DMA+0x1d4>)
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	4a33      	ldr	r2, [pc, #204]	; (8004854 <HAL_ADC_Start_DMA+0x1d8>)
 8004788:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004792:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	334c      	adds	r3, #76	; 0x4c
 80047be:	4619      	mov	r1, r3
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f000 fc84 	bl	80050d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10f      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d129      	bne.n	8004836 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e020      	b.n	8004836 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_ADC_Start_DMA+0x1dc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d11b      	bne.n	8004836 <HAL_ADC_Start_DMA+0x1ba>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d114      	bne.n	8004836 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e00b      	b.n	8004836 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f043 0210 	orr.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000000 	.word	0x20000000
 8004844:	431bde83 	.word	0x431bde83
 8004848:	40012300 	.word	0x40012300
 800484c:	08004cad 	.word	0x08004cad
 8004850:	08004d67 	.word	0x08004d67
 8004854:	08004d83 	.word	0x08004d83
 8004858:	40012000 	.word	0x40012000

0800485c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e105      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x228>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b09      	cmp	r3, #9
 800489a:	d925      	bls.n	80048e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d9      	ldr	r1, [r3, #12]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	3b1e      	subs	r3, #30
 80048b2:	2207      	movs	r2, #7
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43da      	mvns	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	400a      	ands	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68d9      	ldr	r1, [r3, #12]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4403      	add	r3, r0
 80048da:	3b1e      	subs	r3, #30
 80048dc:	409a      	lsls	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e022      	b.n	800492e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	2207      	movs	r2, #7
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	400a      	ands	r2, r1
 800490a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6919      	ldr	r1, [r3, #16]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	4603      	mov	r3, r0
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4403      	add	r3, r0
 8004924:	409a      	lsls	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d824      	bhi.n	8004980 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	3b05      	subs	r3, #5
 8004948:	221f      	movs	r2, #31
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	400a      	ands	r2, r1
 8004956:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4618      	mov	r0, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	3b05      	subs	r3, #5
 8004972:	fa00 f203 	lsl.w	r2, r0, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
 800497e:	e04c      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d824      	bhi.n	80049d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	3b23      	subs	r3, #35	; 0x23
 800499a:	221f      	movs	r2, #31
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43da      	mvns	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	400a      	ands	r2, r1
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4618      	mov	r0, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	3b23      	subs	r3, #35	; 0x23
 80049c4:	fa00 f203 	lsl.w	r2, r0, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
 80049d0:	e023      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	3b41      	subs	r3, #65	; 0x41
 80049e4:	221f      	movs	r2, #31
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	400a      	ands	r2, r1
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4618      	mov	r0, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3b41      	subs	r3, #65	; 0x41
 8004a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_ADC_ConfigChannel+0x234>)
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_ADC_ConfigChannel+0x238>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1cc>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b12      	cmp	r3, #18
 8004a2e:	d105      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_ADC_ConfigChannel+0x238>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d123      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d003      	beq.n	8004a56 <HAL_ADC_ConfigChannel+0x1e6>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b11      	cmp	r3, #17
 8004a54:	d11b      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d111      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_ADC_ConfigChannel+0x23c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <HAL_ADC_ConfigChannel+0x240>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	0c9a      	lsrs	r2, r3, #18
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f9      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012300 	.word	0x40012300
 8004aa8:	40012000 	.word	0x40012000
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	431bde83 	.word	0x431bde83

08004ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004abc:	4b79      	ldr	r3, [pc, #484]	; (8004ca4 <ADC_Init+0x1f0>)
 8004abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	021a      	lsls	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <ADC_Init+0x1f4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	e00f      	b.n	8004bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0202 	bic.w	r2, r2, #2
 8004bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7e1b      	ldrb	r3, [r3, #24]
 8004bcc:	005a      	lsls	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	035a      	lsls	r2, r3, #13
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e007      	b.n	8004c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	051a      	lsls	r2, r3, #20
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c6a:	025a      	lsls	r2, r3, #9
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	029a      	lsls	r2, r3, #10
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40012300 	.word	0x40012300
 8004ca8:	0f000001 	.word	0x0f000001

08004cac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13c      	bne.n	8004d40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d12b      	bne.n	8004d38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d127      	bne.n	8004d38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d119      	bne.n	8004d38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0220 	bic.w	r2, r2, #32
 8004d12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7fd f835 	bl	8001da8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d3e:	e00e      	b.n	8004d5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fd85 	bl	800485c <HAL_ADC_ErrorCallback>
}
 8004d52:	e004      	b.n	8004d5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7fc fffd 	bl	8001d74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2240      	movs	r2, #64	; 0x40
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fd5a 	bl	800485c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004de2:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <__NVIC_SetPriorityGrouping+0x44>)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	60d3      	str	r3, [r2, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <__NVIC_GetPriorityGrouping+0x18>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	f003 0307 	and.w	r3, r3, #7
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000ed00 	.word	0xe000ed00

08004e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	db0b      	blt.n	8004e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	f003 021f 	and.w	r2, r3, #31
 8004e2c:	4907      	ldr	r1, [pc, #28]	; (8004e4c <__NVIC_EnableIRQ+0x38>)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2001      	movs	r0, #1
 8004e36:	fa00 f202 	lsl.w	r2, r0, r2
 8004e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000e100 	.word	0xe000e100

08004e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	6039      	str	r1, [r7, #0]
 8004e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	db0a      	blt.n	8004e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <__NVIC_SetPriority+0x4c>)
 8004e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6e:	0112      	lsls	r2, r2, #4
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	440b      	add	r3, r1
 8004e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e78:	e00a      	b.n	8004e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4908      	ldr	r1, [pc, #32]	; (8004ea0 <__NVIC_SetPriority+0x50>)
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	3b04      	subs	r3, #4
 8004e88:	0112      	lsls	r2, r2, #4
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	761a      	strb	r2, [r3, #24]
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	e000e100 	.word	0xe000e100
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b089      	sub	sp, #36	; 0x24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f1c3 0307 	rsb	r3, r3, #7
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	bf28      	it	cs
 8004ec2:	2304      	movcs	r3, #4
 8004ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d902      	bls.n	8004ed4 <NVIC_EncodePriority+0x30>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3b03      	subs	r3, #3
 8004ed2:	e000      	b.n	8004ed6 <NVIC_EncodePriority+0x32>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eec:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	43d9      	mvns	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004efc:	4313      	orrs	r3, r2
         );
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3724      	adds	r7, #36	; 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff4c 	bl	8004db0 <__NVIC_SetPriorityGrouping>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f32:	f7ff ff61 	bl	8004df8 <__NVIC_GetPriorityGrouping>
 8004f36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	6978      	ldr	r0, [r7, #20]
 8004f3e:	f7ff ffb1 	bl	8004ea4 <NVIC_EncodePriority>
 8004f42:	4602      	mov	r2, r0
 8004f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff80 	bl	8004e50 <__NVIC_SetPriority>
}
 8004f50:	bf00      	nop
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff54 	bl	8004e14 <__NVIC_EnableIRQ>
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f80:	f7ff fb08 	bl	8004594 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e099      	b.n	80050c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb0:	e00f      	b.n	8004fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb2:	f7ff faef 	bl	8004594 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d908      	bls.n	8004fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e078      	b.n	80050c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e8      	bne.n	8004fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_DMA_Init+0x158>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b04      	cmp	r3, #4
 800502a:	d107      	bne.n	800503c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4313      	orrs	r3, r2
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b04      	cmp	r3, #4
 8005064:	d117      	bne.n	8005096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa6f 	bl	800555c <DMA_CheckFifoParam>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005092:	2301      	movs	r3, #1
 8005094:	e016      	b.n	80050c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa26 	bl	80054f0 <DMA_CalcBaseAndBitshift>
 80050a4:	4603      	mov	r3, r0
 80050a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	223f      	movs	r2, #63	; 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	f010803f 	.word	0xf010803f

080050d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Start_IT+0x26>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e040      	b.n	8005178 <HAL_DMA_Start_IT+0xa8>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d12f      	bne.n	800516a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f9b8 	bl	8005494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	223f      	movs	r2, #63	; 0x3f
 800512a:	409a      	lsls	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0216 	orr.w	r2, r2, #22
 800513e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e005      	b.n	8005176 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800518c:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <HAL_DMA_IRQHandler+0x248>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a8e      	ldr	r2, [pc, #568]	; (80053cc <HAL_DMA_IRQHandler+0x24c>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	2208      	movs	r2, #8
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01a      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d013      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	2208      	movs	r2, #8
 80051da:	409a      	lsls	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f043 0201 	orr.w	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	2204      	movs	r2, #4
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d012      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	2204      	movs	r2, #4
 8005246:	409a      	lsls	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	2210      	movs	r2, #16
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d043      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	2210      	movs	r2, #16
 800527c:	409a      	lsls	r2, r3
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e01f      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
 80052c0:	e016      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0208 	bic.w	r2, r2, #8
 80052de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	2220      	movs	r2, #32
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 808f 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8087 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	2220      	movs	r2, #32
 8005318:	409a      	lsls	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d136      	bne.n	8005398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0216 	bic.w	r2, r2, #22
 8005338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_DMA_IRQHandler+0x1da>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0208 	bic.w	r2, r2, #8
 8005368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	223f      	movs	r2, #63	; 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d07e      	beq.n	800548c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
        }
        return;
 8005396:	e079      	b.n	800548c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	e02c      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000
 80053cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	e01e      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0210 	bic.w	r2, r2, #16
 80053fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d032      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2205      	movs	r2, #5
 8005438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	429a      	cmp	r2, r3
 8005456:	d307      	bcc.n	8005468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f2      	bne.n	800544c <HAL_DMA_IRQHandler+0x2cc>
 8005466:	e000      	b.n	800546a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e000      	b.n	800548e <HAL_DMA_IRQHandler+0x30e>
        return;
 800548c:	bf00      	nop
    }
  }
}
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d108      	bne.n	80054d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054d2:	e007      	b.n	80054e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	3b10      	subs	r3, #16
 8005500:	4a14      	ldr	r2, [pc, #80]	; (8005554 <DMA_CalcBaseAndBitshift+0x64>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <DMA_CalcBaseAndBitshift+0x68>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d909      	bls.n	8005532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	659a      	str	r2, [r3, #88]	; 0x58
 8005530:	e007      	b.n	8005542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	aaaaaaab 	.word	0xaaaaaaab
 8005558:	0800f054 	.word	0x0800f054

0800555c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11f      	bne.n	80055b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d856      	bhi.n	800562a <DMA_CheckFifoParam+0xce>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <DMA_CheckFifoParam+0x28>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a7 	.word	0x080055a7
 800558c:	08005595 	.word	0x08005595
 8005590:	0800562b 	.word	0x0800562b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d046      	beq.n	800562e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a4:	e043      	b.n	800562e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ae:	d140      	bne.n	8005632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b4:	e03d      	b.n	8005632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d121      	bne.n	8005604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d837      	bhi.n	8005636 <DMA_CheckFifoParam+0xda>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <DMA_CheckFifoParam+0x70>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055e3 	.word	0x080055e3
 80055d4:	080055dd 	.word	0x080055dd
 80055d8:	080055f5 	.word	0x080055f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e030      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d025      	beq.n	800563a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f2:	e022      	b.n	800563a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055fc:	d11f      	bne.n	800563e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005602:	e01c      	b.n	800563e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d903      	bls.n	8005612 <DMA_CheckFifoParam+0xb6>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d003      	beq.n	8005618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005610:	e018      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
      break;
 8005616:	e015      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e00b      	b.n	8005642 <DMA_CheckFifoParam+0xe6>
      break;
 800562a:	bf00      	nop
 800562c:	e00a      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 800562e:	bf00      	nop
 8005630:	e008      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005632:	bf00      	nop
 8005634:	e006      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005636:	bf00      	nop
 8005638:	e004      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;   
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005642:	bf00      	nop
    }
  } 
  
  return status; 
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e159      	b.n	8005924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005670:	2201      	movs	r2, #1
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	f040 8148 	bne.w	800591e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d005      	beq.n	80056a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d130      	bne.n	8005708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	2203      	movs	r2, #3
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056dc:	2201      	movs	r2, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 0201 	and.w	r2, r3, #1
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b03      	cmp	r3, #3
 8005712:	d017      	beq.n	8005744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4313      	orrs	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d123      	bne.n	8005798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	08da      	lsrs	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3208      	adds	r2, #8
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	220f      	movs	r2, #15
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	08da      	lsrs	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	69b9      	ldr	r1, [r7, #24]
 8005794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2203      	movs	r2, #3
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0203 	and.w	r2, r3, #3
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a2 	beq.w	800591e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4b57      	ldr	r3, [pc, #348]	; (800593c <HAL_GPIO_Init+0x2e8>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	4a56      	ldr	r2, [pc, #344]	; (800593c <HAL_GPIO_Init+0x2e8>)
 80057e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057e8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ea:	4b54      	ldr	r3, [pc, #336]	; (800593c <HAL_GPIO_Init+0x2e8>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057f6:	4a52      	ldr	r2, [pc, #328]	; (8005940 <HAL_GPIO_Init+0x2ec>)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	3302      	adds	r3, #2
 80057fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	220f      	movs	r2, #15
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a49      	ldr	r2, [pc, #292]	; (8005944 <HAL_GPIO_Init+0x2f0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d019      	beq.n	8005856 <HAL_GPIO_Init+0x202>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a48      	ldr	r2, [pc, #288]	; (8005948 <HAL_GPIO_Init+0x2f4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_GPIO_Init+0x1fe>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a47      	ldr	r2, [pc, #284]	; (800594c <HAL_GPIO_Init+0x2f8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00d      	beq.n	800584e <HAL_GPIO_Init+0x1fa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a46      	ldr	r2, [pc, #280]	; (8005950 <HAL_GPIO_Init+0x2fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <HAL_GPIO_Init+0x1f6>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a45      	ldr	r2, [pc, #276]	; (8005954 <HAL_GPIO_Init+0x300>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_GPIO_Init+0x1f2>
 8005842:	2304      	movs	r3, #4
 8005844:	e008      	b.n	8005858 <HAL_GPIO_Init+0x204>
 8005846:	2307      	movs	r3, #7
 8005848:	e006      	b.n	8005858 <HAL_GPIO_Init+0x204>
 800584a:	2303      	movs	r3, #3
 800584c:	e004      	b.n	8005858 <HAL_GPIO_Init+0x204>
 800584e:	2302      	movs	r3, #2
 8005850:	e002      	b.n	8005858 <HAL_GPIO_Init+0x204>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_GPIO_Init+0x204>
 8005856:	2300      	movs	r3, #0
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	f002 0203 	and.w	r2, r2, #3
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	4093      	lsls	r3, r2
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005868:	4935      	ldr	r1, [pc, #212]	; (8005940 <HAL_GPIO_Init+0x2ec>)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005876:	4b38      	ldr	r3, [pc, #224]	; (8005958 <HAL_GPIO_Init+0x304>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800589a:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <HAL_GPIO_Init+0x304>)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058a0:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <HAL_GPIO_Init+0x304>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <HAL_GPIO_Init+0x304>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <HAL_GPIO_Init+0x304>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_GPIO_Init+0x304>)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_GPIO_Init+0x304>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005918:	4a0f      	ldr	r2, [pc, #60]	; (8005958 <HAL_GPIO_Init+0x304>)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	f67f aea2 	bls.w	8005670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	40013800 	.word	0x40013800
 8005944:	40020000 	.word	0x40020000
 8005948:	40020400 	.word	0x40020400
 800594c:	40020800 	.word	0x40020800
 8005950:	40020c00 	.word	0x40020c00
 8005954:	40021000 	.word	0x40021000
 8005958:	40013c00 	.word	0x40013c00

0800595c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
 8005968:	4613      	mov	r3, r2
 800596a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800596c:	787b      	ldrb	r3, [r7, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005978:	e003      	b.n	8005982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	041a      	lsls	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4013      	ands	r3, r2
 80059a6:	041a      	lsls	r2, r3, #16
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43d9      	mvns	r1, r3
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	400b      	ands	r3, r1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d006      	beq.n	80059e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fb fdfc 	bl	80015e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40013c00 	.word	0x40013c00

080059f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e12b      	b.n	8005c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fc fc84 	bl	8002328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a58:	f001 f888 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8005a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4a81      	ldr	r2, [pc, #516]	; (8005c68 <HAL_I2C_Init+0x274>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d807      	bhi.n	8005a78 <HAL_I2C_Init+0x84>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a80      	ldr	r2, [pc, #512]	; (8005c6c <HAL_I2C_Init+0x278>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bf94      	ite	ls
 8005a70:	2301      	movls	r3, #1
 8005a72:	2300      	movhi	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e006      	b.n	8005a86 <HAL_I2C_Init+0x92>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a7d      	ldr	r2, [pc, #500]	; (8005c70 <HAL_I2C_Init+0x27c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bf94      	ite	ls
 8005a80:	2301      	movls	r3, #1
 8005a82:	2300      	movhi	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e0e7      	b.n	8005c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a78      	ldr	r2, [pc, #480]	; (8005c74 <HAL_I2C_Init+0x280>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	0c9b      	lsrs	r3, r3, #18
 8005a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a6a      	ldr	r2, [pc, #424]	; (8005c68 <HAL_I2C_Init+0x274>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d802      	bhi.n	8005ac8 <HAL_I2C_Init+0xd4>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	e009      	b.n	8005adc <HAL_I2C_Init+0xe8>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	4a69      	ldr	r2, [pc, #420]	; (8005c78 <HAL_I2C_Init+0x284>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	099b      	lsrs	r3, r3, #6
 8005ada:	3301      	adds	r3, #1
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	495c      	ldr	r1, [pc, #368]	; (8005c68 <HAL_I2C_Init+0x274>)
 8005af8:	428b      	cmp	r3, r1
 8005afa:	d819      	bhi.n	8005b30 <HAL_I2C_Init+0x13c>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1e59      	subs	r1, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b0a:	1c59      	adds	r1, r3, #1
 8005b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b10:	400b      	ands	r3, r1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_I2C_Init+0x138>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1e59      	subs	r1, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b24:	3301      	adds	r3, #1
 8005b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2a:	e051      	b.n	8005bd0 <HAL_I2C_Init+0x1dc>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	e04f      	b.n	8005bd0 <HAL_I2C_Init+0x1dc>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d111      	bne.n	8005b5c <HAL_I2C_Init+0x168>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	1e58      	subs	r0, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6859      	ldr	r1, [r3, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	440b      	add	r3, r1
 8005b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e012      	b.n	8005b82 <HAL_I2C_Init+0x18e>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1e58      	subs	r0, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	0099      	lsls	r1, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b72:	3301      	adds	r3, #1
 8005b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2301      	moveq	r3, #1
 8005b7e:	2300      	movne	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Init+0x196>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e022      	b.n	8005bd0 <HAL_I2C_Init+0x1dc>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10e      	bne.n	8005bb0 <HAL_I2C_Init+0x1bc>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1e58      	subs	r0, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	440b      	add	r3, r1
 8005ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bae:	e00f      	b.n	8005bd0 <HAL_I2C_Init+0x1dc>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1e58      	subs	r0, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6859      	ldr	r1, [r3, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	0099      	lsls	r1, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	6809      	ldr	r1, [r1, #0]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6911      	ldr	r1, [r2, #16]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68d2      	ldr	r2, [r2, #12]
 8005c0a:	4311      	orrs	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	000186a0 	.word	0x000186a0
 8005c6c:	001e847f 	.word	0x001e847f
 8005c70:	003d08ff 	.word	0x003d08ff
 8005c74:	431bde83 	.word	0x431bde83
 8005c78:	10624dd3 	.word	0x10624dd3

08005c7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	461a      	mov	r2, r3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	817b      	strh	r3, [r7, #10]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c90:	f7fe fc80 	bl	8004594 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	f040 80e0 	bne.w	8005e64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2319      	movs	r3, #25
 8005caa:	2201      	movs	r2, #1
 8005cac:	4970      	ldr	r1, [pc, #448]	; (8005e70 <HAL_I2C_Master_Transmit+0x1f4>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f964 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0d3      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_I2C_Master_Transmit+0x50>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e0cc      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d007      	beq.n	8005cf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2221      	movs	r2, #33	; 0x21
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	893a      	ldrh	r2, [r7, #8]
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a50      	ldr	r2, [pc, #320]	; (8005e74 <HAL_I2C_Master_Transmit+0x1f8>)
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d34:	8979      	ldrh	r1, [r7, #10]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f89c 	bl	8005e78 <I2C_MasterRequestWrite>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e08d      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d60:	e066      	b.n	8005e30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	6a39      	ldr	r1, [r7, #32]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9de 	bl	8006128 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d107      	bne.n	8005d8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e06b      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d11b      	bne.n	8005e04 <HAL_I2C_Master_Transmit+0x188>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d017      	beq.n	8005e04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	6a39      	ldr	r1, [r7, #32]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f9ce 	bl	80061aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00d      	beq.n	8005e30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d107      	bne.n	8005e2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01a      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d194      	bne.n	8005d62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	00100002 	.word	0x00100002
 8005e74:	ffff0000 	.word	0xffff0000

08005e78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	460b      	mov	r3, r1
 8005e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d006      	beq.n	8005ea2 <I2C_MasterRequestWrite+0x2a>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d003      	beq.n	8005ea2 <I2C_MasterRequestWrite+0x2a>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ea0:	d108      	bne.n	8005eb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e00b      	b.n	8005ecc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	2b12      	cmp	r3, #18
 8005eba:	d107      	bne.n	8005ecc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f84f 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d103      	bne.n	8005efc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e035      	b.n	8005f6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f08:	d108      	bne.n	8005f1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	e01b      	b.n	8005f54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f1c:	897b      	ldrh	r3, [r7, #10]
 8005f1e:	11db      	asrs	r3, r3, #7
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0306 	and.w	r3, r3, #6
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f063 030f 	orn	r3, r3, #15
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	490e      	ldr	r1, [pc, #56]	; (8005f74 <I2C_MasterRequestWrite+0xfc>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f875 	bl	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e010      	b.n	8005f6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f4a:	897b      	ldrh	r3, [r7, #10]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4907      	ldr	r1, [pc, #28]	; (8005f78 <I2C_MasterRequestWrite+0x100>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f865 	bl	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	00010008 	.word	0x00010008
 8005f78:	00010002 	.word	0x00010002

08005f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f8c:	e025      	b.n	8005fda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d021      	beq.n	8005fda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fe fafd 	bl	8004594 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d116      	bne.n	8005fda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e023      	b.n	8006022 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d10d      	bne.n	8006000 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	43da      	mvns	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf0c      	ite	eq
 8005ff6:	2301      	moveq	r3, #1
 8005ff8:	2300      	movne	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	e00c      	b.n	800601a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	43da      	mvns	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4013      	ands	r3, r2
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	bf0c      	ite	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	2300      	movne	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	429a      	cmp	r2, r3
 800601e:	d0b6      	beq.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006038:	e051      	b.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006048:	d123      	bne.n	8006092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006058:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006062:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f043 0204 	orr.w	r2, r3, #4
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e046      	b.n	8006120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d021      	beq.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fe fa7b 	bl	8004594 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d116      	bne.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e020      	b.n	8006120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d10c      	bne.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	43da      	mvns	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4013      	ands	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	2300      	moveq	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	e00b      	b.n	800611a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	43da      	mvns	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d18d      	bne.n	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006134:	e02d      	b.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f878 	bl	800622c <I2C_IsAcknowledgeFailed>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e02d      	b.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d021      	beq.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fe fa21 	bl	8004594 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d116      	bne.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e007      	b.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d1ca      	bne.n	8006136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061b6:	e02d      	b.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f837 	bl	800622c <I2C_IsAcknowledgeFailed>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e02d      	b.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d021      	beq.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fe f9e0 	bl	8004594 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e007      	b.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b04      	cmp	r3, #4
 8006220:	d1ca      	bne.n	80061b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006242:	d11b      	bne.n	800627c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800624c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e267      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d075      	beq.n	8006396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062aa:	4b88      	ldr	r3, [pc, #544]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d00c      	beq.n	80062d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b85      	ldr	r3, [pc, #532]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d112      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b82      	ldr	r3, [pc, #520]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05b      	beq.n	8006394 <HAL_RCC_OscConfig+0x108>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d157      	bne.n	8006394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e242      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x74>
 80062f2:	4b76      	ldr	r3, [pc, #472]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a75      	ldr	r2, [pc, #468]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0x98>
 800630a:	4b70      	ldr	r3, [pc, #448]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6f      	ldr	r2, [pc, #444]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6c      	ldr	r2, [pc, #432]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006324:	4b69      	ldr	r3, [pc, #420]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b66      	ldr	r3, [pc, #408]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fe f926 	bl	8004594 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fe f922 	bl	8004594 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e207      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b5b      	ldr	r3, [pc, #364]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xc0>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fe f912 	bl	8004594 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fe f90e 	bl	8004594 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1f3      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0xe8>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d11c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b44      	ldr	r3, [pc, #272]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c6:	4b41      	ldr	r3, [pc, #260]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e1c7      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4937      	ldr	r1, [pc, #220]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	e03a      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fe f8c7 	bl	8004594 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640a:	f7fe f8c3 	bl	8004594 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e1a8      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4925      	ldr	r1, [pc, #148]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fe f8a6 	bl	8004594 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644c:	f7fe f8a2 	bl	8004594 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e187      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d036      	beq.n	80064e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fe f886 	bl	8004594 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648c:	f7fe f882 	bl	8004594 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e167      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x200>
 80064aa:	e01b      	b.n	80064e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fe f86f 	bl	8004594 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	e00e      	b.n	80064d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ba:	f7fe f86b 	bl	8004594 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d907      	bls.n	80064d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e150      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80064cc:	40023800 	.word	0x40023800
 80064d0:	42470000 	.word	0x42470000
 80064d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d8:	4b88      	ldr	r3, [pc, #544]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ea      	bne.n	80064ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8097 	beq.w	8006620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f6:	4b81      	ldr	r3, [pc, #516]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	4b7d      	ldr	r3, [pc, #500]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	4a7c      	ldr	r2, [pc, #496]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6413      	str	r3, [r2, #64]	; 0x40
 8006512:	4b7a      	ldr	r3, [pc, #488]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006522:	4b77      	ldr	r3, [pc, #476]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d118      	bne.n	8006560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652e:	4b74      	ldr	r3, [pc, #464]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a73      	ldr	r2, [pc, #460]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653a:	f7fe f82b 	bl	8004594 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006542:	f7fe f827 	bl	8004594 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e10c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d106      	bne.n	8006576 <HAL_RCC_OscConfig+0x2ea>
 8006568:	4b64      	ldr	r3, [pc, #400]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	4a63      	ldr	r2, [pc, #396]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	6713      	str	r3, [r2, #112]	; 0x70
 8006574:	e01c      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d10c      	bne.n	8006598 <HAL_RCC_OscConfig+0x30c>
 800657e:	4b5f      	ldr	r3, [pc, #380]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006584:	f043 0304 	orr.w	r3, r3, #4
 8006588:	6713      	str	r3, [r2, #112]	; 0x70
 800658a:	4b5c      	ldr	r3, [pc, #368]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	4a5b      	ldr	r2, [pc, #364]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	6713      	str	r3, [r2, #112]	; 0x70
 8006596:	e00b      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006598:	4b58      	ldr	r3, [pc, #352]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a57      	ldr	r2, [pc, #348]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a54      	ldr	r2, [pc, #336]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fd ffec 	bl	8004594 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fd ffe8 	bl	8004594 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e0cb      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d6:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ee      	beq.n	80065c0 <HAL_RCC_OscConfig+0x334>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e4:	f7fd ffd6 	bl	8004594 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fd ffd2 	bl	8004594 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0b5      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006602:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ee      	bne.n	80065ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006614:	4b39      	ldr	r3, [pc, #228]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80a1 	beq.w	800676c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 030c 	and.w	r3, r3, #12
 8006632:	2b08      	cmp	r3, #8
 8006634:	d05c      	beq.n	80066f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d141      	bne.n	80066c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fd ffa6 	bl	8004594 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fd ffa2 	bl	8004594 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e087      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	4b27      	ldr	r3, [pc, #156]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	3b01      	subs	r3, #1
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	491b      	ldr	r1, [pc, #108]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006694:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669a:	f7fd ff7b 	bl	8004594 <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fd ff77 	bl	8004594 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e05c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0f0      	beq.n	80066a2 <HAL_RCC_OscConfig+0x416>
 80066c0:	e054      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fd ff64 	bl	8004594 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fd ff60 	bl	8004594 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e045      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x444>
 80066ee:	e03d      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e038      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80066fc:	40023800 	.word	0x40023800
 8006700:	40007000 	.word	0x40007000
 8006704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x4ec>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d028      	beq.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d121      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800672e:	429a      	cmp	r2, r3
 8006730:	d11a      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006738:	4013      	ands	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800673e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006740:	4293      	cmp	r3, r2
 8006742:	d111      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	3b01      	subs	r3, #1
 8006752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d107      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800

0800677c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0cc      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006790:	4b68      	ldr	r3, [pc, #416]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d90c      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b65      	ldr	r3, [pc, #404]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b63      	ldr	r3, [pc, #396]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0b8      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d0:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	494d      	ldr	r1, [pc, #308]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d044      	beq.n	800689c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b47      	ldr	r3, [pc, #284]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d119      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d003      	beq.n	800683a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006836:	2b03      	cmp	r3, #3
 8006838:	d107      	bne.n	800684a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683a:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e067      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 0203 	bic.w	r2, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4934      	ldr	r1, [pc, #208]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800686c:	f7fd fe92 	bl	8004594 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006872:	e00a      	b.n	800688a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006874:	f7fd fe8e 	bl	8004594 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e04f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 020c 	and.w	r2, r3, #12
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	429a      	cmp	r2, r3
 800689a:	d1eb      	bne.n	8006874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d20c      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068aa:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e032      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4916      	ldr	r1, [pc, #88]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	490e      	ldr	r1, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006902:	f000 f821 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006906:	4602      	mov	r2, r0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x1c0>)
 8006914:	5ccb      	ldrb	r3, [r1, r3]
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1c8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fb fdc6 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40023c00 	.word	0x40023c00
 8006938:	40023800 	.word	0x40023800
 800693c:	0800f03c 	.word	0x0800f03c
 8006940:	20000000 	.word	0x20000000
 8006944:	20000010 	.word	0x20000010

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800694c:	b094      	sub	sp, #80	; 0x50
 800694e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	2300      	movs	r3, #0
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	2300      	movs	r3, #0
 800695a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006960:	4b79      	ldr	r3, [pc, #484]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d00d      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x40>
 800696c:	2b08      	cmp	r3, #8
 800696e:	f200 80e1 	bhi.w	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x34>
 8006976:	2b04      	cmp	r3, #4
 8006978:	d003      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x3a>
 800697a:	e0db      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006980:	e0db      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006986:	e0d8      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006988:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006992:	4b6d      	ldr	r3, [pc, #436]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d063      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b6a      	ldr	r3, [pc, #424]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
 80069b2:	2300      	movs	r3, #0
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	f04f 0000 	mov.w	r0, #0
 80069c2:	f04f 0100 	mov.w	r1, #0
 80069c6:	0159      	lsls	r1, r3, #5
 80069c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069cc:	0150      	lsls	r0, r2, #5
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4621      	mov	r1, r4
 80069d4:	1a51      	subs	r1, r2, r1
 80069d6:	6139      	str	r1, [r7, #16]
 80069d8:	4629      	mov	r1, r5
 80069da:	eb63 0301 	sbc.w	r3, r3, r1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ec:	4659      	mov	r1, fp
 80069ee:	018b      	lsls	r3, r1, #6
 80069f0:	4651      	mov	r1, sl
 80069f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069f6:	4651      	mov	r1, sl
 80069f8:	018a      	lsls	r2, r1, #6
 80069fa:	4651      	mov	r1, sl
 80069fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006a00:	4659      	mov	r1, fp
 8006a02:	eb63 0901 	sbc.w	r9, r3, r1
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a1a:	4690      	mov	r8, r2
 8006a1c:	4699      	mov	r9, r3
 8006a1e:	4623      	mov	r3, r4
 8006a20:	eb18 0303 	adds.w	r3, r8, r3
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	462b      	mov	r3, r5
 8006a28:	eb49 0303 	adc.w	r3, r9, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	024b      	lsls	r3, r1, #9
 8006a3e:	4621      	mov	r1, r4
 8006a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a44:	4621      	mov	r1, r4
 8006a46:	024a      	lsls	r2, r1, #9
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	2200      	movs	r2, #0
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a58:	f7fa fa0c 	bl	8000e74 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	e058      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4611      	mov	r1, r2
 8006a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a76:	623b      	str	r3, [r7, #32]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a92:	0150      	lsls	r0, r2, #5
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4641      	mov	r1, r8
 8006a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8006abc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	00eb      	lsls	r3, r5, #3
 8006aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ace:	00e2      	lsls	r2, r4, #3
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	18e3      	adds	r3, r4, r3
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	464b      	mov	r3, r9
 8006adc:	eb45 0303 	adc.w	r3, r5, r3
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aee:	4629      	mov	r1, r5
 8006af0:	028b      	lsls	r3, r1, #10
 8006af2:	4621      	mov	r1, r4
 8006af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006af8:	4621      	mov	r1, r4
 8006afa:	028a      	lsls	r2, r1, #10
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	2200      	movs	r2, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	61fa      	str	r2, [r7, #28]
 8006b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0c:	f7fa f9b2 	bl	8000e74 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4613      	mov	r3, r2
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3750      	adds	r7, #80	; 0x50
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	00f42400 	.word	0x00f42400
 8006b50:	007a1200 	.word	0x007a1200

08006b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000000 	.word	0x20000000

08006b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b70:	f7ff fff0 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0a9b      	lsrs	r3, r3, #10
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	; (8006b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	0800f04c 	.word	0x0800f04c

08006b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b98:	f7ff ffdc 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0b5b      	lsrs	r3, r3, #13
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800f04c 	.word	0x0800f04c

08006bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	220f      	movs	r2, #15
 8006bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <HAL_RCC_GetClockConfig+0x5c>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 0203 	and.w	r2, r3, #3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bd8:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_RCC_GetClockConfig+0x5c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <HAL_RCC_GetClockConfig+0x5c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <HAL_RCC_GetClockConfig+0x5c>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <HAL_RCC_GetClockConfig+0x60>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0207 	and.w	r2, r3, #7
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	601a      	str	r2, [r3, #0]
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	40023c00 	.word	0x40023c00

08006c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e041      	b.n	8006cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fb fbb6 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 fae2 	bl	8007228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d001      	beq.n	8006cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e03c      	b.n	8006d52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <HAL_TIM_Base_Start+0xa0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d013      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <HAL_TIM_Base_Start+0xa4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <HAL_TIM_Base_Start+0xa8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <HAL_TIM_Base_Start+0xac>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_Base_Start+0x5c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIM_Base_Start+0xb0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d111      	bne.n	8006d40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d010      	beq.n	8006d50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3e:	e007      	b.n	8006d50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40014000 	.word	0x40014000

08006d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e044      	b.n	8006e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d013      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x6c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d111      	bne.n	8006e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d010      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0201 	orr.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e02:	e007      	b.n	8006e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40014000 	.word	0x40014000

08006e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0202 	mvn.w	r2, #2
 8006e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9b5 	bl	80071ea <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9a7 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9b8 	bl	80071fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d122      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d11b      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0204 	mvn.w	r2, #4
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f98b 	bl	80071ea <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f97d 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f98e 	bl	80071fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d122      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d11b      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0208 	mvn.w	r2, #8
 8006f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2204      	movs	r2, #4
 8006f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f961 	bl	80071ea <HAL_TIM_IC_CaptureCallback>
 8006f28:	e005      	b.n	8006f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f953 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f964 	bl	80071fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d122      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d11b      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0210 	mvn.w	r2, #16
 8006f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2208      	movs	r2, #8
 8006f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f937 	bl	80071ea <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f929 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f93a 	bl	80071fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10e      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0201 	mvn.w	r2, #1
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fb f8fa 	bl	80021b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b80      	cmp	r3, #128	; 0x80
 8006fd6:	d107      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fab2 	bl	800754c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8ff 	bl	8007212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b20      	cmp	r3, #32
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b20      	cmp	r3, #32
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0220 	mvn.w	r2, #32
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa7c 	bl	8007538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_TIM_ConfigClockSource+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e0b4      	b.n	80071ce <HAL_TIM_ConfigClockSource+0x186>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709c:	d03e      	beq.n	800711c <HAL_TIM_ConfigClockSource+0xd4>
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	f200 8087 	bhi.w	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070aa:	f000 8086 	beq.w	80071ba <HAL_TIM_ConfigClockSource+0x172>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	d87f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070b4:	2b70      	cmp	r3, #112	; 0x70
 80070b6:	d01a      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0xa6>
 80070b8:	2b70      	cmp	r3, #112	; 0x70
 80070ba:	d87b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070bc:	2b60      	cmp	r3, #96	; 0x60
 80070be:	d050      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x11a>
 80070c0:	2b60      	cmp	r3, #96	; 0x60
 80070c2:	d877      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070c4:	2b50      	cmp	r3, #80	; 0x50
 80070c6:	d03c      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0xfa>
 80070c8:	2b50      	cmp	r3, #80	; 0x50
 80070ca:	d873      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	d058      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x13a>
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d86f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070d4:	2b30      	cmp	r3, #48	; 0x30
 80070d6:	d064      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070d8:	2b30      	cmp	r3, #48	; 0x30
 80070da:	d86b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d060      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d867      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d05c      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d05a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070ec:	e062      	b.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f000 f98d 	bl	800741c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	609a      	str	r2, [r3, #8]
      break;
 800711a:	e04f      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6899      	ldr	r1, [r3, #8]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f000 f976 	bl	800741c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800713e:	609a      	str	r2, [r3, #8]
      break;
 8007140:	e03c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	461a      	mov	r2, r3
 8007150:	f000 f8ea 	bl	8007328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2150      	movs	r1, #80	; 0x50
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f943 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8007160:	e02c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	461a      	mov	r2, r3
 8007170:	f000 f909 	bl	8007386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2160      	movs	r1, #96	; 0x60
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f933 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8007180:	e01c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	461a      	mov	r2, r3
 8007190:	f000 f8ca 	bl	8007328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2140      	movs	r1, #64	; 0x40
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f923 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 80071a0:	e00c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f000 f91a 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 80071b2:	e003      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e000      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a34      	ldr	r2, [pc, #208]	; (800730c <TIM_Base_SetConfig+0xe4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00f      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d00b      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a31      	ldr	r2, [pc, #196]	; (8007310 <TIM_Base_SetConfig+0xe8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a30      	ldr	r2, [pc, #192]	; (8007314 <TIM_Base_SetConfig+0xec>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a2f      	ldr	r2, [pc, #188]	; (8007318 <TIM_Base_SetConfig+0xf0>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d108      	bne.n	8007272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a25      	ldr	r2, [pc, #148]	; (800730c <TIM_Base_SetConfig+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01b      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d017      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a22      	ldr	r2, [pc, #136]	; (8007310 <TIM_Base_SetConfig+0xe8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <TIM_Base_SetConfig+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a20      	ldr	r2, [pc, #128]	; (8007318 <TIM_Base_SetConfig+0xf0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1f      	ldr	r2, [pc, #124]	; (800731c <TIM_Base_SetConfig+0xf4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <TIM_Base_SetConfig+0xf8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <TIM_Base_SetConfig+0xfc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d108      	bne.n	80072c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a08      	ldr	r2, [pc, #32]	; (800730c <TIM_Base_SetConfig+0xe4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d103      	bne.n	80072f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	615a      	str	r2, [r3, #20]
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40010000 	.word	0x40010000
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800

08007328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f023 030a 	bic.w	r3, r3, #10
 8007364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007386:	b480      	push	{r7}
 8007388:	b087      	sub	sp, #28
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0210 	bic.w	r2, r3, #16
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	f043 0307 	orr.w	r3, r3, #7
 8007408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	609a      	str	r2, [r3, #8]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	021a      	lsls	r2, r3, #8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	431a      	orrs	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4313      	orrs	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e050      	b.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c0:	d013      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a16      	ldr	r2, [pc, #88]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a15      	ldr	r2, [pc, #84]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d10c      	bne.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40014000 	.word	0x40014000

08007538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e03f      	b.n	80075f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fa ff4c 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f829 	bl	80075fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007600:	b0c0      	sub	sp, #256	; 0x100
 8007602:	af00      	add	r7, sp, #0
 8007604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	68d9      	ldr	r1, [r3, #12]
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	ea40 0301 	orr.w	r3, r0, r1
 8007624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	431a      	orrs	r2, r3
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	431a      	orrs	r2, r3
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007654:	f021 010c 	bic.w	r1, r1, #12
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007662:	430b      	orrs	r3, r1
 8007664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007676:	6999      	ldr	r1, [r3, #24]
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	ea40 0301 	orr.w	r3, r0, r1
 8007682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b8f      	ldr	r3, [pc, #572]	; (80078c8 <UART_SetConfig+0x2cc>)
 800768c:	429a      	cmp	r2, r3
 800768e:	d005      	beq.n	800769c <UART_SetConfig+0xa0>
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b8d      	ldr	r3, [pc, #564]	; (80078cc <UART_SetConfig+0x2d0>)
 8007698:	429a      	cmp	r2, r3
 800769a:	d104      	bne.n	80076a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800769c:	f7ff fa7a 	bl	8006b94 <HAL_RCC_GetPCLK2Freq>
 80076a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076a4:	e003      	b.n	80076ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076a6:	f7ff fa61 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 80076aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b8:	f040 810c 	bne.w	80078d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	1891      	adds	r1, r2, r2
 80076d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80076d6:	415b      	adcs	r3, r3
 80076d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076de:	4621      	mov	r1, r4
 80076e0:	eb12 0801 	adds.w	r8, r2, r1
 80076e4:	4629      	mov	r1, r5
 80076e6:	eb43 0901 	adc.w	r9, r3, r1
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076fe:	4690      	mov	r8, r2
 8007700:	4699      	mov	r9, r3
 8007702:	4623      	mov	r3, r4
 8007704:	eb18 0303 	adds.w	r3, r8, r3
 8007708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800770c:	462b      	mov	r3, r5
 800770e:	eb49 0303 	adc.w	r3, r9, r3
 8007712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800772a:	460b      	mov	r3, r1
 800772c:	18db      	adds	r3, r3, r3
 800772e:	653b      	str	r3, [r7, #80]	; 0x50
 8007730:	4613      	mov	r3, r2
 8007732:	eb42 0303 	adc.w	r3, r2, r3
 8007736:	657b      	str	r3, [r7, #84]	; 0x54
 8007738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800773c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007740:	f7f9 fb98 	bl	8000e74 <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4b61      	ldr	r3, [pc, #388]	; (80078d0 <UART_SetConfig+0x2d4>)
 800774a:	fba3 2302 	umull	r2, r3, r3, r2
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	011c      	lsls	r4, r3, #4
 8007752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007756:	2200      	movs	r2, #0
 8007758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800775c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	1891      	adds	r1, r2, r2
 800776a:	64b9      	str	r1, [r7, #72]	; 0x48
 800776c:	415b      	adcs	r3, r3
 800776e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007774:	4641      	mov	r1, r8
 8007776:	eb12 0a01 	adds.w	sl, r2, r1
 800777a:	4649      	mov	r1, r9
 800777c:	eb43 0b01 	adc.w	fp, r3, r1
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800778c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007794:	4692      	mov	sl, r2
 8007796:	469b      	mov	fp, r3
 8007798:	4643      	mov	r3, r8
 800779a:	eb1a 0303 	adds.w	r3, sl, r3
 800779e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077a2:	464b      	mov	r3, r9
 80077a4:	eb4b 0303 	adc.w	r3, fp, r3
 80077a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077c0:	460b      	mov	r3, r1
 80077c2:	18db      	adds	r3, r3, r3
 80077c4:	643b      	str	r3, [r7, #64]	; 0x40
 80077c6:	4613      	mov	r3, r2
 80077c8:	eb42 0303 	adc.w	r3, r2, r3
 80077cc:	647b      	str	r3, [r7, #68]	; 0x44
 80077ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077d6:	f7f9 fb4d 	bl	8000e74 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4611      	mov	r1, r2
 80077e0:	4b3b      	ldr	r3, [pc, #236]	; (80078d0 <UART_SetConfig+0x2d4>)
 80077e2:	fba3 2301 	umull	r2, r3, r3, r1
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	2264      	movs	r2, #100	; 0x64
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	1acb      	subs	r3, r1, r3
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077f6:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <UART_SetConfig+0x2d4>)
 80077f8:	fba3 2302 	umull	r2, r3, r3, r2
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007804:	441c      	add	r4, r3
 8007806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780a:	2200      	movs	r2, #0
 800780c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	1891      	adds	r1, r2, r2
 800781e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007820:	415b      	adcs	r3, r3
 8007822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007828:	4641      	mov	r1, r8
 800782a:	1851      	adds	r1, r2, r1
 800782c:	6339      	str	r1, [r7, #48]	; 0x30
 800782e:	4649      	mov	r1, r9
 8007830:	414b      	adcs	r3, r1
 8007832:	637b      	str	r3, [r7, #52]	; 0x34
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007840:	4659      	mov	r1, fp
 8007842:	00cb      	lsls	r3, r1, #3
 8007844:	4651      	mov	r1, sl
 8007846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800784a:	4651      	mov	r1, sl
 800784c:	00ca      	lsls	r2, r1, #3
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	4603      	mov	r3, r0
 8007854:	4642      	mov	r2, r8
 8007856:	189b      	adds	r3, r3, r2
 8007858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800785c:	464b      	mov	r3, r9
 800785e:	460a      	mov	r2, r1
 8007860:	eb42 0303 	adc.w	r3, r2, r3
 8007864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800787c:	460b      	mov	r3, r1
 800787e:	18db      	adds	r3, r3, r3
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
 8007882:	4613      	mov	r3, r2
 8007884:	eb42 0303 	adc.w	r3, r2, r3
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800788e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007892:	f7f9 faef 	bl	8000e74 <__aeabi_uldivmod>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <UART_SetConfig+0x2d4>)
 800789c:	fba3 1302 	umull	r1, r3, r3, r2
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	2164      	movs	r1, #100	; 0x64
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	3332      	adds	r3, #50	; 0x32
 80078ae:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <UART_SetConfig+0x2d4>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	f003 0207 	and.w	r2, r3, #7
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4422      	add	r2, r4
 80078c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078c4:	e105      	b.n	8007ad2 <UART_SetConfig+0x4d6>
 80078c6:	bf00      	nop
 80078c8:	40011000 	.word	0x40011000
 80078cc:	40011400 	.word	0x40011400
 80078d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078e6:	4642      	mov	r2, r8
 80078e8:	464b      	mov	r3, r9
 80078ea:	1891      	adds	r1, r2, r2
 80078ec:	6239      	str	r1, [r7, #32]
 80078ee:	415b      	adcs	r3, r3
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078f6:	4641      	mov	r1, r8
 80078f8:	1854      	adds	r4, r2, r1
 80078fa:	4649      	mov	r1, r9
 80078fc:	eb43 0501 	adc.w	r5, r3, r1
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	00eb      	lsls	r3, r5, #3
 800790a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800790e:	00e2      	lsls	r2, r4, #3
 8007910:	4614      	mov	r4, r2
 8007912:	461d      	mov	r5, r3
 8007914:	4643      	mov	r3, r8
 8007916:	18e3      	adds	r3, r4, r3
 8007918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800791c:	464b      	mov	r3, r9
 800791e:	eb45 0303 	adc.w	r3, r5, r3
 8007922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007942:	4629      	mov	r1, r5
 8007944:	008b      	lsls	r3, r1, #2
 8007946:	4621      	mov	r1, r4
 8007948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800794c:	4621      	mov	r1, r4
 800794e:	008a      	lsls	r2, r1, #2
 8007950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007954:	f7f9 fa8e 	bl	8000e74 <__aeabi_uldivmod>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4b60      	ldr	r3, [pc, #384]	; (8007ae0 <UART_SetConfig+0x4e4>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	011c      	lsls	r4, r3, #4
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	61b9      	str	r1, [r7, #24]
 8007980:	415b      	adcs	r3, r3
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007988:	4641      	mov	r1, r8
 800798a:	1851      	adds	r1, r2, r1
 800798c:	6139      	str	r1, [r7, #16]
 800798e:	4649      	mov	r1, r9
 8007990:	414b      	adcs	r3, r1
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079a0:	4659      	mov	r1, fp
 80079a2:	00cb      	lsls	r3, r1, #3
 80079a4:	4651      	mov	r1, sl
 80079a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079aa:	4651      	mov	r1, sl
 80079ac:	00ca      	lsls	r2, r1, #3
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	4642      	mov	r2, r8
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079bc:	464b      	mov	r3, r9
 80079be:	460a      	mov	r2, r1
 80079c0:	eb42 0303 	adc.w	r3, r2, r3
 80079c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80079d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079e0:	4649      	mov	r1, r9
 80079e2:	008b      	lsls	r3, r1, #2
 80079e4:	4641      	mov	r1, r8
 80079e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ea:	4641      	mov	r1, r8
 80079ec:	008a      	lsls	r2, r1, #2
 80079ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079f2:	f7f9 fa3f 	bl	8000e74 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4b39      	ldr	r3, [pc, #228]	; (8007ae0 <UART_SetConfig+0x4e4>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	; 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	3332      	adds	r3, #50	; 0x32
 8007a0e:	4a34      	ldr	r2, [pc, #208]	; (8007ae0 <UART_SetConfig+0x4e4>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a1a:	441c      	add	r4, r3
 8007a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a20:	2200      	movs	r2, #0
 8007a22:	673b      	str	r3, [r7, #112]	; 0x70
 8007a24:	677a      	str	r2, [r7, #116]	; 0x74
 8007a26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	1891      	adds	r1, r2, r2
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	415b      	adcs	r3, r3
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	1851      	adds	r1, r2, r1
 8007a3e:	6039      	str	r1, [r7, #0]
 8007a40:	4649      	mov	r1, r9
 8007a42:	414b      	adcs	r3, r1
 8007a44:	607b      	str	r3, [r7, #4]
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a52:	4659      	mov	r1, fp
 8007a54:	00cb      	lsls	r3, r1, #3
 8007a56:	4651      	mov	r1, sl
 8007a58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	00ca      	lsls	r2, r1, #3
 8007a60:	4610      	mov	r0, r2
 8007a62:	4619      	mov	r1, r3
 8007a64:	4603      	mov	r3, r0
 8007a66:	4642      	mov	r2, r8
 8007a68:	189b      	adds	r3, r3, r2
 8007a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	460a      	mov	r2, r1
 8007a70:	eb42 0303 	adc.w	r3, r2, r3
 8007a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a80:	667a      	str	r2, [r7, #100]	; 0x64
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a8e:	4649      	mov	r1, r9
 8007a90:	008b      	lsls	r3, r1, #2
 8007a92:	4641      	mov	r1, r8
 8007a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a98:	4641      	mov	r1, r8
 8007a9a:	008a      	lsls	r2, r1, #2
 8007a9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007aa0:	f7f9 f9e8 	bl	8000e74 <__aeabi_uldivmod>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <UART_SetConfig+0x4e4>)
 8007aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	2164      	movs	r1, #100	; 0x64
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	3332      	adds	r3, #50	; 0x32
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <UART_SetConfig+0x4e4>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4422      	add	r2, r4
 8007ad0:	609a      	str	r2, [r3, #8]
}
 8007ad2:	bf00      	nop
 8007ad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ade:	bf00      	nop
 8007ae0:	51eb851f 	.word	0x51eb851f

08007ae4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007af6:	2b84      	cmp	r3, #132	; 0x84
 8007af8:	d005      	beq.n	8007b06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007afa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	3303      	adds	r3, #3
 8007b04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b18:	f001 fe5a 	bl	80097d0 <vTaskStartScheduler>
  
  return osOK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b24:	b089      	sub	sp, #36	; 0x24
 8007b26:	af04      	add	r7, sp, #16
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d020      	beq.n	8007b76 <osThreadCreate+0x54>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01c      	beq.n	8007b76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685c      	ldr	r4, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681d      	ldr	r5, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691e      	ldr	r6, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff ffc8 	bl	8007ae4 <makeFreeRtosPriority>
 8007b54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b5e:	9202      	str	r2, [sp, #8]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	9100      	str	r1, [sp, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4632      	mov	r2, r6
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f001 fadd 	bl	800912a <xTaskCreateStatic>
 8007b70:	4603      	mov	r3, r0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e01c      	b.n	8007bb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685c      	ldr	r4, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b82:	b29e      	uxth	r6, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff ffaa 	bl	8007ae4 <makeFreeRtosPriority>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f107 030c 	add.w	r3, r7, #12
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	9200      	str	r2, [sp, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f001 fb1f 	bl	80091e4 <xTaskCreate>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d001      	beq.n	8007bb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <osDelay+0x16>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	e000      	b.n	8007bd2 <osDelay+0x18>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 fd90 	bl	80096f8 <vTaskDelay>
  
  return osOK;
 8007bd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007bea:	2020      	movs	r0, #32
 8007bec:	f003 f8a4 	bl	800ad38 <pvPortMalloc>
 8007bf0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d050      	beq.n	8007c9a <xEventGroupCreate+0xb6>
		{
			pxEventBits->uxEventBits = 0;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fab8 	bl	8008178 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	771a      	strb	r2, [r3, #28]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			traceEVENT_GROUP_CREATE( pxEventBits );
 8007c0e:	2006      	movs	r0, #6
 8007c10:	f7fb ffa8 	bl	8003b64 <prvTraceGetObjectHandle>
 8007c14:	4603      	mov	r3, r0
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa ff9e 	bl	8002b5c <prvTraceSetEventGroupNumberLow16>
 8007c20:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <xEventGroupCreate+0xe8>)
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fa ffae 	bl	8002b88 <prvTraceSetEventGroupNumberHigh16>
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fa ff7a 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007c32:	4603      	mov	r3, r0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	4619      	mov	r1, r3
 8007c38:	2006      	movs	r0, #6
 8007c3a:	f7fc f82b 	bl	8003c94 <prvMarkObjectAsUsed>
 8007c3e:	f7fa ffb9 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fa feed 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <xEventGroupCreate+0xec>)
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	4013      	ands	r3, r2
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d014      	beq.n	8007c84 <xEventGroupCreate+0xa0>
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fa ff70 	bl	8002b40 <prvTraceGetEventGroupNumberHigh16>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <xEventGroupCreate+0xec>)
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <xEventGroupCreate+0xa0>
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7fa ff58 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007c76:	4603      	mov	r3, r0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2106      	movs	r1, #6
 8007c7e:	20c2      	movs	r0, #194	; 0xc2
 8007c80:	f7fb fcaa 	bl	80035d8 <prvTraceStoreKernelCall>
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fa ff4e 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4619      	mov	r1, r3
 8007c92:	2006      	movs	r0, #6
 8007c94:	f7fb fea2 	bl	80039dc <prvTraceSetObjectState>
 8007c98:	e012      	b.n	8007cc0 <xEventGroupCreate+0xdc>
		}
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 8007c9a:	f7fa ff8b 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fa febf 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <xEventGroupCreate+0xec>)
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <xEventGroupCreate+0xdc>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2106      	movs	r1, #6
 8007cba:	20c3      	movs	r0, #195	; 0xc3
 8007cbc:	f7fb fc8c 	bl	80035d8 <prvTraceStoreKernelCall>
		}

		return pxEventBits;
 8007cc0:	687b      	ldr	r3, [r7, #4]
	}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	2000137e 	.word	0x2000137e
 8007cd0:	2000137c 	.word	0x2000137c

08007cd4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b090      	sub	sp, #64	; 0x40
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30
EventBits_t uxReturn, uxControlBits = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <xEventGroupWaitBits+0x56>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	61fb      	str	r3, [r7, #28]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xEventGroupWaitBits+0x72>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	61bb      	str	r3, [r7, #24]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d46:	f002 faeb 	bl	800a320 <xTaskGetSchedulerState>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <xEventGroupWaitBits+0x82>
 8007d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <xEventGroupWaitBits+0x86>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <xEventGroupWaitBits+0x88>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	617b      	str	r3, [r7, #20]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007d76:	f001 fdb7 	bl	80098e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d86:	f000 f9b1 	bl	80080ec <prvTestWaitCondition>
 8007d8a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00e      	beq.n	8007db0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d065      	beq.n	8007e6c <xEventGroupWaitBits+0x198>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	43db      	mvns	r3, r3
 8007da8:	401a      	ands	r2, r3
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e05d      	b.n	8007e6c <xEventGroupWaitBits+0x198>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbe:	e055      	b.n	8007e6c <xEventGroupWaitBits+0x198>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	1d18      	adds	r0, r3, #4
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	4313      	orrs	r3, r2
 8007de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de8:	4619      	mov	r1, r3
 8007dea:	f001 ffd7 	bl	8009d9c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 8007df2:	f7fa fedf 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007df6:	4603      	mov	r3, r0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fa fe13 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b5f      	ldr	r3, [pc, #380]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	4013      	ands	r3, r2
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d015      	beq.n	8007e3a <xEventGroupWaitBits+0x166>
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7fa fe96 	bl	8002b40 <prvTraceGetEventGroupNumberHigh16>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b59      	ldr	r3, [pc, #356]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <xEventGroupWaitBits+0x166>
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7fa fe7e 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2106      	movs	r1, #6
 8007e34:	20c6      	movs	r0, #198	; 0xc6
 8007e36:	f7fb fc2b 	bl	8003690 <prvTraceStoreKernelCallWithParam>
 8007e3a:	f7fa febb 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa fdef 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b4d      	ldr	r3, [pc, #308]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <xEventGroupWaitBits+0x198>
 8007e56:	f7fa fead 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fa fdd4 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8007e62:	4603      	mov	r3, r0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fb fdfe 	bl	8003a68 <prvTraceSetTaskInstanceFinished>
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007e6c:	f001 fd4a 	bl	8009904 <xTaskResumeAll>
 8007e70:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d031      	beq.n	8007edc <xEventGroupWaitBits+0x208>
	{
		if( xAlreadyYielded == pdFALSE )
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <xEventGroupWaitBits+0x1ba>
		{
			portYIELD_WITHIN_API();
 8007e7e:	4b41      	ldr	r3, [pc, #260]	; (8007f84 <xEventGroupWaitBits+0x2b0>)
 8007e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007e8e:	f002 fcb9 	bl	800a804 <uxTaskResetEventItemValue>
 8007e92:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11a      	bne.n	8007ed4 <xEventGroupWaitBits+0x200>
		{
			taskENTER_CRITICAL();
 8007e9e:	f002 fe81 	bl	800aba4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007eae:	f000 f91d 	bl	80080ec <prvTestWaitCondition>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <xEventGroupWaitBits+0x1f8>
				{
					if( xClearOnExit != pdFALSE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <xEventGroupWaitBits+0x1f8>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	401a      	ands	r2, r3
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
			}
			taskEXIT_CRITICAL();
 8007ed0:	f002 fe82 	bl	800abd8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d024      	beq.n	8007f2c <xEventGroupWaitBits+0x258>
 8007ee2:	f7fa fe67 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fa fd9b 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4b23      	ldr	r3, [pc, #140]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d03a      	beq.n	8007f74 <xEventGroupWaitBits+0x2a0>
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7fa fe1e 	bl	8002b40 <prvTraceGetEventGroupNumberHigh16>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02f      	beq.n	8007f74 <xEventGroupWaitBits+0x2a0>
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7fa fe06 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2106      	movs	r1, #6
 8007f24:	20cd      	movs	r0, #205	; 0xcd
 8007f26:	f7fb fbb3 	bl	8003690 <prvTraceStoreKernelCallWithParam>
 8007f2a:	e023      	b.n	8007f74 <xEventGroupWaitBits+0x2a0>
 8007f2c:	f7fa fe42 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007f30:	4603      	mov	r3, r0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fa fd76 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	4013      	ands	r3, r2
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d015      	beq.n	8007f74 <xEventGroupWaitBits+0x2a0>
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7fa fdf9 	bl	8002b40 <prvTraceGetEventGroupNumberHigh16>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <xEventGroupWaitBits+0x2ac>)
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	4013      	ands	r3, r2
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <xEventGroupWaitBits+0x2a0>
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7fa fde1 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8007f64:	4603      	mov	r3, r0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2106      	movs	r1, #6
 8007f6e:	20c7      	movs	r0, #199	; 0xc7
 8007f70:	f7fb fb8e 	bl	8003690 <prvTraceStoreKernelCallWithParam>

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3740      	adds	r7, #64	; 0x40
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000137c 	.word	0x2000137c
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08e      	sub	sp, #56	; 0x38
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007f92:	2300      	movs	r3, #0
 8007f94:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <xEventGroupSetBits+0x32>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	613b      	str	r3, [r7, #16]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <xEventGroupSetBits+0x52>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	3304      	adds	r3, #4
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007fe6:	f001 fc7f 	bl	80098e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 8007fea:	f7fa fde3 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fa fd17 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4b3b      	ldr	r3, [pc, #236]	; (80080e8 <xEventGroupSetBits+0x160>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	4013      	ands	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d015      	beq.n	8008032 <xEventGroupSetBits+0xaa>
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fa fd9a 	bl	8002b40 <prvTraceGetEventGroupNumberHigh16>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	4b35      	ldr	r3, [pc, #212]	; (80080e8 <xEventGroupSetBits+0x160>)
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	4013      	ands	r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <xEventGroupSetBits+0xaa>
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fa fd82 	bl	8002b26 <prvTraceGetEventGroupNumberLow16>
 8008022:	4603      	mov	r3, r0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2106      	movs	r1, #6
 800802c:	20ca      	movs	r0, #202	; 0xca
 800802e:	f7fb fb2f 	bl	8003690 <prvTraceStoreKernelCallWithParam>

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	431a      	orrs	r2, r3
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008044:	e03c      	b.n	80080c0 <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800805c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008064:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d108      	bne.n	8008082 <xEventGroupSetBits+0xfa>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	4013      	ands	r3, r2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <xEventGroupSetBits+0x10c>
				{
					xMatchFound = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008080:	e008      	b.n	8008094 <xEventGroupSetBits+0x10c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	4013      	ands	r3, r2
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	429a      	cmp	r2, r3
 800808e:	d101      	bne.n	8008094 <xEventGroupSetBits+0x10c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d010      	beq.n	80080bc <xEventGroupSetBits+0x134>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <xEventGroupSetBits+0x124>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80080a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080b4:	4619      	mov	r1, r3
 80080b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080b8:	f001 ff24 	bl	8009f04 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80080c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d1be      	bne.n	8008046 <xEventGroupSetBits+0xbe>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	43db      	mvns	r3, r3
 80080d0:	401a      	ands	r2, r3
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80080d6:	f001 fc15 	bl	8009904 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	681b      	ldr	r3, [r3, #0]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3738      	adds	r7, #56	; 0x38
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000137c 	.word	0x2000137c

080080ec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e007      	b.n	8008122 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4013      	ands	r3, r2
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	d101      	bne.n	8008122 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e002      	b.n	800814e <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800814e:	68fb      	ldr	r3, [r7, #12]
	}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <vEventGroupSetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	619a      	str	r2, [r3, #24]
	}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f103 0208 	add.w	r2, r3, #8
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f04f 32ff 	mov.w	r2, #4294967295
 8008190:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f103 0208 	add.w	r2, r3, #8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f103 0208 	add.w	r2, r3, #8
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d103      	bne.n	800823a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e00c      	b.n	8008254 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3308      	adds	r3, #8
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e002      	b.n	8008248 <vListInsert+0x2e>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	429a      	cmp	r2, r3
 8008252:	d2f6      	bcs.n	8008242 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6892      	ldr	r2, [r2, #8]
 80082a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6852      	ldr	r2, [r2, #4]
 80082ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d103      	bne.n	80082c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1e5a      	subs	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <xQueueGenericReset+0x2a>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	60bb      	str	r3, [r7, #8]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800830a:	f002 fc4b 	bl	800aba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	441a      	add	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	3b01      	subs	r3, #1
 800833c:	68f9      	ldr	r1, [r7, #12]
 800833e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	22ff      	movs	r2, #255	; 0xff
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d114      	bne.n	800838a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01a      	beq.n	800839e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3310      	adds	r3, #16
 800836c:	4618      	mov	r0, r3
 800836e:	f001 fd51 	bl	8009e14 <xTaskRemoveFromEventList>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d012      	beq.n	800839e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <xQueueGenericReset+0xcc>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	e009      	b.n	800839e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3310      	adds	r3, #16
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fef2 	bl	8008178 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3324      	adds	r3, #36	; 0x24
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff feed 	bl	8008178 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800839e:	f002 fc1b 	bl	800abd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083a2:	2301      	movs	r3, #1
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <xQueueGenericCreate+0x2a>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	613b      	str	r3, [r7, #16]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	fb02 f303 	mul.w	r3, r2, r3
 80083e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	3350      	adds	r3, #80	; 0x50
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 fca5 	bl	800ad38 <pvPortMalloc>
 80083ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	3350      	adds	r3, #80	; 0x50
 80083fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008408:	79fa      	ldrb	r2, [r7, #7]
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	4613      	mov	r3, r2
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f825 	bl	8008464 <prvInitialiseNewQueue>
 800841a:	e01a      	b.n	8008452 <xQueueGenericCreate+0xa2>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800841c:	f7fa fbca 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008420:	4603      	mov	r3, r0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fa fafe 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <xQueueGenericCreate+0xac>)
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	4013      	ands	r3, r2
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00c      	beq.n	8008452 <xQueueGenericCreate+0xa2>
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	4a09      	ldr	r2, [pc, #36]	; (8008460 <xQueueGenericCreate+0xb0>)
 800843c:	5cd3      	ldrb	r3, [r2, r3]
 800843e:	3340      	adds	r3, #64	; 0x40
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4618      	mov	r0, r3
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	4a06      	ldr	r2, [pc, #24]	; (8008460 <xQueueGenericCreate+0xb0>)
 8008448:	5cd3      	ldrb	r3, [r2, r3]
 800844a:	2200      	movs	r2, #0
 800844c:	4619      	mov	r1, r3
 800844e:	f7fb f8c3 	bl	80035d8 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008452:	69bb      	ldr	r3, [r7, #24]
	}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	2000137c 	.word	0x2000137c
 8008460:	20000004 	.word	0x20000004

08008464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	6a3a      	ldr	r2, [r7, #32]
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e002      	b.n	8008486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008492:	2101      	movs	r1, #1
 8008494:	6a38      	ldr	r0, [r7, #32]
 8008496:	f7ff ff23 	bl	80082e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80084a2:	6a38      	ldr	r0, [r7, #32]
 80084a4:	f7fa faa5 	bl	80029f2 <prvTraceGetQueueType>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	4b34      	ldr	r3, [pc, #208]	; (8008580 <prvInitialiseNewQueue+0x11c>)
 80084ae:	5c9b      	ldrb	r3, [r3, r2]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fb fb57 	bl	8003b64 <prvTraceGetObjectHandle>
 80084b6:	4603      	mov	r3, r0
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4619      	mov	r1, r3
 80084bc:	6a38      	ldr	r0, [r7, #32]
 80084be:	f7fa fb06 	bl	8002ace <prvTraceSetQueueNumberLow16>
 80084c2:	4b30      	ldr	r3, [pc, #192]	; (8008584 <prvInitialiseNewQueue+0x120>)
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6a38      	ldr	r0, [r7, #32]
 80084ca:	f7fa fb16 	bl	8002afa <prvTraceSetQueueNumberHigh16>
 80084ce:	6a38      	ldr	r0, [r7, #32]
 80084d0:	f7fa fa8f 	bl	80029f2 <prvTraceGetQueueType>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	4b29      	ldr	r3, [pc, #164]	; (8008580 <prvInitialiseNewQueue+0x11c>)
 80084da:	5c9c      	ldrb	r4, [r3, r2]
 80084dc:	6a38      	ldr	r0, [r7, #32]
 80084de:	f7fa fadb 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 80084e2:	4603      	mov	r3, r0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	4619      	mov	r1, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7fb fbd3 	bl	8003c94 <prvMarkObjectAsUsed>
 80084ee:	f7fa fb61 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fa fa95 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 80084fa:	4603      	mov	r3, r0
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b22      	ldr	r3, [pc, #136]	; (8008588 <prvInitialiseNewQueue+0x124>)
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	4013      	ands	r3, r2
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d025      	beq.n	8008556 <prvInitialiseNewQueue+0xf2>
 800850a:	6a38      	ldr	r0, [r7, #32]
 800850c:	f7fa fad1 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008510:	4603      	mov	r3, r0
 8008512:	461a      	mov	r2, r3
 8008514:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <prvInitialiseNewQueue+0x124>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	4013      	ands	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <prvInitialiseNewQueue+0xf2>
 8008520:	6a38      	ldr	r0, [r7, #32]
 8008522:	f7fa fa66 	bl	80029f2 <prvTraceGetQueueType>
 8008526:	4603      	mov	r3, r0
 8008528:	461a      	mov	r2, r3
 800852a:	4b15      	ldr	r3, [pc, #84]	; (8008580 <prvInitialiseNewQueue+0x11c>)
 800852c:	5c9b      	ldrb	r3, [r3, r2]
 800852e:	3318      	adds	r3, #24
 8008530:	b2db      	uxtb	r3, r3
 8008532:	461d      	mov	r5, r3
 8008534:	6a38      	ldr	r0, [r7, #32]
 8008536:	f7fa fa5c 	bl	80029f2 <prvTraceGetQueueType>
 800853a:	4603      	mov	r3, r0
 800853c:	461a      	mov	r2, r3
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <prvInitialiseNewQueue+0x11c>)
 8008540:	5c9c      	ldrb	r4, [r3, r2]
 8008542:	6a38      	ldr	r0, [r7, #32]
 8008544:	f7fa faa8 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008548:	4603      	mov	r3, r0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f7fb f841 	bl	80035d8 <prvTraceStoreKernelCall>
 8008556:	6a38      	ldr	r0, [r7, #32]
 8008558:	f7fa fa4b 	bl	80029f2 <prvTraceGetQueueType>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <prvInitialiseNewQueue+0x11c>)
 8008562:	5c9c      	ldrb	r4, [r3, r2]
 8008564:	6a38      	ldr	r0, [r7, #32]
 8008566:	f7fa fa97 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 800856a:	4603      	mov	r3, r0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2200      	movs	r2, #0
 8008570:	4619      	mov	r1, r3
 8008572:	4620      	mov	r0, r4
 8008574:	f7fb fa32 	bl	80039dc <prvTraceSetObjectState>
}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bdb0      	pop	{r4, r5, r7, pc}
 8008580:	20000004 	.word	0x20000004
 8008584:	2000137e 	.word	0x2000137e
 8008588:	2000137c 	.word	0x2000137c

0800858c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00e      	beq.n	80085b8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085ac:	2300      	movs	r3, #0
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f850 	bl	8008658 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085ca:	2301      	movs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6939      	ldr	r1, [r7, #16]
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f7ff fee9 	bl	80083b0 <xQueueGenericCreate>
 80085de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ffd3 	bl	800858c <prvInitialiseMutex>

		return xNewQueue;
 80085e6:	68fb      	ldr	r3, [r7, #12]
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d90a      	bls.n	8008634 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008634:	2202      	movs	r2, #2
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff feb9 	bl	80083b0 <xQueueGenericCreate>
 800863e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800864c:	697b      	ldr	r3, [r7, #20]
	}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008658:	b5b0      	push	{r4, r5, r7, lr}
 800865a:	b08e      	sub	sp, #56	; 0x38
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <xQueueGenericSend+0x32>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d103      	bne.n	8008698 <xQueueGenericSend+0x40>
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <xQueueGenericSend+0x44>
 8008698:	2301      	movs	r3, #1
 800869a:	e000      	b.n	800869e <xQueueGenericSend+0x46>
 800869c:	2300      	movs	r3, #0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <xQueueGenericSend+0x60>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d103      	bne.n	80086c6 <xQueueGenericSend+0x6e>
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <xQueueGenericSend+0x72>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueGenericSend+0x74>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086e6:	f001 fe1b 	bl	800a320 <xTaskGetSchedulerState>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <xQueueGenericSend+0x9e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <xQueueGenericSend+0xa2>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueGenericSend+0xa4>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <xQueueGenericSend+0xbe>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	61fb      	str	r3, [r7, #28]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008716:	f002 fa45 	bl	800aba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008722:	429a      	cmp	r2, r3
 8008724:	d303      	bcc.n	800872e <xQueueGenericSend+0xd6>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b02      	cmp	r3, #2
 800872a:	f040 8084 	bne.w	8008836 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 800872e:	f7fa fa41 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008732:	4603      	mov	r3, r0
 8008734:	4618      	mov	r0, r3
 8008736:	f7fa f975 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	4ba6      	ldr	r3, [pc, #664]	; (80089d8 <xQueueGenericSend+0x380>)
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	4013      	ands	r3, r2
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02a      	beq.n	80087a0 <xQueueGenericSend+0x148>
 800874a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800874c:	f7fa f9b1 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008750:	4603      	mov	r3, r0
 8008752:	461a      	mov	r2, r3
 8008754:	4ba0      	ldr	r3, [pc, #640]	; (80089d8 <xQueueGenericSend+0x380>)
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	4013      	ands	r3, r2
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01f      	beq.n	80087a0 <xQueueGenericSend+0x148>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10a      	bne.n	800877c <xQueueGenericSend+0x124>
 8008766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008768:	f7fa f943 	bl	80029f2 <prvTraceGetQueueType>
 800876c:	4603      	mov	r3, r0
 800876e:	461a      	mov	r2, r3
 8008770:	4b9a      	ldr	r3, [pc, #616]	; (80089dc <xQueueGenericSend+0x384>)
 8008772:	5c9b      	ldrb	r3, [r3, r2]
 8008774:	3320      	adds	r3, #32
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461d      	mov	r5, r3
 800877a:	e000      	b.n	800877e <xQueueGenericSend+0x126>
 800877c:	2525      	movs	r5, #37	; 0x25
 800877e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008780:	f7fa f937 	bl	80029f2 <prvTraceGetQueueType>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	4b94      	ldr	r3, [pc, #592]	; (80089dc <xQueueGenericSend+0x384>)
 800878a:	5c9c      	ldrb	r4, [r3, r2]
 800878c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800878e:	f7fa f983 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008792:	4603      	mov	r3, r0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	461a      	mov	r2, r3
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f7fa ff1c 	bl	80035d8 <prvTraceStoreKernelCall>
 80087a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087a2:	f7fa f926 	bl	80029f2 <prvTraceGetQueueType>
 80087a6:	4603      	mov	r3, r0
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b8c      	ldr	r3, [pc, #560]	; (80089dc <xQueueGenericSend+0x384>)
 80087ac:	5c9c      	ldrb	r4, [r3, r2]
 80087ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b0:	f7fa f972 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 80087b4:	4603      	mov	r3, r0
 80087b6:	b2dd      	uxtb	r5, r3
 80087b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ba:	f7fa f91a 	bl	80029f2 <prvTraceGetQueueType>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b86      	ldr	r3, [pc, #536]	; (80089dc <xQueueGenericSend+0x384>)
 80087c4:	5c9b      	ldrb	r3, [r3, r2]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d005      	beq.n	80087d6 <xQueueGenericSend+0x17e>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	3301      	adds	r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	e000      	b.n	80087d8 <xQueueGenericSend+0x180>
 80087d6:	2300      	movs	r3, #0
 80087d8:	461a      	mov	r2, r3
 80087da:	4629      	mov	r1, r5
 80087dc:	4620      	mov	r0, r4
 80087de:	f7fb f8fd 	bl	80039dc <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e8:	f000 fbb5 	bl	8008f56 <prvCopyDataToQueue>
 80087ec:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d010      	beq.n	8008818 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fb0a 	bl	8009e14 <xTaskRemoveFromEventList>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008806:	4b76      	ldr	r3, [pc, #472]	; (80089e0 <xQueueGenericSend+0x388>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	e00a      	b.n	800882e <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800881e:	4b70      	ldr	r3, [pc, #448]	; (80089e0 <xQueueGenericSend+0x388>)
 8008820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800882e:	f002 f9d3 	bl	800abd8 <vPortExitCritical>
				return pdPASS;
 8008832:	2301      	movs	r3, #1
 8008834:	e115      	b.n	8008a62 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d13c      	bne.n	80088b6 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800883c:	f002 f9cc 	bl	800abd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008840:	f7fa f9b8 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008844:	4603      	mov	r3, r0
 8008846:	4618      	mov	r0, r3
 8008848:	f7fa f8ec 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	4b61      	ldr	r3, [pc, #388]	; (80089d8 <xQueueGenericSend+0x380>)
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	4013      	ands	r3, r2
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d02a      	beq.n	80088b2 <xQueueGenericSend+0x25a>
 800885c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800885e:	f7fa f928 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	4b5c      	ldr	r3, [pc, #368]	; (80089d8 <xQueueGenericSend+0x380>)
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	4013      	ands	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01f      	beq.n	80088b2 <xQueueGenericSend+0x25a>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <xQueueGenericSend+0x236>
 8008878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800887a:	f7fa f8ba 	bl	80029f2 <prvTraceGetQueueType>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	4b56      	ldr	r3, [pc, #344]	; (80089dc <xQueueGenericSend+0x384>)
 8008884:	5c9b      	ldrb	r3, [r3, r2]
 8008886:	3348      	adds	r3, #72	; 0x48
 8008888:	b2db      	uxtb	r3, r3
 800888a:	461d      	mov	r5, r3
 800888c:	e000      	b.n	8008890 <xQueueGenericSend+0x238>
 800888e:	254d      	movs	r5, #77	; 0x4d
 8008890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008892:	f7fa f8ae 	bl	80029f2 <prvTraceGetQueueType>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	4b50      	ldr	r3, [pc, #320]	; (80089dc <xQueueGenericSend+0x384>)
 800889c:	5c9c      	ldrb	r4, [r3, r2]
 800889e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a0:	f7fa f8fa 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	4621      	mov	r1, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7fa fe93 	bl	80035d8 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e0d5      	b.n	8008a62 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fb95 	bl	8009ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088c6:	2301      	movs	r3, #1
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088ca:	f002 f985 	bl	800abd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ce:	f001 f80b 	bl	80098e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088d2:	f002 f967 	bl	800aba4 <vPortEnterCritical>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088dc:	b25b      	sxtb	r3, r3
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d103      	bne.n	80088ec <xQueueGenericSend+0x294>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d103      	bne.n	8008902 <xQueueGenericSend+0x2aa>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008902:	f002 f969 	bl	800abd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008906:	1d3a      	adds	r2, r7, #4
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fb84 	bl	800a01c <xTaskCheckForTimeOut>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d164      	bne.n	80089e4 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800891a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891c:	f000 fbed 	bl	80090fa <prvIsQueueFull>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d051      	beq.n	80089ca <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008926:	f7fa f945 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 800892a:	4603      	mov	r3, r0
 800892c:	4618      	mov	r0, r3
 800892e:	f7fa f879 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <xQueueGenericSend+0x380>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	4013      	ands	r3, r2
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d02a      	beq.n	8008998 <xQueueGenericSend+0x340>
 8008942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008944:	f7fa f8b5 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	4b22      	ldr	r3, [pc, #136]	; (80089d8 <xQueueGenericSend+0x380>)
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	4013      	ands	r3, r2
 8008952:	b29b      	uxth	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01f      	beq.n	8008998 <xQueueGenericSend+0x340>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <xQueueGenericSend+0x31c>
 800895e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008960:	f7fa f847 	bl	80029f2 <prvTraceGetQueueType>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <xQueueGenericSend+0x384>)
 800896a:	5c9b      	ldrb	r3, [r3, r2]
 800896c:	3370      	adds	r3, #112	; 0x70
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461d      	mov	r5, r3
 8008972:	e000      	b.n	8008976 <xQueueGenericSend+0x31e>
 8008974:	2575      	movs	r5, #117	; 0x75
 8008976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008978:	f7fa f83b 	bl	80029f2 <prvTraceGetQueueType>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <xQueueGenericSend+0x384>)
 8008982:	5c9c      	ldrb	r4, [r3, r2]
 8008984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008986:	f7fa f887 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 800898a:	4603      	mov	r3, r0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f7fa fe20 	bl	80035d8 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	3310      	adds	r3, #16
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 f9d7 	bl	8009d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a8:	f000 fb3f 	bl	800902a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089ac:	f000 ffaa 	bl	8009904 <xTaskResumeAll>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f47f aeaf 	bne.w	8008716 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <xQueueGenericSend+0x388>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	e6a5      	b.n	8008716 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089cc:	f000 fb2d 	bl	800902a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d0:	f000 ff98 	bl	8009904 <xTaskResumeAll>
 80089d4:	e69f      	b.n	8008716 <xQueueGenericSend+0xbe>
 80089d6:	bf00      	nop
 80089d8:	2000137c 	.word	0x2000137c
 80089dc:	20000004 	.word	0x20000004
 80089e0:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e6:	f000 fb20 	bl	800902a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ea:	f000 ff8b 	bl	8009904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80089ee:	f7fa f8e1 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 80089f2:	4603      	mov	r3, r0
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fa f815 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 80089fa:	4603      	mov	r3, r0
 80089fc:	461a      	mov	r2, r3
 80089fe:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <xQueueGenericSend+0x414>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	4013      	ands	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02a      	beq.n	8008a60 <xQueueGenericSend+0x408>
 8008a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a0c:	f7fa f851 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <xQueueGenericSend+0x414>)
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01f      	beq.n	8008a60 <xQueueGenericSend+0x408>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <xQueueGenericSend+0x3e4>
 8008a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a28:	f7f9 ffe3 	bl	80029f2 <prvTraceGetQueueType>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <xQueueGenericSend+0x418>)
 8008a32:	5c9b      	ldrb	r3, [r3, r2]
 8008a34:	3348      	adds	r3, #72	; 0x48
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	461d      	mov	r5, r3
 8008a3a:	e000      	b.n	8008a3e <xQueueGenericSend+0x3e6>
 8008a3c:	254d      	movs	r5, #77	; 0x4d
 8008a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a40:	f7f9 ffd7 	bl	80029f2 <prvTraceGetQueueType>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <xQueueGenericSend+0x418>)
 8008a4a:	5c9c      	ldrb	r4, [r3, r2]
 8008a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a4e:	f7fa f823 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008a52:	4603      	mov	r3, r0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7fa fdbc 	bl	80035d8 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8008a60:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3738      	adds	r7, #56	; 0x38
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bdb0      	pop	{r4, r5, r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	2000137c 	.word	0x2000137c
 8008a70:	20000004 	.word	0x20000004

08008a74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a74:	b5b0      	push	{r4, r5, r7, lr}
 8008a76:	b08e      	sub	sp, #56	; 0x38
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	623b      	str	r3, [r7, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ac4:	f001 fc2c 	bl	800a320 <xTaskGetSchedulerState>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d102      	bne.n	8008ad4 <xQueueSemaphoreTake+0x60>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <xQueueSemaphoreTake+0x64>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <xQueueSemaphoreTake+0x66>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	61bb      	str	r3, [r7, #24]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008af4:	f002 f856 	bl	800aba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8081 	beq.w	8008c08 <xQueueSemaphoreTake+0x194>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8008b06:	f7fa f855 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7f9 ff89 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b61      	ldr	r3, [pc, #388]	; (8008c9c <xQueueSemaphoreTake+0x228>)
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d025      	beq.n	8008b6e <xQueueSemaphoreTake+0xfa>
 8008b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b24:	f7f9 ffc5 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4b5b      	ldr	r3, [pc, #364]	; (8008c9c <xQueueSemaphoreTake+0x228>)
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	4013      	ands	r3, r2
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01a      	beq.n	8008b6e <xQueueSemaphoreTake+0xfa>
 8008b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3a:	f7f9 ff5a 	bl	80029f2 <prvTraceGetQueueType>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b57      	ldr	r3, [pc, #348]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008b44:	5c9b      	ldrb	r3, [r3, r2]
 8008b46:	3328      	adds	r3, #40	; 0x28
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	461d      	mov	r5, r3
 8008b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4e:	f7f9 ff50 	bl	80029f2 <prvTraceGetQueueType>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b52      	ldr	r3, [pc, #328]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008b58:	5c9c      	ldrb	r4, [r3, r2]
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5c:	f7f9 ff9c 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008b60:	4603      	mov	r3, r0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	4621      	mov	r1, r4
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f7fa fd35 	bl	80035d8 <prvTraceStoreKernelCall>
 8008b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b70:	f7f9 ff3f 	bl	80029f2 <prvTraceGetQueueType>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	4b49      	ldr	r3, [pc, #292]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008b7a:	5c9c      	ldrb	r4, [r3, r2]
 8008b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7e:	f7f9 ff8b 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008b82:	4603      	mov	r3, r0
 8008b84:	b2dd      	uxtb	r5, r3
 8008b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b88:	f7f9 ff33 	bl	80029f2 <prvTraceGetQueueType>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b43      	ldr	r3, [pc, #268]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008b92:	5c9b      	ldrb	r3, [r3, r2]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d108      	bne.n	8008baa <xQueueSemaphoreTake+0x136>
 8008b98:	f7fa f80c 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f9 ff33 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	e004      	b.n	8008bb4 <xQueueSemaphoreTake+0x140>
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7fa ff0f 	bl	80039dc <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <xQueueSemaphoreTake+0x164>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bce:	f001 fe31 	bl	800a834 <pvTaskIncrementMutexHeldCount>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00f      	beq.n	8008c00 <xQueueSemaphoreTake+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	3310      	adds	r3, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f915 	bl	8009e14 <xTaskRemoveFromEventList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <xQueueSemaphoreTake+0x18c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bf0:	4b2c      	ldr	r3, [pc, #176]	; (8008ca4 <xQueueSemaphoreTake+0x230>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c00:	f001 ffea 	bl	800abd8 <vPortExitCritical>
				return pdPASS;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e15d      	b.n	8008ec4 <xQueueSemaphoreTake+0x450>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d14c      	bne.n	8008ca8 <xQueueSemaphoreTake+0x234>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00a      	beq.n	8008c2a <xQueueSemaphoreTake+0x1b6>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	617b      	str	r3, [r7, #20]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueSemaphoreTake+0x1b4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c2a:	f001 ffd5 	bl	800abd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008c2e:	f7f9 ffc1 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008c32:	4603      	mov	r3, r0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f9 fef5 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <xQueueSemaphoreTake+0x228>)
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	4013      	ands	r3, r2
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d025      	beq.n	8008c96 <xQueueSemaphoreTake+0x222>
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f7f9 ff31 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <xQueueSemaphoreTake+0x228>)
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <xQueueSemaphoreTake+0x222>
 8008c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c62:	f7f9 fec6 	bl	80029f2 <prvTraceGetQueueType>
 8008c66:	4603      	mov	r3, r0
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008c6c:	5c9b      	ldrb	r3, [r3, r2]
 8008c6e:	3350      	adds	r3, #80	; 0x50
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461d      	mov	r5, r3
 8008c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c76:	f7f9 febc 	bl	80029f2 <prvTraceGetQueueType>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <xQueueSemaphoreTake+0x22c>)
 8008c80:	5c9c      	ldrb	r4, [r3, r2]
 8008c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c84:	f7f9 ff08 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7fa fca1 	bl	80035d8 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e114      	b.n	8008ec4 <xQueueSemaphoreTake+0x450>
 8008c9a:	bf00      	nop
 8008c9c:	2000137c 	.word	0x2000137c
 8008ca0:	20000004 	.word	0x20000004
 8008ca4:	e000ed04 	.word	0xe000ed04
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <xQueueSemaphoreTake+0x248>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 f99c 	bl	8009ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cbc:	f001 ff8c 	bl	800abd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cc0:	f000 fe12 	bl	80098e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cc4:	f001 ff6e 	bl	800aba4 <vPortEnterCritical>
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d103      	bne.n	8008cde <xQueueSemaphoreTake+0x26a>
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cea:	d103      	bne.n	8008cf4 <xQueueSemaphoreTake+0x280>
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf4:	f001 ff70 	bl	800abd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cf8:	463a      	mov	r2, r7
 8008cfa:	f107 030c 	add.w	r3, r7, #12
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 f98b 	bl	800a01c <xTaskCheckForTimeOut>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 8089 	bne.w	8008e20 <xQueueSemaphoreTake+0x3ac>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d10:	f000 f9dd 	bl	80090ce <prvIsQueueEmpty>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d07c      	beq.n	8008e14 <xQueueSemaphoreTake+0x3a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8008d1a:	f7f9 ff4b 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7f9 fe7f 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008d26:	4603      	mov	r3, r0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b68      	ldr	r3, [pc, #416]	; (8008ecc <xQueueSemaphoreTake+0x458>)
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	4013      	ands	r3, r2
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d025      	beq.n	8008d82 <xQueueSemaphoreTake+0x30e>
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	f7f9 febb 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4b62      	ldr	r3, [pc, #392]	; (8008ecc <xQueueSemaphoreTake+0x458>)
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	4013      	ands	r3, r2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01a      	beq.n	8008d82 <xQueueSemaphoreTake+0x30e>
 8008d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4e:	f7f9 fe50 	bl	80029f2 <prvTraceGetQueueType>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	4b5e      	ldr	r3, [pc, #376]	; (8008ed0 <xQueueSemaphoreTake+0x45c>)
 8008d58:	5c9b      	ldrb	r3, [r3, r2]
 8008d5a:	3368      	adds	r3, #104	; 0x68
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	461d      	mov	r5, r3
 8008d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d62:	f7f9 fe46 	bl	80029f2 <prvTraceGetQueueType>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b59      	ldr	r3, [pc, #356]	; (8008ed0 <xQueueSemaphoreTake+0x45c>)
 8008d6c:	5c9c      	ldrb	r4, [r3, r2]
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d70:	f7f9 fe92 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008d74:	4603      	mov	r3, r0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7fa fc2b 	bl	80035d8 <prvTraceStoreKernelCall>
 8008d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d84:	f7f9 fe35 	bl	80029f2 <prvTraceGetQueueType>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b50      	ldr	r3, [pc, #320]	; (8008ed0 <xQueueSemaphoreTake+0x45c>)
 8008d8e:	5c9b      	ldrb	r3, [r3, r2]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d018      	beq.n	8008dc6 <xQueueSemaphoreTake+0x352>
 8008d94:	f7f9 ff0e 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f9 fe42 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008da0:	4603      	mov	r3, r0
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b49      	ldr	r3, [pc, #292]	; (8008ecc <xQueueSemaphoreTake+0x458>)
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	4013      	ands	r3, r2
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <xQueueSemaphoreTake+0x352>
 8008db0:	f7f9 ff00 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008db4:	4603      	mov	r3, r0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f9 fe27 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fa fe51 	bl	8003a68 <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <xQueueSemaphoreTake+0x36e>
					{
						taskENTER_CRITICAL();
 8008dce:	f001 fee9 	bl	800aba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fac0 	bl	800a35c <xTaskPriorityInherit>
 8008ddc:	6278      	str	r0, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8008dde:	f001 fefb 	bl	800abd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 ffb2 	bl	8009d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df2:	f000 f91a 	bl	800902a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008df6:	f000 fd85 	bl	8009904 <xTaskResumeAll>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f47f ae79 	bne.w	8008af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008e02:	4b34      	ldr	r3, [pc, #208]	; (8008ed4 <xQueueSemaphoreTake+0x460>)
 8008e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	e66f      	b.n	8008af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e16:	f000 f908 	bl	800902a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e1a:	f000 fd73 	bl	8009904 <xTaskResumeAll>
 8008e1e:	e669      	b.n	8008af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e22:	f000 f902 	bl	800902a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e26:	f000 fd6d 	bl	8009904 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e2c:	f000 f94f 	bl	80090ce <prvIsQueueEmpty>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f43f ae5e 	beq.w	8008af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <xQueueSemaphoreTake+0x3e6>
					{
						taskENTER_CRITICAL();
 8008e3e:	f001 feb1 	bl	800aba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e44:	f000 f86f 	bl	8008f26 <prvGetDisinheritPriorityAfterTimeout>
 8008e48:	6378      	str	r0, [r7, #52]	; 0x34
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 fc05 	bl	800a660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e56:	f001 febf 	bl	800abd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008e5a:	f7f9 feab 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f9 fddf 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <xQueueSemaphoreTake+0x458>)
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d025      	beq.n	8008ec2 <xQueueSemaphoreTake+0x44e>
 8008e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e78:	f7f9 fe1b 	bl	8002ab2 <prvTraceGetQueueNumberHigh16>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <xQueueSemaphoreTake+0x458>)
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	4013      	ands	r3, r2
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01a      	beq.n	8008ec2 <xQueueSemaphoreTake+0x44e>
 8008e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e8e:	f7f9 fdb0 	bl	80029f2 <prvTraceGetQueueType>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <xQueueSemaphoreTake+0x45c>)
 8008e98:	5c9b      	ldrb	r3, [r3, r2]
 8008e9a:	3350      	adds	r3, #80	; 0x50
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea2:	f7f9 fda6 	bl	80029f2 <prvTraceGetQueueType>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <xQueueSemaphoreTake+0x45c>)
 8008eac:	5c9c      	ldrb	r4, [r3, r2]
 8008eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eb0:	f7f9 fdf2 	bl	8002a98 <prvTraceGetQueueNumberLow16>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7fa fb8b 	bl	80035d8 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8008ec2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3738      	adds	r7, #56	; 0x38
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bdb0      	pop	{r4, r5, r7, pc}
 8008ecc:	2000137c 	.word	0x2000137c
 8008ed0:	20000004 	.word	0x20000004
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f26:	b480      	push	{r7}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f1c3 0307 	rsb	r3, r3, #7
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e001      	b.n	8008f48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f48:	68fb      	ldr	r3, [r7, #12]
	}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10d      	bne.n	8008f90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d14d      	bne.n	8009018 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 faa5 	bl	800a4d0 <xTaskPriorityDisinherit>
 8008f86:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
 8008f8e:	e043      	b.n	8009018 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d119      	bne.n	8008fca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6858      	ldr	r0, [r3, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	f002 f9ee 	bl	800b382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	441a      	add	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d32b      	bcc.n	8009018 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	e026      	b.n	8009018 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68d8      	ldr	r0, [r3, #12]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	f002 f9d4 	bl	800b382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	425b      	negs	r3, r3
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d207      	bcs.n	8009006 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	425b      	negs	r3, r3
 8009000:	441a      	add	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d105      	bne.n	8009018 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3b01      	subs	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009020:	697b      	ldr	r3, [r7, #20]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009032:	f001 fdb7 	bl	800aba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800903c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800903e:	e011      	b.n	8009064 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d012      	beq.n	800906e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fee1 	bl	8009e14 <xTaskRemoveFromEventList>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009058:	f001 f842 	bl	800a0e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	3b01      	subs	r3, #1
 8009060:	b2db      	uxtb	r3, r3
 8009062:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009068:	2b00      	cmp	r3, #0
 800906a:	dce9      	bgt.n	8009040 <prvUnlockQueue+0x16>
 800906c:	e000      	b.n	8009070 <prvUnlockQueue+0x46>
					break;
 800906e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	22ff      	movs	r2, #255	; 0xff
 8009074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009078:	f001 fdae 	bl	800abd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800907c:	f001 fd92 	bl	800aba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009086:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009088:	e011      	b.n	80090ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d012      	beq.n	80090b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3310      	adds	r3, #16
 8009096:	4618      	mov	r0, r3
 8009098:	f000 febc 	bl	8009e14 <xTaskRemoveFromEventList>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090a2:	f001 f81d 	bl	800a0e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	dce9      	bgt.n	800908a <prvUnlockQueue+0x60>
 80090b6:	e000      	b.n	80090ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	22ff      	movs	r2, #255	; 0xff
 80090be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090c2:	f001 fd89 	bl	800abd8 <vPortExitCritical>
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090d6:	f001 fd65 	bl	800aba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e001      	b.n	80090ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ec:	f001 fd74 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 80090f0:	68fb      	ldr	r3, [r7, #12]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009102:	f001 fd4f 	bl	800aba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e001      	b.n	800911c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800911c:	f001 fd5c 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800912a:	b580      	push	{r7, lr}
 800912c:	b08e      	sub	sp, #56	; 0x38
 800912e:	af04      	add	r7, sp, #16
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
 8009136:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <xTaskCreateStatic+0x2a>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	623b      	str	r3, [r7, #32]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10a      	bne.n	8009170 <xTaskCreateStatic+0x46>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	61fb      	str	r3, [r7, #28]
}
 800916c:	bf00      	nop
 800916e:	e7fe      	b.n	800916e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009170:	23bc      	movs	r3, #188	; 0xbc
 8009172:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2bbc      	cmp	r3, #188	; 0xbc
 8009178:	d00a      	beq.n	8009190 <xTaskCreateStatic+0x66>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	61bb      	str	r3, [r7, #24]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009190:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01e      	beq.n	80091d6 <xTaskCreateStatic+0xac>
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01b      	beq.n	80091d6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091b0:	2300      	movs	r3, #0
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	f107 0314 	add.w	r3, r7, #20
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f851 	bl	8009270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091d0:	f000 f8f4 	bl	80093bc <prvAddNewTaskToReadyList>
 80091d4:	e001      	b.n	80091da <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091da:	697b      	ldr	r3, [r7, #20]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3728      	adds	r7, #40	; 0x28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	; 0x30
 80091e8:	af04      	add	r7, sp, #16
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 fd9d 	bl	800ad38 <pvPortMalloc>
 80091fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00e      	beq.n	8009224 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009206:	20bc      	movs	r0, #188	; 0xbc
 8009208:	f001 fd96 	bl	800ad38 <pvPortMalloc>
 800920c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	631a      	str	r2, [r3, #48]	; 0x30
 800921a:	e005      	b.n	8009228 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800921c:	6978      	ldr	r0, [r7, #20]
 800921e:	f001 fe67 	bl	800aef0 <vPortFree>
 8009222:	e001      	b.n	8009228 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	2300      	movs	r3, #0
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f80f 	bl	8009270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009252:	69f8      	ldr	r0, [r7, #28]
 8009254:	f000 f8b2 	bl	80093bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009258:	2301      	movs	r3, #1
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	e002      	b.n	8009264 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009264:	69bb      	ldr	r3, [r7, #24]
	}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	461a      	mov	r2, r3
 8009288:	21a5      	movs	r1, #165	; 0xa5
 800928a:	f002 f888 	bl	800b39e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009298:	3b01      	subs	r3, #1
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	f023 0307 	bic.w	r3, r3, #7
 80092a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f003 0307 	and.w	r3, r3, #7
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	617b      	str	r3, [r7, #20]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01f      	beq.n	800930e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e012      	b.n	80092fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	7819      	ldrb	r1, [r3, #0]
 80092dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	3334      	adds	r3, #52	; 0x34
 80092e4:	460a      	mov	r2, r1
 80092e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b0f      	cmp	r3, #15
 80092fe:	d9e9      	bls.n	80092d4 <prvInitialiseNewTask+0x64>
 8009300:	e000      	b.n	8009304 <prvInitialiseNewTask+0x94>
			{
				break;
 8009302:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800930c:	e003      	b.n	8009316 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	2b06      	cmp	r3, #6
 800931a:	d901      	bls.n	8009320 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800931c:	2306      	movs	r3, #6
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	2200      	movs	r2, #0
 8009330:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	3304      	adds	r3, #4
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe ff3e 	bl	80081b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	3318      	adds	r3, #24
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe ff39 	bl	80081b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	f1c3 0207 	rsb	r2, r3, #7
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	2200      	movs	r2, #0
 8009368:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	3354      	adds	r3, #84	; 0x54
 8009370:	2260      	movs	r2, #96	; 0x60
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 f812 	bl	800b39e <memset>
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <prvInitialiseNewTask+0x140>)
 800937e:	659a      	str	r2, [r3, #88]	; 0x58
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	4a0c      	ldr	r2, [pc, #48]	; (80093b4 <prvInitialiseNewTask+0x144>)
 8009384:	65da      	str	r2, [r3, #92]	; 0x5c
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <prvInitialiseNewTask+0x148>)
 800938a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	69b8      	ldr	r0, [r7, #24]
 8009392:	f001 fac9 	bl	800a928 <pxPortInitialiseStack>
 8009396:	4602      	mov	r2, r0
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093a8:	bf00      	nop
 80093aa:	3720      	adds	r7, #32
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	0800f07c 	.word	0x0800f07c
 80093b4:	0800f09c 	.word	0x0800f09c
 80093b8:	0800f05c 	.word	0x0800f05c

080093bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093c4:	f001 fbee 	bl	800aba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093c8:	4b67      	ldr	r3, [pc, #412]	; (8009568 <prvAddNewTaskToReadyList+0x1ac>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3301      	adds	r3, #1
 80093ce:	4a66      	ldr	r2, [pc, #408]	; (8009568 <prvAddNewTaskToReadyList+0x1ac>)
 80093d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093d2:	4b66      	ldr	r3, [pc, #408]	; (800956c <prvAddNewTaskToReadyList+0x1b0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093da:	4a64      	ldr	r2, [pc, #400]	; (800956c <prvAddNewTaskToReadyList+0x1b0>)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093e0:	4b61      	ldr	r3, [pc, #388]	; (8009568 <prvAddNewTaskToReadyList+0x1ac>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d110      	bne.n	800940a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093e8:	f000 fec8 	bl	800a17c <prvInitialiseTaskLists>
 80093ec:	e00d      	b.n	800940a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ee:	4b60      	ldr	r3, [pc, #384]	; (8009570 <prvAddNewTaskToReadyList+0x1b4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093f6:	4b5d      	ldr	r3, [pc, #372]	; (800956c <prvAddNewTaskToReadyList+0x1b0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	429a      	cmp	r2, r3
 8009402:	d802      	bhi.n	800940a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009404:	4a59      	ldr	r2, [pc, #356]	; (800956c <prvAddNewTaskToReadyList+0x1b0>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800940a:	4b5a      	ldr	r3, [pc, #360]	; (8009574 <prvAddNewTaskToReadyList+0x1b8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	4a58      	ldr	r2, [pc, #352]	; (8009574 <prvAddNewTaskToReadyList+0x1b8>)
 8009412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009414:	4b57      	ldr	r3, [pc, #348]	; (8009574 <prvAddNewTaskToReadyList+0x1b8>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d05f      	beq.n	80094e2 <prvAddNewTaskToReadyList+0x126>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d049      	beq.n	80094bc <prvAddNewTaskToReadyList+0x100>
 8009428:	2003      	movs	r0, #3
 800942a:	f7fa fb9b 	bl	8003b64 <prvTraceGetObjectHandle>
 800942e:	4603      	mov	r3, r0
 8009430:	b29b      	uxth	r3, r3
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7f9 fb03 	bl	8002a40 <prvTraceSetTaskNumberLow16>
 800943a:	4b4f      	ldr	r3, [pc, #316]	; (8009578 <prvAddNewTaskToReadyList+0x1bc>)
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7f9 fb13 	bl	8002a6c <prvTraceSetTaskNumberHigh16>
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7f9 fadf 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800944c:	4603      	mov	r3, r0
 800944e:	b2d9      	uxtb	r1, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3334      	adds	r3, #52	; 0x34
 8009454:	461a      	mov	r2, r3
 8009456:	2003      	movs	r0, #3
 8009458:	f7fa fc60 	bl	8003d1c <prvTraceSetObjectName>
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7f9 fad4 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009462:	4603      	mov	r3, r0
 8009464:	b2d9      	uxtb	r1, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	b2db      	uxtb	r3, r3
 800946c:	461a      	mov	r2, r3
 800946e:	2003      	movs	r0, #3
 8009470:	f7fa fa6a 	bl	8003948 <prvTraceSetPriorityProperty>
 8009474:	f7f9 fb9e 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009478:	4603      	mov	r3, r0
 800947a:	4618      	mov	r0, r3
 800947c:	f7f9 fad2 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	4b3d      	ldr	r3, [pc, #244]	; (800957c <prvAddNewTaskToReadyList+0x1c0>)
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	4013      	ands	r3, r2
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d028      	beq.n	80094e2 <prvAddNewTaskToReadyList+0x126>
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7f9 fac7 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <prvAddNewTaskToReadyList+0x1c0>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	4013      	ands	r3, r2
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01d      	beq.n	80094e2 <prvAddNewTaskToReadyList+0x126>
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7f9 faaf 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 80094ac:	4603      	mov	r3, r0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	2103      	movs	r1, #3
 80094b4:	201b      	movs	r0, #27
 80094b6:	f7fa f88f 	bl	80035d8 <prvTraceStoreKernelCall>
 80094ba:	e012      	b.n	80094e2 <prvAddNewTaskToReadyList+0x126>
 80094bc:	f7f9 fb7a 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 80094c0:	4603      	mov	r3, r0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f9 faae 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	4b2b      	ldr	r3, [pc, #172]	; (800957c <prvAddNewTaskToReadyList+0x1c0>)
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	4013      	ands	r3, r2
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <prvAddNewTaskToReadyList+0x126>
 80094d8:	2200      	movs	r2, #0
 80094da:	2103      	movs	r1, #3
 80094dc:	201b      	movs	r0, #27
 80094de:	f7fa f87b 	bl	80035d8 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7f9 fa9e 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	4b23      	ldr	r3, [pc, #140]	; (800957c <prvAddNewTaskToReadyList+0x1c0>)
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	4013      	ands	r3, r2
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <prvAddNewTaskToReadyList+0x14c>
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7f9 fa86 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 80094fe:	4603      	mov	r3, r0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4618      	mov	r0, r3
 8009504:	f7f9 ff74 	bl	80033f0 <prvTraceStoreTaskReady>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	2201      	movs	r2, #1
 800950e:	409a      	lsls	r2, r3
 8009510:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <prvAddNewTaskToReadyList+0x1c4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4313      	orrs	r3, r2
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <prvAddNewTaskToReadyList+0x1c4>)
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a17      	ldr	r2, [pc, #92]	; (8009584 <prvAddNewTaskToReadyList+0x1c8>)
 8009528:	441a      	add	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3304      	adds	r3, #4
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f7fe fe4e 	bl	80081d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009536:	f001 fb4f 	bl	800abd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800953a:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <prvAddNewTaskToReadyList+0x1b4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <prvAddNewTaskToReadyList+0x1a4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009542:	4b0a      	ldr	r3, [pc, #40]	; (800956c <prvAddNewTaskToReadyList+0x1b0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	429a      	cmp	r2, r3
 800954e:	d207      	bcs.n	8009560 <prvAddNewTaskToReadyList+0x1a4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <prvAddNewTaskToReadyList+0x1cc>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20009b98 	.word	0x20009b98
 800956c:	20009a98 	.word	0x20009a98
 8009570:	20009ba4 	.word	0x20009ba4
 8009574:	20009bb4 	.word	0x20009bb4
 8009578:	2000137e 	.word	0x2000137e
 800957c:	2000137c 	.word	0x2000137c
 8009580:	20009ba0 	.word	0x20009ba0
 8009584:	20009a9c 	.word	0x20009a9c
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08a      	sub	sp, #40	; 0x28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009596:	2300      	movs	r3, #0
 8009598:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	617b      	str	r3, [r7, #20]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	613b      	str	r3, [r7, #16]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80095d2:	4b44      	ldr	r3, [pc, #272]	; (80096e4 <vTaskDelayUntil+0x158>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	60fb      	str	r3, [r7, #12]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80095f0:	f000 f97a 	bl	80098e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80095f4:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <vTaskDelayUntil+0x15c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4413      	add	r3, r2
 8009602:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6a3a      	ldr	r2, [r7, #32]
 800960a:	429a      	cmp	r2, r3
 800960c:	d20b      	bcs.n	8009626 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	429a      	cmp	r2, r3
 8009616:	d211      	bcs.n	800963c <vTaskDelayUntil+0xb0>
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	429a      	cmp	r2, r3
 800961e:	d90d      	bls.n	800963c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
 8009624:	e00a      	b.n	800963c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	429a      	cmp	r2, r3
 800962e:	d303      	bcc.n	8009638 <vTaskDelayUntil+0xac>
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	429a      	cmp	r2, r3
 8009636:	d901      	bls.n	800963c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009638:	2301      	movs	r3, #1
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	2b00      	cmp	r3, #0
 8009646:	d03a      	beq.n	80096be <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8009648:	4b28      	ldr	r3, [pc, #160]	; (80096ec <vTaskDelayUntil+0x160>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f7f9 f9e9 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	4b26      	ldr	r3, [pc, #152]	; (80096f0 <vTaskDelayUntil+0x164>)
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	4013      	ands	r3, r2
 800965c:	b29b      	uxth	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00d      	beq.n	800967e <vTaskDelayUntil+0xf2>
 8009662:	69f9      	ldr	r1, [r7, #28]
 8009664:	2088      	movs	r0, #136	; 0x88
 8009666:	f7fa f8a9 	bl	80037bc <prvTraceStoreKernelCallWithNumericParamOnly>
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <vTaskDelayUntil+0x160>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f7f9 f9cb 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009674:	4603      	mov	r3, r0
 8009676:	b2db      	uxtb	r3, r3
 8009678:	4618      	mov	r0, r3
 800967a:	f7fa f9f5 	bl	8003a68 <prvTraceSetTaskInstanceFinished>
 800967e:	f7f9 fa99 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009682:	4603      	mov	r3, r0
 8009684:	4618      	mov	r0, r3
 8009686:	f7f9 f9cd 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <vTaskDelayUntil+0x164>)
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	4013      	ands	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <vTaskDelayUntil+0x124>
 800969a:	f7f9 fa8b 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 800969e:	4603      	mov	r3, r0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7f9 f9b2 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 80096a6:	4603      	mov	r3, r0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fa f9dc 	bl	8003a68 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	2100      	movs	r1, #0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 f8cf 	bl	800a85c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80096be:	f000 f921 	bl	8009904 <xTaskResumeAll>
 80096c2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d107      	bne.n	80096da <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 80096ca:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <vTaskDelayUntil+0x168>)
 80096cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096da:	bf00      	nop
 80096dc:	3728      	adds	r7, #40	; 0x28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20009bc0 	.word	0x20009bc0
 80096e8:	20009b9c 	.word	0x20009b9c
 80096ec:	20009a98 	.word	0x20009a98
 80096f0:	2000137c 	.word	0x2000137c
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d04b      	beq.n	80097a2 <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800970a:	4b2d      	ldr	r3, [pc, #180]	; (80097c0 <vTaskDelay+0xc8>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <vTaskDelay+0x30>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60bb      	str	r3, [r7, #8]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009728:	f000 f8de 	bl	80098e8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800972c:	4b25      	ldr	r3, [pc, #148]	; (80097c4 <vTaskDelay+0xcc>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f7f9 f977 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009736:	4603      	mov	r3, r0
 8009738:	461a      	mov	r2, r3
 800973a:	4b23      	ldr	r3, [pc, #140]	; (80097c8 <vTaskDelay+0xd0>)
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	4013      	ands	r3, r2
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00d      	beq.n	8009762 <vTaskDelay+0x6a>
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	2089      	movs	r0, #137	; 0x89
 800974a:	f7fa f837 	bl	80037bc <prvTraceStoreKernelCallWithNumericParamOnly>
 800974e:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <vTaskDelay+0xcc>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7f9 f959 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009758:	4603      	mov	r3, r0
 800975a:	b2db      	uxtb	r3, r3
 800975c:	4618      	mov	r0, r3
 800975e:	f7fa f983 	bl	8003a68 <prvTraceSetTaskInstanceFinished>
 8009762:	f7f9 fa27 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009766:	4603      	mov	r3, r0
 8009768:	4618      	mov	r0, r3
 800976a:	f7f9 f95b 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800976e:	4603      	mov	r3, r0
 8009770:	461a      	mov	r2, r3
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <vTaskDelay+0xd0>)
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	4013      	ands	r3, r2
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <vTaskDelay+0x9c>
 800977e:	f7f9 fa19 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009782:	4603      	mov	r3, r0
 8009784:	4618      	mov	r0, r3
 8009786:	f7f9 f940 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800978a:	4603      	mov	r3, r0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	4618      	mov	r0, r3
 8009790:	f7fa f96a 	bl	8003a68 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f860 	bl	800a85c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800979c:	f000 f8b2 	bl	8009904 <xTaskResumeAll>
 80097a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d107      	bne.n	80097b8 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 80097a8:	4b08      	ldr	r3, [pc, #32]	; (80097cc <vTaskDelay+0xd4>)
 80097aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097b8:	bf00      	nop
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20009bc0 	.word	0x20009bc0
 80097c4:	20009a98 	.word	0x20009a98
 80097c8:	2000137c 	.word	0x2000137c
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097de:	463a      	mov	r2, r7
 80097e0:	1d39      	adds	r1, r7, #4
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f7 fcc6 	bl	8001178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	9202      	str	r2, [sp, #8]
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	2300      	movs	r3, #0
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	2300      	movs	r3, #0
 80097fc:	460a      	mov	r2, r1
 80097fe:	4930      	ldr	r1, [pc, #192]	; (80098c0 <vTaskStartScheduler+0xf0>)
 8009800:	4830      	ldr	r0, [pc, #192]	; (80098c4 <vTaskStartScheduler+0xf4>)
 8009802:	f7ff fc92 	bl	800912a <xTaskCreateStatic>
 8009806:	4603      	mov	r3, r0
 8009808:	4a2f      	ldr	r2, [pc, #188]	; (80098c8 <vTaskStartScheduler+0xf8>)
 800980a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <vTaskStartScheduler+0xf8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009814:	2301      	movs	r3, #1
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e001      	b.n	800981e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d13a      	bne.n	800989a <vTaskStartScheduler+0xca>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	613b      	str	r3, [r7, #16]
}
 8009836:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009838:	4b24      	ldr	r3, [pc, #144]	; (80098cc <vTaskStartScheduler+0xfc>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3354      	adds	r3, #84	; 0x54
 800983e:	4a24      	ldr	r2, [pc, #144]	; (80098d0 <vTaskStartScheduler+0x100>)
 8009840:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009842:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <vTaskStartScheduler+0x104>)
 8009844:	f04f 32ff 	mov.w	r2, #4294967295
 8009848:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800984a:	4b23      	ldr	r3, [pc, #140]	; (80098d8 <vTaskStartScheduler+0x108>)
 800984c:	2201      	movs	r2, #1
 800984e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009850:	4b22      	ldr	r3, [pc, #136]	; (80098dc <vTaskStartScheduler+0x10c>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8009856:	4b22      	ldr	r3, [pc, #136]	; (80098e0 <vTaskStartScheduler+0x110>)
 8009858:	2201      	movs	r2, #1
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f7f9 f9aa 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009860:	4603      	mov	r3, r0
 8009862:	4618      	mov	r0, r3
 8009864:	f7f9 f8de 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <vTaskStartScheduler+0x114>)
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	4013      	ands	r3, r2
 8009872:	b29b      	uxth	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <vTaskStartScheduler+0xbe>
 8009878:	f7f9 f99c 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 800987c:	4603      	mov	r3, r0
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 f8c3 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009884:	4603      	mov	r3, r0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	4618      	mov	r0, r3
 800988a:	f7f9 fff3 	bl	8003874 <prvTraceStoreTaskswitch>
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <vTaskStartScheduler+0x110>)
 8009890:	2202      	movs	r2, #2
 8009892:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009894:	f001 f8d4 	bl	800aa40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009898:	e00e      	b.n	80098b8 <vTaskStartScheduler+0xe8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d10a      	bne.n	80098b8 <vTaskStartScheduler+0xe8>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60fb      	str	r3, [r7, #12]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <vTaskStartScheduler+0xe6>
}
 80098b8:	bf00      	nop
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	0800f034 	.word	0x0800f034
 80098c4:	0800a14d 	.word	0x0800a14d
 80098c8:	20009bbc 	.word	0x20009bbc
 80098cc:	20009a98 	.word	0x20009a98
 80098d0:	2000001c 	.word	0x2000001c
 80098d4:	20009bb8 	.word	0x20009bb8
 80098d8:	20009ba4 	.word	0x20009ba4
 80098dc:	20009b9c 	.word	0x20009b9c
 80098e0:	20001364 	.word	0x20001364
 80098e4:	2000137c 	.word	0x2000137c

080098e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <vTaskSuspendAll+0x18>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3301      	adds	r3, #1
 80098f2:	4a03      	ldr	r2, [pc, #12]	; (8009900 <vTaskSuspendAll+0x18>)
 80098f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098f6:	bf00      	nop
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20009bc0 	.word	0x20009bc0

08009904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800990e:	2300      	movs	r3, #0
 8009910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009912:	4b4b      	ldr	r3, [pc, #300]	; (8009a40 <xTaskResumeAll+0x13c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <xTaskResumeAll+0x2c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	603b      	str	r3, [r7, #0]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009930:	f001 f938 	bl	800aba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009934:	4b42      	ldr	r3, [pc, #264]	; (8009a40 <xTaskResumeAll+0x13c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3b01      	subs	r3, #1
 800993a:	4a41      	ldr	r2, [pc, #260]	; (8009a40 <xTaskResumeAll+0x13c>)
 800993c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993e:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <xTaskResumeAll+0x13c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d174      	bne.n	8009a30 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009946:	4b3f      	ldr	r3, [pc, #252]	; (8009a44 <xTaskResumeAll+0x140>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d070      	beq.n	8009a30 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800994e:	e041      	b.n	80099d4 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009950:	4b3d      	ldr	r3, [pc, #244]	; (8009a48 <xTaskResumeAll+0x144>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3318      	adds	r3, #24
 800995c:	4618      	mov	r0, r3
 800995e:	f7fe fc95 	bl	800828c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3304      	adds	r3, #4
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fc90 	bl	800828c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7f9 f859 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	4b35      	ldr	r3, [pc, #212]	; (8009a4c <xTaskResumeAll+0x148>)
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	4013      	ands	r3, r2
 800997c:	b29b      	uxth	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <xTaskResumeAll+0x8e>
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7f9 f841 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009988:	4603      	mov	r3, r0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f7f9 fd2f 	bl	80033f0 <prvTraceStoreTaskReady>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	2201      	movs	r2, #1
 8009998:	409a      	lsls	r2, r3
 800999a:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <xTaskResumeAll+0x14c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	4a2b      	ldr	r2, [pc, #172]	; (8009a50 <xTaskResumeAll+0x14c>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a28      	ldr	r2, [pc, #160]	; (8009a54 <xTaskResumeAll+0x150>)
 80099b2:	441a      	add	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fc09 	bl	80081d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <xTaskResumeAll+0x154>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d302      	bcc.n	80099d4 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 80099ce:	4b23      	ldr	r3, [pc, #140]	; (8009a5c <xTaskResumeAll+0x158>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d4:	4b1c      	ldr	r3, [pc, #112]	; (8009a48 <xTaskResumeAll+0x144>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1b9      	bne.n	8009950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099e2:	f000 fc6d 	bl	800a2c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099e6:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <xTaskResumeAll+0x15c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f000 f849 	bl	8009a88 <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 80099fc:	4b17      	ldr	r3, [pc, #92]	; (8009a5c <xTaskResumeAll+0x158>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f1      	bne.n	80099f2 <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 8009a0e:	4b14      	ldr	r3, [pc, #80]	; (8009a60 <xTaskResumeAll+0x15c>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <xTaskResumeAll+0x158>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d009      	beq.n	8009a30 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a20:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <xTaskResumeAll+0x160>)
 8009a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a30:	f001 f8d2 	bl	800abd8 <vPortExitCritical>

	return xAlreadyYielded;
 8009a34:	68bb      	ldr	r3, [r7, #8]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20009bc0 	.word	0x20009bc0
 8009a44:	20009b98 	.word	0x20009b98
 8009a48:	20009b58 	.word	0x20009b58
 8009a4c:	2000137c 	.word	0x2000137c
 8009a50:	20009ba0 	.word	0x20009ba0
 8009a54:	20009a9c 	.word	0x20009a9c
 8009a58:	20009a98 	.word	0x20009a98
 8009a5c:	20009bac 	.word	0x20009bac
 8009a60:	20009ba8 	.word	0x20009ba8
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <xTaskGetTickCount+0x1c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a74:	687b      	ldr	r3, [r7, #4]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	20009b9c 	.word	0x20009b9c

08009a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8009a92:	4b61      	ldr	r3, [pc, #388]	; (8009c18 <xTaskIncrementTick+0x190>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d003      	beq.n	8009aa2 <xTaskIncrementTick+0x1a>
 8009a9a:	4b60      	ldr	r3, [pc, #384]	; (8009c1c <xTaskIncrementTick+0x194>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d107      	bne.n	8009ab2 <xTaskIncrementTick+0x2a>
 8009aa2:	4b5f      	ldr	r3, [pc, #380]	; (8009c20 <xTaskIncrementTick+0x198>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	4a5d      	ldr	r2, [pc, #372]	; (8009c20 <xTaskIncrementTick+0x198>)
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7fa fcf1 	bl	8004494 <prvTracePortGetTimeStamp>
 8009ab2:	4b59      	ldr	r3, [pc, #356]	; (8009c18 <xTaskIncrementTick+0x190>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab6:	4b58      	ldr	r3, [pc, #352]	; (8009c18 <xTaskIncrementTick+0x190>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 80a1 	bne.w	8009c02 <xTaskIncrementTick+0x17a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ac0:	4b58      	ldr	r3, [pc, #352]	; (8009c24 <xTaskIncrementTick+0x19c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ac8:	4a56      	ldr	r2, [pc, #344]	; (8009c24 <xTaskIncrementTick+0x19c>)
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d120      	bne.n	8009b16 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ad4:	4b54      	ldr	r3, [pc, #336]	; (8009c28 <xTaskIncrementTick+0x1a0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <xTaskIncrementTick+0x6c>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	603b      	str	r3, [r7, #0]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <xTaskIncrementTick+0x6a>
 8009af4:	4b4c      	ldr	r3, [pc, #304]	; (8009c28 <xTaskIncrementTick+0x1a0>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <xTaskIncrementTick+0x1a4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a4a      	ldr	r2, [pc, #296]	; (8009c28 <xTaskIncrementTick+0x1a0>)
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4a4a      	ldr	r2, [pc, #296]	; (8009c2c <xTaskIncrementTick+0x1a4>)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	4b49      	ldr	r3, [pc, #292]	; (8009c30 <xTaskIncrementTick+0x1a8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	4a48      	ldr	r2, [pc, #288]	; (8009c30 <xTaskIncrementTick+0x1a8>)
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	f000 fbd5 	bl	800a2c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b16:	4b47      	ldr	r3, [pc, #284]	; (8009c34 <xTaskIncrementTick+0x1ac>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d35b      	bcc.n	8009bd8 <xTaskIncrementTick+0x150>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b20:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <xTaskIncrementTick+0x1a0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d104      	bne.n	8009b34 <xTaskIncrementTick+0xac>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b2a:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <xTaskIncrementTick+0x1ac>)
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b30:	601a      	str	r2, [r3, #0]
					break;
 8009b32:	e051      	b.n	8009bd8 <xTaskIncrementTick+0x150>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b34:	4b3c      	ldr	r3, [pc, #240]	; (8009c28 <xTaskIncrementTick+0x1a0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d203      	bcs.n	8009b54 <xTaskIncrementTick+0xcc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b4c:	4a39      	ldr	r2, [pc, #228]	; (8009c34 <xTaskIncrementTick+0x1ac>)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b52:	e041      	b.n	8009bd8 <xTaskIncrementTick+0x150>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fb97 	bl	800828c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3318      	adds	r3, #24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fb8e 	bl	800828c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b70:	68b8      	ldr	r0, [r7, #8]
 8009b72:	f7f8 ff57 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4b2f      	ldr	r3, [pc, #188]	; (8009c38 <xTaskIncrementTick+0x1b0>)
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <xTaskIncrementTick+0x10e>
 8009b86:	68b8      	ldr	r0, [r7, #8]
 8009b88:	f7f8 ff3f 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f9 fc2d 	bl	80033f0 <prvTraceStoreTaskReady>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	409a      	lsls	r2, r3
 8009b9e:	4b27      	ldr	r3, [pc, #156]	; (8009c3c <xTaskIncrementTick+0x1b4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	4a25      	ldr	r2, [pc, #148]	; (8009c3c <xTaskIncrementTick+0x1b4>)
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <xTaskIncrementTick+0x1b8>)
 8009bb6:	441a      	add	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f7fe fb07 	bl	80081d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <xTaskIncrementTick+0x1bc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d3a6      	bcc.n	8009b20 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bd6:	e7a3      	b.n	8009b20 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <xTaskIncrementTick+0x1bc>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bde:	4918      	ldr	r1, [pc, #96]	; (8009c40 <xTaskIncrementTick+0x1b8>)
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d901      	bls.n	8009bf4 <xTaskIncrementTick+0x16c>
			{
				xSwitchRequired = pdTRUE;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bf4:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <xTaskIncrementTick+0x1c0>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d007      	beq.n	8009c0c <xTaskIncrementTick+0x184>
			{
				xSwitchRequired = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e004      	b.n	8009c0c <xTaskIncrementTick+0x184>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <xTaskIncrementTick+0x194>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4a04      	ldr	r2, [pc, #16]	; (8009c1c <xTaskIncrementTick+0x194>)
 8009c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c0c:	697b      	ldr	r3, [r7, #20]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20009bc0 	.word	0x20009bc0
 8009c1c:	20009ba8 	.word	0x20009ba8
 8009c20:	20001358 	.word	0x20001358
 8009c24:	20009b9c 	.word	0x20009b9c
 8009c28:	20009b50 	.word	0x20009b50
 8009c2c:	20009b54 	.word	0x20009b54
 8009c30:	20009bb0 	.word	0x20009bb0
 8009c34:	20009bb8 	.word	0x20009bb8
 8009c38:	2000137c 	.word	0x2000137c
 8009c3c:	20009ba0 	.word	0x20009ba0
 8009c40:	20009a9c 	.word	0x20009a9c
 8009c44:	20009a98 	.word	0x20009a98
 8009c48:	20009bac 	.word	0x20009bac

08009c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c52:	4b38      	ldr	r3, [pc, #224]	; (8009d34 <vTaskSwitchContext+0xe8>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c5a:	4b37      	ldr	r3, [pc, #220]	; (8009d38 <vTaskSwitchContext+0xec>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c60:	e063      	b.n	8009d2a <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 8009c62:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <vTaskSwitchContext+0xec>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c68:	4b34      	ldr	r3, [pc, #208]	; (8009d3c <vTaskSwitchContext+0xf0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	fab3 f383 	clz	r3, r3
 8009c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	f1c3 031f 	rsb	r3, r3, #31
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	4930      	ldr	r1, [pc, #192]	; (8009d40 <vTaskSwitchContext+0xf4>)
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	607b      	str	r3, [r7, #4]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vTaskSwitchContext+0x5a>
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4a23      	ldr	r2, [pc, #140]	; (8009d40 <vTaskSwitchContext+0xf4>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d104      	bne.n	8009cd8 <vTaskSwitchContext+0x8c>
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <vTaskSwitchContext+0xf8>)
 8009ce0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009ce2:	4b19      	ldr	r3, [pc, #100]	; (8009d48 <vTaskSwitchContext+0xfc>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	f7f8 ff64 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7f8 fe98 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <vTaskSwitchContext+0x100>)
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <vTaskSwitchContext+0xce>
 8009d04:	f7f8 ff56 	bl	8002bb4 <prvTraceGetCurrentTaskHandle>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f8 fe7d 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009d10:	4603      	mov	r3, r0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f9 fdad 	bl	8003874 <prvTraceStoreTaskswitch>
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <vTaskSwitchContext+0xfc>)
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d20:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <vTaskSwitchContext+0xf8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3354      	adds	r3, #84	; 0x54
 8009d26:	4a0a      	ldr	r2, [pc, #40]	; (8009d50 <vTaskSwitchContext+0x104>)
 8009d28:	6013      	str	r3, [r2, #0]
}
 8009d2a:	bf00      	nop
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20009bc0 	.word	0x20009bc0
 8009d38:	20009bac 	.word	0x20009bac
 8009d3c:	20009ba0 	.word	0x20009ba0
 8009d40:	20009a9c 	.word	0x20009a9c
 8009d44:	20009a98 	.word	0x20009a98
 8009d48:	20001364 	.word	0x20001364
 8009d4c:	2000137c 	.word	0x2000137c
 8009d50:	2000001c 	.word	0x2000001c

08009d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	60fb      	str	r3, [r7, #12]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <vTaskPlaceOnEventList+0x44>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3318      	adds	r3, #24
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7fe fa49 	bl	800821a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d88:	2101      	movs	r1, #1
 8009d8a:	6838      	ldr	r0, [r7, #0]
 8009d8c:	f000 fd66 	bl	800a85c <prvAddCurrentTaskToDelayedList>
}
 8009d90:	bf00      	nop
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20009a98 	.word	0x20009a98

08009d9c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	617b      	str	r3, [r7, #20]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <vTaskPlaceOnUnorderedEventList+0x70>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	613b      	str	r3, [r7, #16]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009de2:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009dec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3318      	adds	r3, #24
 8009df4:	4619      	mov	r1, r3
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7fe f9eb 	bl	80081d2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fd2c 	bl	800a85c <prvAddCurrentTaskToDelayedList>
}
 8009e04:	bf00      	nop
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20009bc0 	.word	0x20009bc0
 8009e10:	20009a98 	.word	0x20009a98

08009e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	60fb      	str	r3, [r7, #12]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3318      	adds	r3, #24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fa21 	bl	800828c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4a:	4b27      	ldr	r3, [pc, #156]	; (8009ee8 <xTaskRemoveFromEventList+0xd4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d12f      	bne.n	8009eb2 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fa18 	bl	800828c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e5c:	6938      	ldr	r0, [r7, #16]
 8009e5e:	f7f8 fde1 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009e62:	4603      	mov	r3, r0
 8009e64:	461a      	mov	r2, r3
 8009e66:	4b21      	ldr	r3, [pc, #132]	; (8009eec <xTaskRemoveFromEventList+0xd8>)
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <xTaskRemoveFromEventList+0x6e>
 8009e72:	6938      	ldr	r0, [r7, #16]
 8009e74:	f7f8 fdc9 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7f9 fab7 	bl	80033f0 <prvTraceStoreTaskReady>
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	2201      	movs	r2, #1
 8009e88:	409a      	lsls	r2, r3
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <xTaskRemoveFromEventList+0xdc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <xTaskRemoveFromEventList+0xdc>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <xTaskRemoveFromEventList+0xe0>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe f991 	bl	80081d2 <vListInsertEnd>
 8009eb0:	e005      	b.n	8009ebe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3318      	adds	r3, #24
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	480f      	ldr	r0, [pc, #60]	; (8009ef8 <xTaskRemoveFromEventList+0xe4>)
 8009eba:	f7fe f98a 	bl	80081d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	; (8009efc <xTaskRemoveFromEventList+0xe8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d905      	bls.n	8009ed8 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <xTaskRemoveFromEventList+0xec>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	e001      	b.n	8009edc <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009edc:	697b      	ldr	r3, [r7, #20]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20009bc0 	.word	0x20009bc0
 8009eec:	2000137c 	.word	0x2000137c
 8009ef0:	20009ba0 	.word	0x20009ba0
 8009ef4:	20009a9c 	.word	0x20009a9c
 8009ef8:	20009b58 	.word	0x20009b58
 8009efc:	20009a98 	.word	0x20009a98
 8009f00:	20009bac 	.word	0x20009bac

08009f04 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009f0e:	4b32      	ldr	r3, [pc, #200]	; (8009fd8 <vTaskRemoveFromUnorderedEventList+0xd4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	613b      	str	r3, [r7, #16]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fe f997 	bl	800828c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe f992 	bl	800828c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009f68:	6978      	ldr	r0, [r7, #20]
 8009f6a:	f7f8 fd5b 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	461a      	mov	r2, r3
 8009f72:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <vTaskRemoveFromUnorderedEventList+0xd8>)
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	4013      	ands	r3, r2
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <vTaskRemoveFromUnorderedEventList+0x8a>
 8009f7e:	6978      	ldr	r0, [r7, #20]
 8009f80:	f7f8 fd43 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 8009f84:	4603      	mov	r3, r0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7f9 fa31 	bl	80033f0 <prvTraceStoreTaskReady>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	2201      	movs	r2, #1
 8009f94:	409a      	lsls	r2, r3
 8009f96:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <vTaskRemoveFromUnorderedEventList+0xdc>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <vTaskRemoveFromUnorderedEventList+0xdc>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a0d      	ldr	r2, [pc, #52]	; (8009fe4 <vTaskRemoveFromUnorderedEventList+0xe0>)
 8009fae:	441a      	add	r2, r3
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fe f90b 	bl	80081d2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <vTaskRemoveFromUnorderedEventList+0xe4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d902      	bls.n	8009fd0 <vTaskRemoveFromUnorderedEventList+0xcc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009fca:	4b08      	ldr	r3, [pc, #32]	; (8009fec <vTaskRemoveFromUnorderedEventList+0xe8>)
 8009fcc:	2201      	movs	r2, #1
 8009fce:	601a      	str	r2, [r3, #0]
	}
}
 8009fd0:	bf00      	nop
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20009bc0 	.word	0x20009bc0
 8009fdc:	2000137c 	.word	0x2000137c
 8009fe0:	20009ba0 	.word	0x20009ba0
 8009fe4:	20009a9c 	.word	0x20009a9c
 8009fe8:	20009a98 	.word	0x20009a98
 8009fec:	20009bac 	.word	0x20009bac

08009ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <vTaskInternalSetTimeOutState+0x24>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <vTaskInternalSetTimeOutState+0x28>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	605a      	str	r2, [r3, #4]
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20009bb0 	.word	0x20009bb0
 800a018:	20009b9c 	.word	0x20009b9c

0800a01c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	613b      	str	r3, [r7, #16]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10a      	bne.n	800a05e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	60fb      	str	r3, [r7, #12]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a05e:	f000 fda1 	bl	800aba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a062:	4b1d      	ldr	r3, [pc, #116]	; (800a0d8 <xTaskCheckForTimeOut+0xbc>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07a:	d102      	bne.n	800a082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e023      	b.n	800a0ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <xTaskCheckForTimeOut+0xc0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d007      	beq.n	800a09e <xTaskCheckForTimeOut+0x82>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	429a      	cmp	r2, r3
 800a096:	d302      	bcc.n	800a09e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e015      	b.n	800a0ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d20b      	bcs.n	800a0c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	1ad2      	subs	r2, r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff ff9b 	bl	8009ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
 800a0be:	e004      	b.n	800a0ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ca:	f000 fd85 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3720      	adds	r7, #32
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20009b9c 	.word	0x20009b9c
 800a0dc:	20009bb0 	.word	0x20009bb0

0800a0e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0e4:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <vTaskMissedYield+0x14>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	20009bac 	.word	0x20009bac

0800a0f8 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d005      	beq.n	800a112 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	e001      	b.n	800a116 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800a116:	68fb      	ldr	r3, [r7, #12]
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800a13e:	bf00      	nop
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
	...

0800a14c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a154:	f000 f852 	bl	800a1fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <prvIdleTask+0x28>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d9f9      	bls.n	800a154 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <prvIdleTask+0x2c>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a170:	e7f0      	b.n	800a154 <prvIdleTask+0x8>
 800a172:	bf00      	nop
 800a174:	20009a9c 	.word	0x20009a9c
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	e00c      	b.n	800a1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4a12      	ldr	r2, [pc, #72]	; (800a1dc <prvInitialiseTaskLists+0x60>)
 800a194:	4413      	add	r3, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f7fd ffee 	bl	8008178 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d9ef      	bls.n	800a188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1a8:	480d      	ldr	r0, [pc, #52]	; (800a1e0 <prvInitialiseTaskLists+0x64>)
 800a1aa:	f7fd ffe5 	bl	8008178 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1ae:	480d      	ldr	r0, [pc, #52]	; (800a1e4 <prvInitialiseTaskLists+0x68>)
 800a1b0:	f7fd ffe2 	bl	8008178 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1b4:	480c      	ldr	r0, [pc, #48]	; (800a1e8 <prvInitialiseTaskLists+0x6c>)
 800a1b6:	f7fd ffdf 	bl	8008178 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1ba:	480c      	ldr	r0, [pc, #48]	; (800a1ec <prvInitialiseTaskLists+0x70>)
 800a1bc:	f7fd ffdc 	bl	8008178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1c0:	480b      	ldr	r0, [pc, #44]	; (800a1f0 <prvInitialiseTaskLists+0x74>)
 800a1c2:	f7fd ffd9 	bl	8008178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <prvInitialiseTaskLists+0x78>)
 800a1c8:	4a05      	ldr	r2, [pc, #20]	; (800a1e0 <prvInitialiseTaskLists+0x64>)
 800a1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <prvInitialiseTaskLists+0x7c>)
 800a1ce:	4a05      	ldr	r2, [pc, #20]	; (800a1e4 <prvInitialiseTaskLists+0x68>)
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20009a9c 	.word	0x20009a9c
 800a1e0:	20009b28 	.word	0x20009b28
 800a1e4:	20009b3c 	.word	0x20009b3c
 800a1e8:	20009b58 	.word	0x20009b58
 800a1ec:	20009b6c 	.word	0x20009b6c
 800a1f0:	20009b84 	.word	0x20009b84
 800a1f4:	20009b50 	.word	0x20009b50
 800a1f8:	20009b54 	.word	0x20009b54

0800a1fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a202:	e019      	b.n	800a238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a204:	f000 fcce 	bl	800aba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a208:	4b10      	ldr	r3, [pc, #64]	; (800a24c <prvCheckTasksWaitingTermination+0x50>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe f839 	bl	800828c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <prvCheckTasksWaitingTermination+0x54>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3b01      	subs	r3, #1
 800a220:	4a0b      	ldr	r2, [pc, #44]	; (800a250 <prvCheckTasksWaitingTermination+0x54>)
 800a222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3b01      	subs	r3, #1
 800a22a:	4a0a      	ldr	r2, [pc, #40]	; (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a22e:	f000 fcd3 	bl	800abd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f810 	bl	800a258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e1      	bne.n	800a204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20009b6c 	.word	0x20009b6c
 800a250:	20009b98 	.word	0x20009b98
 800a254:	20009b80 	.word	0x20009b80

0800a258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3354      	adds	r3, #84	; 0x54
 800a264:	4618      	mov	r0, r3
 800a266:	f001 fdaf 	bl	800bdc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a270:	2b00      	cmp	r3, #0
 800a272:	d108      	bne.n	800a286 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fe39 	bl	800aef0 <vPortFree>
				vPortFree( pxTCB );
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fe36 	bl	800aef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a284:	e018      	b.n	800a2b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d103      	bne.n	800a298 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fe2d 	bl	800aef0 <vPortFree>
	}
 800a296:	e00f      	b.n	800a2b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d00a      	beq.n	800a2b8 <prvDeleteTCB+0x60>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	60fb      	str	r3, [r7, #12]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <prvDeleteTCB+0x5e>
	}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c6:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <prvResetNextTaskUnblockTime+0x38>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <prvResetNextTaskUnblockTime+0x3c>)
 800a2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2d8:	e008      	b.n	800a2ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <prvResetNextTaskUnblockTime+0x38>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4a04      	ldr	r2, [pc, #16]	; (800a2fc <prvResetNextTaskUnblockTime+0x3c>)
 800a2ea:	6013      	str	r3, [r2, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20009b50 	.word	0x20009b50
 800a2fc:	20009bb8 	.word	0x20009bb8

0800a300 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <xTaskGetCurrentTaskHandle+0x1c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a30c:	687b      	ldr	r3, [r7, #4]
	}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20009a98 	.word	0x20009a98

0800a320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <xTaskGetSchedulerState+0x34>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a32e:	2301      	movs	r3, #1
 800a330:	607b      	str	r3, [r7, #4]
 800a332:	e008      	b.n	800a346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <xTaskGetSchedulerState+0x38>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a33c:	2302      	movs	r3, #2
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	e001      	b.n	800a346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a346:	687b      	ldr	r3, [r7, #4]
	}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20009ba4 	.word	0x20009ba4
 800a358:	20009bc0 	.word	0x20009bc0

0800a35c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a35c:	b590      	push	{r4, r7, lr}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 80a0 	beq.w	800a4b4 <xTaskPriorityInherit+0x158>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4b51      	ldr	r3, [pc, #324]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	429a      	cmp	r2, r3
 800a380:	f080 808f 	bcs.w	800a4a2 <xTaskPriorityInherit+0x146>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	db06      	blt.n	800a39a <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38c:	4b4c      	ldr	r3, [pc, #304]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	f1c3 0207 	rsb	r2, r3, #7
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	6959      	ldr	r1, [r3, #20]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a46      	ldr	r2, [pc, #280]	; (800a4c4 <xTaskPriorityInherit+0x168>)
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	d142      	bne.n	800a438 <xTaskPriorityInherit+0xdc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fd ff68 	bl	800828c <uxListRemove>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <xTaskPriorityInherit+0x7c>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	43da      	mvns	r2, r3
 800a3ce:	4b3e      	ldr	r3, [pc, #248]	; (800a4c8 <xTaskPriorityInherit+0x16c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	4a3c      	ldr	r2, [pc, #240]	; (800a4c8 <xTaskPriorityInherit+0x16c>)
 800a3d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3d8:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3e2:	68b8      	ldr	r0, [r7, #8]
 800a3e4:	f7f8 fb1e 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4b37      	ldr	r3, [pc, #220]	; (800a4cc <xTaskPriorityInherit+0x170>)
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <xTaskPriorityInherit+0xac>
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f7f8 fb06 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a3fe:	4603      	mov	r3, r0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	4618      	mov	r0, r3
 800a404:	f7f8 fff4 	bl	80033f0 <prvTraceStoreTaskReady>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	2201      	movs	r2, #1
 800a40e:	409a      	lsls	r2, r3
 800a410:	4b2d      	ldr	r3, [pc, #180]	; (800a4c8 <xTaskPriorityInherit+0x16c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4313      	orrs	r3, r2
 800a416:	4a2c      	ldr	r2, [pc, #176]	; (800a4c8 <xTaskPriorityInherit+0x16c>)
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4a27      	ldr	r2, [pc, #156]	; (800a4c4 <xTaskPriorityInherit+0x168>)
 800a428:	441a      	add	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fd fece 	bl	80081d2 <vListInsertEnd>
 800a436:	e004      	b.n	800a442 <xTaskPriorityInherit+0xe6>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a438:	4b21      	ldr	r3, [pc, #132]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a442:	68b8      	ldr	r0, [r7, #8]
 800a444:	f7f8 faee 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	4b1f      	ldr	r3, [pc, #124]	; (800a4cc <xTaskPriorityInherit+0x170>)
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	4013      	ands	r3, r2
 800a452:	b29b      	uxth	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d021      	beq.n	800a49c <xTaskPriorityInherit+0x140>
 800a458:	68b8      	ldr	r0, [r7, #8]
 800a45a:	f7f8 fad6 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a45e:	4603      	mov	r3, r0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	461c      	mov	r4, r3
 800a464:	68b8      	ldr	r0, [r7, #8]
 800a466:	f7f8 fad0 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a46a:	4603      	mov	r3, r0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	2003      	movs	r0, #3
 800a472:	f7f9 fa8f 	bl	8003994 <prvTraceGetPriorityProperty>
 800a476:	4603      	mov	r3, r0
 800a478:	4622      	mov	r2, r4
 800a47a:	2103      	movs	r1, #3
 800a47c:	208e      	movs	r0, #142	; 0x8e
 800a47e:	f7f9 f907 	bl	8003690 <prvTraceStoreKernelCallWithParam>
 800a482:	68b8      	ldr	r0, [r7, #8]
 800a484:	f7f8 fac1 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a488:	4603      	mov	r3, r0
 800a48a:	b2d9      	uxtb	r1, r3
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	b2db      	uxtb	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	2003      	movs	r0, #3
 800a498:	f7f9 fa56 	bl	8003948 <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a49c:	2301      	movs	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e008      	b.n	800a4b4 <xTaskPriorityInherit+0x158>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4a6:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <xTaskPriorityInherit+0x164>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d201      	bcs.n	800a4b4 <xTaskPriorityInherit+0x158>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
	}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd90      	pop	{r4, r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20009a98 	.word	0x20009a98
 800a4c4:	20009a9c 	.word	0x20009a9c
 800a4c8:	20009ba0 	.word	0x20009ba0
 800a4cc:	2000137c 	.word	0x2000137c

0800a4d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 80af 	beq.w	800a646 <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4e8:	4b59      	ldr	r3, [pc, #356]	; (800a650 <xTaskPriorityDisinherit+0x180>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d00a      	beq.n	800a508 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60fb      	str	r3, [r7, #12]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	60bb      	str	r3, [r7, #8]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52a:	1e5a      	subs	r2, r3, #1
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a538:	429a      	cmp	r2, r3
 800a53a:	f000 8084 	beq.w	800a646 <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a542:	2b00      	cmp	r3, #0
 800a544:	d17f      	bne.n	800a646 <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	3304      	adds	r3, #4
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fd fe9e 	bl	800828c <uxListRemove>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d115      	bne.n	800a582 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55a:	493e      	ldr	r1, [pc, #248]	; (800a654 <xTaskPriorityDisinherit+0x184>)
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xTaskPriorityDisinherit+0xb2>
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	2201      	movs	r2, #1
 800a572:	fa02 f303 	lsl.w	r3, r2, r3
 800a576:	43da      	mvns	r2, r3
 800a578:	4b37      	ldr	r3, [pc, #220]	; (800a658 <xTaskPriorityDisinherit+0x188>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4013      	ands	r3, r2
 800a57e:	4a36      	ldr	r2, [pc, #216]	; (800a658 <xTaskPriorityDisinherit+0x188>)
 800a580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a582:	6938      	ldr	r0, [r7, #16]
 800a584:	f7f8 fa4e 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	4b33      	ldr	r3, [pc, #204]	; (800a65c <xTaskPriorityDisinherit+0x18c>)
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	4013      	ands	r3, r2
 800a592:	b29b      	uxth	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d020      	beq.n	800a5da <xTaskPriorityDisinherit+0x10a>
 800a598:	6938      	ldr	r0, [r7, #16]
 800a59a:	f7f8 fa36 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	461c      	mov	r4, r3
 800a5a4:	6938      	ldr	r0, [r7, #16]
 800a5a6:	f7f8 fa30 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	2003      	movs	r0, #3
 800a5b2:	f7f9 f9ef 	bl	8003994 <prvTraceGetPriorityProperty>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	2103      	movs	r1, #3
 800a5bc:	208f      	movs	r0, #143	; 0x8f
 800a5be:	f7f9 f867 	bl	8003690 <prvTraceStoreKernelCallWithParam>
 800a5c2:	6938      	ldr	r0, [r7, #16]
 800a5c4:	f7f8 fa21 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	b2d9      	uxtb	r1, r3
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	2003      	movs	r0, #3
 800a5d6:	f7f9 f9b7 	bl	8003948 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	f1c3 0207 	rsb	r2, r3, #7
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5ee:	6938      	ldr	r0, [r7, #16]
 800a5f0:	f7f8 fa18 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4b18      	ldr	r3, [pc, #96]	; (800a65c <xTaskPriorityDisinherit+0x18c>)
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <xTaskPriorityDisinherit+0x144>
 800a604:	6938      	ldr	r0, [r7, #16]
 800a606:	f7f8 fa00 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a60a:	4603      	mov	r3, r0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7f8 feee 	bl	80033f0 <prvTraceStoreTaskReady>
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	2201      	movs	r2, #1
 800a61a:	409a      	lsls	r2, r3
 800a61c:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <xTaskPriorityDisinherit+0x188>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4313      	orrs	r3, r2
 800a622:	4a0d      	ldr	r2, [pc, #52]	; (800a658 <xTaskPriorityDisinherit+0x188>)
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4a08      	ldr	r2, [pc, #32]	; (800a654 <xTaskPriorityDisinherit+0x184>)
 800a634:	441a      	add	r2, r3
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fd fdc8 	bl	80081d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a642:	2301      	movs	r3, #1
 800a644:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a646:	697b      	ldr	r3, [r7, #20]
	}
 800a648:	4618      	mov	r0, r3
 800a64a:	371c      	adds	r7, #28
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}
 800a650:	20009a98 	.word	0x20009a98
 800a654:	20009a9c 	.word	0x20009a9c
 800a658:	20009ba0 	.word	0x20009ba0
 800a65c:	2000137c 	.word	0x2000137c

0800a660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b089      	sub	sp, #36	; 0x24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a66e:	2301      	movs	r3, #1
 800a670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80b9 	beq.w	800a7ec <vTaskPriorityDisinheritAfterTimeout+0x18c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60fb      	str	r3, [r7, #12]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d902      	bls.n	800a6a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	61fb      	str	r3, [r7, #28]
 800a6a6:	e002      	b.n	800a6ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	f000 8099 	beq.w	800a7ec <vTaskPriorityDisinheritAfterTimeout+0x18c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	f040 8093 	bne.w	800a7ec <vTaskPriorityDisinheritAfterTimeout+0x18c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a6c6:	4b4b      	ldr	r3, [pc, #300]	; (800a7f4 <vTaskPriorityDisinheritAfterTimeout+0x194>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d10a      	bne.n	800a6e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60bb      	str	r3, [r7, #8]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a6e6:	69b8      	ldr	r0, [r7, #24]
 800a6e8:	f7f8 f99c 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	4b41      	ldr	r3, [pc, #260]	; (800a7f8 <vTaskPriorityDisinheritAfterTimeout+0x198>)
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d020      	beq.n	800a73e <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a6fc:	69b8      	ldr	r0, [r7, #24]
 800a6fe:	f7f8 f984 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a702:	4603      	mov	r3, r0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	461c      	mov	r4, r3
 800a708:	69b8      	ldr	r0, [r7, #24]
 800a70a:	f7f8 f97e 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a70e:	4603      	mov	r3, r0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	4619      	mov	r1, r3
 800a714:	2003      	movs	r0, #3
 800a716:	f7f9 f93d 	bl	8003994 <prvTraceGetPriorityProperty>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4622      	mov	r2, r4
 800a71e:	2103      	movs	r1, #3
 800a720:	208f      	movs	r0, #143	; 0x8f
 800a722:	f7f8 ffb5 	bl	8003690 <prvTraceStoreKernelCallWithParam>
 800a726:	69b8      	ldr	r0, [r7, #24]
 800a728:	f7f8 f96f 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a72c:	4603      	mov	r3, r0
 800a72e:	b2d9      	uxtb	r1, r3
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a734:	b2db      	uxtb	r3, r3
 800a736:	461a      	mov	r2, r3
 800a738:	2003      	movs	r0, #3
 800a73a:	f7f9 f905 	bl	8003948 <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	db04      	blt.n	800a75c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	f1c3 0207 	rsb	r2, r3, #7
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	6959      	ldr	r1, [r3, #20]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a24      	ldr	r2, [pc, #144]	; (800a7fc <vTaskPriorityDisinheritAfterTimeout+0x19c>)
 800a76c:	4413      	add	r3, r2
 800a76e:	4299      	cmp	r1, r3
 800a770:	d13c      	bne.n	800a7ec <vTaskPriorityDisinheritAfterTimeout+0x18c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	3304      	adds	r3, #4
 800a776:	4618      	mov	r0, r3
 800a778:	f7fd fd88 	bl	800828c <uxListRemove>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <vTaskPriorityDisinheritAfterTimeout+0x138>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	2201      	movs	r2, #1
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	43da      	mvns	r2, r3
 800a78e:	4b1c      	ldr	r3, [pc, #112]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4013      	ands	r3, r2
 800a794:	4a1a      	ldr	r2, [pc, #104]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800a796:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a798:	69b8      	ldr	r0, [r7, #24]
 800a79a:	f7f8 f943 	bl	8002a24 <prvTraceGetTaskNumberHigh16>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <vTaskPriorityDisinheritAfterTimeout+0x198>)
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <vTaskPriorityDisinheritAfterTimeout+0x15e>
 800a7ae:	69b8      	ldr	r0, [r7, #24]
 800a7b0:	f7f8 f92b 	bl	8002a0a <prvTraceGetTaskNumberLow16>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f8 fe19 	bl	80033f0 <prvTraceStoreTaskReady>
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	409a      	lsls	r2, r3
 800a7c6:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	4a0c      	ldr	r2, [pc, #48]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0x1a0>)
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4a07      	ldr	r2, [pc, #28]	; (800a7fc <vTaskPriorityDisinheritAfterTimeout+0x19c>)
 800a7de:	441a      	add	r2, r3
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7fd fcf3 	bl	80081d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7ec:	bf00      	nop
 800a7ee:	3724      	adds	r7, #36	; 0x24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd90      	pop	{r4, r7, pc}
 800a7f4:	20009a98 	.word	0x20009a98
 800a7f8:	2000137c 	.word	0x2000137c
 800a7fc:	20009a9c 	.word	0x20009a9c
 800a800:	20009ba0 	.word	0x20009ba0

0800a804 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1c2 0207 	rsb	r2, r2, #7
 800a820:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a822:	687b      	ldr	r3, [r7, #4]
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20009a98 	.word	0x20009a98

0800a834 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a834:	b480      	push	{r7}
 800a836:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a838:	4b07      	ldr	r3, [pc, #28]	; (800a858 <pvTaskIncrementMutexHeldCount+0x24>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a840:	4b05      	ldr	r3, [pc, #20]	; (800a858 <pvTaskIncrementMutexHeldCount+0x24>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a846:	3201      	adds	r2, #1
 800a848:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a84a:	4b03      	ldr	r3, [pc, #12]	; (800a858 <pvTaskIncrementMutexHeldCount+0x24>)
 800a84c:	681b      	ldr	r3, [r3, #0]
	}
 800a84e:	4618      	mov	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	20009a98 	.word	0x20009a98

0800a85c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a866:	4b29      	ldr	r3, [pc, #164]	; (800a90c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a86c:	4b28      	ldr	r3, [pc, #160]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3304      	adds	r3, #4
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd fd0a 	bl	800828c <uxListRemove>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a87e:	4b24      	ldr	r3, [pc, #144]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a884:	2201      	movs	r2, #1
 800a886:	fa02 f303 	lsl.w	r3, r2, r3
 800a88a:	43da      	mvns	r2, r3
 800a88c:	4b21      	ldr	r3, [pc, #132]	; (800a914 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4013      	ands	r3, r2
 800a892:	4a20      	ldr	r2, [pc, #128]	; (800a914 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a894:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89c:	d10a      	bne.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x58>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a4:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	481a      	ldr	r0, [pc, #104]	; (800a918 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a8ae:	f7fd fc90 	bl	80081d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8b2:	e026      	b.n	800a902 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8bc:	4b14      	ldr	r3, [pc, #80]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d209      	bcs.n	800a8e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8cc:	4b13      	ldr	r3, [pc, #76]	; (800a91c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fd fc9e 	bl	800821a <vListInsert>
}
 800a8de:	e010      	b.n	800a902 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	4b0a      	ldr	r3, [pc, #40]	; (800a910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fd fc94 	bl	800821a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d202      	bcs.n	800a902 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6013      	str	r3, [r2, #0]
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20009b9c 	.word	0x20009b9c
 800a910:	20009a98 	.word	0x20009a98
 800a914:	20009ba0 	.word	0x20009ba0
 800a918:	20009b84 	.word	0x20009b84
 800a91c:	20009b54 	.word	0x20009b54
 800a920:	20009b50 	.word	0x20009b50
 800a924:	20009bb8 	.word	0x20009bb8

0800a928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3b04      	subs	r3, #4
 800a938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3b04      	subs	r3, #4
 800a946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f023 0201 	bic.w	r2, r3, #1
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b04      	subs	r3, #4
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a958:	4a0c      	ldr	r2, [pc, #48]	; (800a98c <pxPortInitialiseStack+0x64>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3b14      	subs	r3, #20
 800a962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b04      	subs	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f06f 0202 	mvn.w	r2, #2
 800a976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3b20      	subs	r3, #32
 800a97c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	0800a991 	.word	0x0800a991

0800a990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <prvTaskExitError+0x54>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a2:	d00a      	beq.n	800a9ba <prvTaskExitError+0x2a>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60fb      	str	r3, [r7, #12]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <prvTaskExitError+0x28>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	60bb      	str	r3, [r7, #8]
}
 800a9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ce:	bf00      	nop
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0fc      	beq.n	800a9d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	20000018 	.word	0x20000018
	...

0800a9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <pxCurrentTCBConst2>)
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	6808      	ldr	r0, [r1, #0]
 800a9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	f380 8809 	msr	PSP, r0
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8811 	msr	BASEPRI, r0
 800aa0a:	4770      	bx	lr
 800aa0c:	f3af 8000 	nop.w

0800aa10 <pxCurrentTCBConst2>:
 800aa10:	20009a98 	.word	0x20009a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa18:	4808      	ldr	r0, [pc, #32]	; (800aa3c <prvPortStartFirstTask+0x24>)
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f380 8808 	msr	MSP, r0
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8814 	msr	CONTROL, r0
 800aa2a:	b662      	cpsie	i
 800aa2c:	b661      	cpsie	f
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	df00      	svc	0
 800aa38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa3a:	bf00      	nop
 800aa3c:	e000ed08 	.word	0xe000ed08

0800aa40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa46:	4b4e      	ldr	r3, [pc, #312]	; (800ab80 <xPortStartScheduler+0x140>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a4e      	ldr	r2, [pc, #312]	; (800ab84 <xPortStartScheduler+0x144>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10a      	bne.n	800aa66 <xPortStartScheduler+0x26>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	61bb      	str	r3, [r7, #24]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa66:	4b46      	ldr	r3, [pc, #280]	; (800ab80 <xPortStartScheduler+0x140>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a47      	ldr	r2, [pc, #284]	; (800ab88 <xPortStartScheduler+0x148>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10a      	bne.n	800aa86 <xPortStartScheduler+0x46>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	617b      	str	r3, [r7, #20]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa86:	4b41      	ldr	r3, [pc, #260]	; (800ab8c <xPortStartScheduler+0x14c>)
 800aa88:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	4b39      	ldr	r3, [pc, #228]	; (800ab90 <xPortStartScheduler+0x150>)
 800aaac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaae:	4b39      	ldr	r3, [pc, #228]	; (800ab94 <xPortStartScheduler+0x154>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aab4:	e009      	b.n	800aaca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aab6:	4b37      	ldr	r3, [pc, #220]	; (800ab94 <xPortStartScheduler+0x154>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	4a35      	ldr	r2, [pc, #212]	; (800ab94 <xPortStartScheduler+0x154>)
 800aabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	d0ef      	beq.n	800aab6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800aad6:	4b2f      	ldr	r3, [pc, #188]	; (800ab94 <xPortStartScheduler+0x154>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f1c3 0307 	rsb	r3, r3, #7
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d00a      	beq.n	800aaf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	613b      	str	r3, [r7, #16]
}
 800aaf4:	bf00      	nop
 800aaf6:	e7fe      	b.n	800aaf6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aaf8:	4b26      	ldr	r3, [pc, #152]	; (800ab94 <xPortStartScheduler+0x154>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f1c3 0307 	rsb	r3, r3, #7
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	d00a      	beq.n	800ab1a <xPortStartScheduler+0xda>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	60fb      	str	r3, [r7, #12]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab1a:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <xPortStartScheduler+0x154>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	4a1c      	ldr	r2, [pc, #112]	; (800ab94 <xPortStartScheduler+0x154>)
 800ab22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab24:	4b1b      	ldr	r3, [pc, #108]	; (800ab94 <xPortStartScheduler+0x154>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab2c:	4a19      	ldr	r2, [pc, #100]	; (800ab94 <xPortStartScheduler+0x154>)
 800ab2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab38:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <xPortStartScheduler+0x158>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a16      	ldr	r2, [pc, #88]	; (800ab98 <xPortStartScheduler+0x158>)
 800ab3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab44:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <xPortStartScheduler+0x158>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a13      	ldr	r2, [pc, #76]	; (800ab98 <xPortStartScheduler+0x158>)
 800ab4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab50:	f000 f8c4 	bl	800acdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab54:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <xPortStartScheduler+0x15c>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab5a:	f000 f8e3 	bl	800ad24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab5e:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <xPortStartScheduler+0x160>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a0f      	ldr	r2, [pc, #60]	; (800aba0 <xPortStartScheduler+0x160>)
 800ab64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab6a:	f7ff ff55 	bl	800aa18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab6e:	f7ff f86d 	bl	8009c4c <vTaskSwitchContext>
	prvTaskExitError();
 800ab72:	f7ff ff0d 	bl	800a990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	e000ed00 	.word	0xe000ed00
 800ab84:	410fc271 	.word	0x410fc271
 800ab88:	410fc270 	.word	0x410fc270
 800ab8c:	e000e400 	.word	0xe000e400
 800ab90:	20009bc4 	.word	0x20009bc4
 800ab94:	20009bc8 	.word	0x20009bc8
 800ab98:	e000ed20 	.word	0xe000ed20
 800ab9c:	20000018 	.word	0x20000018
 800aba0:	e000ef34 	.word	0xe000ef34

0800aba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	607b      	str	r3, [r7, #4]
}
 800abbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abbe:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <vPortEnterCritical+0x30>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	4a03      	ldr	r2, [pc, #12]	; (800abd4 <vPortEnterCritical+0x30>)
 800abc6:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
//		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	20000018 	.word	0x20000018

0800abd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abde:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <vPortExitCritical+0x50>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <vPortExitCritical+0x24>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	607b      	str	r3, [r7, #4]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abfc:	4b0a      	ldr	r3, [pc, #40]	; (800ac28 <vPortExitCritical+0x50>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <vPortExitCritical+0x50>)
 800ac04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac06:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <vPortExitCritical+0x50>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d105      	bne.n	800ac1a <vPortExitCritical+0x42>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	20000018 	.word	0x20000018
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac30:	f3ef 8009 	mrs	r0, PSP
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <pxCurrentTCBConst>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	f01e 0f10 	tst.w	lr, #16
 800ac40:	bf08      	it	eq
 800ac42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac54:	f380 8811 	msr	BASEPRI, r0
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f7fe fff4 	bl	8009c4c <vTaskSwitchContext>
 800ac64:	f04f 0000 	mov.w	r0, #0
 800ac68:	f380 8811 	msr	BASEPRI, r0
 800ac6c:	bc09      	pop	{r0, r3}
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	6808      	ldr	r0, [r1, #0]
 800ac72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac76:	f01e 0f10 	tst.w	lr, #16
 800ac7a:	bf08      	it	eq
 800ac7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac80:	f380 8809 	msr	PSP, r0
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst>:
 800ac90:	20009a98 	.word	0x20009a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb2:	f7fe fee9 	bl	8009a88 <xTaskIncrementTick>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <SysTick_Handler+0x40>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	2300      	movs	r3, #0
 800acc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f383 8811 	msr	BASEPRI, r3
}
 800acce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <vPortSetupTimerInterrupt+0x38>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <vPortSetupTimerInterrupt+0x3c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <vPortSetupTimerInterrupt+0x40>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	099b      	lsrs	r3, r3, #6
 800acf8:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <vPortSetupTimerInterrupt+0x44>)
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acfe:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	e000e010 	.word	0xe000e010
 800ad14:	e000e018 	.word	0xe000e018
 800ad18:	20000000 	.word	0x20000000
 800ad1c:	10624dd3 	.word	0x10624dd3
 800ad20:	e000e014 	.word	0xe000e014

0800ad24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad34 <vPortEnableVFP+0x10>
 800ad28:	6801      	ldr	r1, [r0, #0]
 800ad2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad2e:	6001      	str	r1, [r0, #0]
 800ad30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad32:	bf00      	nop
 800ad34:	e000ed88 	.word	0xe000ed88

0800ad38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08a      	sub	sp, #40	; 0x28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad40:	2300      	movs	r3, #0
 800ad42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad44:	f7fe fdd0 	bl	80098e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad48:	4b63      	ldr	r3, [pc, #396]	; (800aed8 <pvPortMalloc+0x1a0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad50:	f000 f938 	bl	800afc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad54:	4b61      	ldr	r3, [pc, #388]	; (800aedc <pvPortMalloc+0x1a4>)
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 8093 	bne.w	800ae88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01d      	beq.n	800ada4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad68:	2208      	movs	r2, #8
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f003 0307 	and.w	r3, r3, #7
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d014      	beq.n	800ada4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f023 0307 	bic.w	r3, r3, #7
 800ad80:	3308      	adds	r3, #8
 800ad82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <pvPortMalloc+0x6c>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	617b      	str	r3, [r7, #20]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d06e      	beq.n	800ae88 <pvPortMalloc+0x150>
 800adaa:	4b4d      	ldr	r3, [pc, #308]	; (800aee0 <pvPortMalloc+0x1a8>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d869      	bhi.n	800ae88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800adb4:	4b4b      	ldr	r3, [pc, #300]	; (800aee4 <pvPortMalloc+0x1ac>)
 800adb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adb8:	4b4a      	ldr	r3, [pc, #296]	; (800aee4 <pvPortMalloc+0x1ac>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adbe:	e004      	b.n	800adca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	429a      	cmp	r2, r3
 800add2:	d903      	bls.n	800addc <pvPortMalloc+0xa4>
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f1      	bne.n	800adc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800addc:	4b3e      	ldr	r3, [pc, #248]	; (800aed8 <pvPortMalloc+0x1a0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d050      	beq.n	800ae88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2208      	movs	r2, #8
 800adec:	4413      	add	r3, r2
 800adee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	2308      	movs	r3, #8
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d91f      	bls.n	800ae48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <pvPortMalloc+0xf8>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	613b      	str	r3, [r7, #16]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	1ad2      	subs	r2, r2, r3
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae42:	69b8      	ldr	r0, [r7, #24]
 800ae44:	f000 f920 	bl	800b088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae48:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <pvPortMalloc+0x1a8>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	4a23      	ldr	r2, [pc, #140]	; (800aee0 <pvPortMalloc+0x1a8>)
 800ae54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae56:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <pvPortMalloc+0x1a8>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <pvPortMalloc+0x1b0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d203      	bcs.n	800ae6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae62:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <pvPortMalloc+0x1a8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a20      	ldr	r2, [pc, #128]	; (800aee8 <pvPortMalloc+0x1b0>)
 800ae68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	4b1b      	ldr	r3, [pc, #108]	; (800aedc <pvPortMalloc+0x1a4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae7e:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <pvPortMalloc+0x1b4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	4a19      	ldr	r2, [pc, #100]	; (800aeec <pvPortMalloc+0x1b4>)
 800ae86:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d006      	beq.n	800ae9c <pvPortMalloc+0x164>
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	4619      	mov	r1, r3
 800ae94:	2094      	movs	r0, #148	; 0x94
 800ae96:	f7f8 fb07 	bl	80034a8 <vTraceStoreMemMangEvent>
 800ae9a:	e005      	b.n	800aea8 <pvPortMalloc+0x170>
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4619      	mov	r1, r3
 800aea2:	20e8      	movs	r0, #232	; 0xe8
 800aea4:	f7f8 fb00 	bl	80034a8 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800aea8:	f7fe fd2c 	bl	8009904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	f003 0307 	and.w	r3, r3, #7
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <pvPortMalloc+0x194>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	60fb      	str	r3, [r7, #12]
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <pvPortMalloc+0x192>
	return pvReturn;
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3728      	adds	r7, #40	; 0x28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	2000dbd4 	.word	0x2000dbd4
 800aedc:	2000dbe8 	.word	0x2000dbe8
 800aee0:	2000dbd8 	.word	0x2000dbd8
 800aee4:	2000dbcc 	.word	0x2000dbcc
 800aee8:	2000dbdc 	.word	0x2000dbdc
 800aeec:	2000dbe0 	.word	0x2000dbe0

0800aef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d055      	beq.n	800afae <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af02:	2308      	movs	r3, #8
 800af04:	425b      	negs	r3, r3
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	4b28      	ldr	r3, [pc, #160]	; (800afb8 <vPortFree+0xc8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4013      	ands	r3, r2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10a      	bne.n	800af34 <vPortFree+0x44>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60fb      	str	r3, [r7, #12]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00a      	beq.n	800af52 <vPortFree+0x62>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	60bb      	str	r3, [r7, #8]
}
 800af4e:	bf00      	nop
 800af50:	e7fe      	b.n	800af50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	4b18      	ldr	r3, [pc, #96]	; (800afb8 <vPortFree+0xc8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4013      	ands	r3, r2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d026      	beq.n	800afae <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d122      	bne.n	800afae <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <vPortFree+0xc8>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	43db      	mvns	r3, r3
 800af72:	401a      	ands	r2, r3
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af78:	f7fe fcb6 	bl	80098e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	4b0e      	ldr	r3, [pc, #56]	; (800afbc <vPortFree+0xcc>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4413      	add	r3, r2
 800af86:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <vPortFree+0xcc>)
 800af88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	425b      	negs	r3, r3
 800af92:	461a      	mov	r2, r3
 800af94:	2096      	movs	r0, #150	; 0x96
 800af96:	f7f8 fa87 	bl	80034a8 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af9a:	6938      	ldr	r0, [r7, #16]
 800af9c:	f000 f874 	bl	800b088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afa0:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <vPortFree+0xd0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	4a06      	ldr	r2, [pc, #24]	; (800afc0 <vPortFree+0xd0>)
 800afa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800afaa:	f7fe fcab 	bl	8009904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afae:	bf00      	nop
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	2000dbe8 	.word	0x2000dbe8
 800afbc:	2000dbd8 	.word	0x2000dbd8
 800afc0:	2000dbe4 	.word	0x2000dbe4

0800afc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afd0:	4b27      	ldr	r3, [pc, #156]	; (800b070 <prvHeapInit+0xac>)
 800afd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00c      	beq.n	800aff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3307      	adds	r3, #7
 800afe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f023 0307 	bic.w	r3, r3, #7
 800afea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	4a1f      	ldr	r2, [pc, #124]	; (800b070 <prvHeapInit+0xac>)
 800aff4:	4413      	add	r3, r2
 800aff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800affc:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <prvHeapInit+0xb0>)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b002:	4b1c      	ldr	r3, [pc, #112]	; (800b074 <prvHeapInit+0xb0>)
 800b004:	2200      	movs	r2, #0
 800b006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	4413      	add	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b010:	2208      	movs	r2, #8
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	1a9b      	subs	r3, r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f023 0307 	bic.w	r3, r3, #7
 800b01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4a15      	ldr	r2, [pc, #84]	; (800b078 <prvHeapInit+0xb4>)
 800b024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <prvHeapInit+0xb4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <prvHeapInit+0xb4>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	1ad2      	subs	r2, r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b044:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <prvHeapInit+0xb4>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <prvHeapInit+0xb8>)
 800b052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	4a09      	ldr	r2, [pc, #36]	; (800b080 <prvHeapInit+0xbc>)
 800b05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <prvHeapInit+0xc0>)
 800b05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b062:	601a      	str	r2, [r3, #0]
}
 800b064:	bf00      	nop
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	20009bcc 	.word	0x20009bcc
 800b074:	2000dbcc 	.word	0x2000dbcc
 800b078:	2000dbd4 	.word	0x2000dbd4
 800b07c:	2000dbdc 	.word	0x2000dbdc
 800b080:	2000dbd8 	.word	0x2000dbd8
 800b084:	2000dbe8 	.word	0x2000dbe8

0800b088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b090:	4b28      	ldr	r3, [pc, #160]	; (800b134 <prvInsertBlockIntoFreeList+0xac>)
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e002      	b.n	800b09c <prvInsertBlockIntoFreeList+0x14>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d8f7      	bhi.n	800b096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d108      	bne.n	800b0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	441a      	add	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	441a      	add	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d118      	bne.n	800b110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b15      	ldr	r3, [pc, #84]	; (800b138 <prvInsertBlockIntoFreeList+0xb0>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d00d      	beq.n	800b106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	e008      	b.n	800b118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <prvInsertBlockIntoFreeList+0xb0>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e003      	b.n	800b118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d002      	beq.n	800b126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	2000dbcc 	.word	0x2000dbcc
 800b138:	2000dbd4 	.word	0x2000dbd4

0800b13c <__errno>:
 800b13c:	4b01      	ldr	r3, [pc, #4]	; (800b144 <__errno+0x8>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	2000001c 	.word	0x2000001c

0800b148 <std>:
 800b148:	2300      	movs	r3, #0
 800b14a:	b510      	push	{r4, lr}
 800b14c:	4604      	mov	r4, r0
 800b14e:	e9c0 3300 	strd	r3, r3, [r0]
 800b152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b156:	6083      	str	r3, [r0, #8]
 800b158:	8181      	strh	r1, [r0, #12]
 800b15a:	6643      	str	r3, [r0, #100]	; 0x64
 800b15c:	81c2      	strh	r2, [r0, #14]
 800b15e:	6183      	str	r3, [r0, #24]
 800b160:	4619      	mov	r1, r3
 800b162:	2208      	movs	r2, #8
 800b164:	305c      	adds	r0, #92	; 0x5c
 800b166:	f000 f91a 	bl	800b39e <memset>
 800b16a:	4b05      	ldr	r3, [pc, #20]	; (800b180 <std+0x38>)
 800b16c:	6263      	str	r3, [r4, #36]	; 0x24
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <std+0x3c>)
 800b170:	62a3      	str	r3, [r4, #40]	; 0x28
 800b172:	4b05      	ldr	r3, [pc, #20]	; (800b188 <std+0x40>)
 800b174:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <std+0x44>)
 800b178:	6224      	str	r4, [r4, #32]
 800b17a:	6323      	str	r3, [r4, #48]	; 0x30
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	bf00      	nop
 800b180:	0800bee1 	.word	0x0800bee1
 800b184:	0800bf03 	.word	0x0800bf03
 800b188:	0800bf3b 	.word	0x0800bf3b
 800b18c:	0800bf5f 	.word	0x0800bf5f

0800b190 <_cleanup_r>:
 800b190:	4901      	ldr	r1, [pc, #4]	; (800b198 <_cleanup_r+0x8>)
 800b192:	f000 b8af 	b.w	800b2f4 <_fwalk_reent>
 800b196:	bf00      	nop
 800b198:	0800cdd9 	.word	0x0800cdd9

0800b19c <__sfmoreglue>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	2268      	movs	r2, #104	; 0x68
 800b1a0:	1e4d      	subs	r5, r1, #1
 800b1a2:	4355      	muls	r5, r2
 800b1a4:	460e      	mov	r6, r1
 800b1a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1aa:	f000 f921 	bl	800b3f0 <_malloc_r>
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	b140      	cbz	r0, 800b1c4 <__sfmoreglue+0x28>
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1b8:	300c      	adds	r0, #12
 800b1ba:	60a0      	str	r0, [r4, #8]
 800b1bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1c0:	f000 f8ed 	bl	800b39e <memset>
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}

0800b1c8 <__sfp_lock_acquire>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__sfp_lock_acquire+0x8>)
 800b1ca:	f000 b8d8 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	2000dbed 	.word	0x2000dbed

0800b1d4 <__sfp_lock_release>:
 800b1d4:	4801      	ldr	r0, [pc, #4]	; (800b1dc <__sfp_lock_release+0x8>)
 800b1d6:	f000 b8d3 	b.w	800b380 <__retarget_lock_release_recursive>
 800b1da:	bf00      	nop
 800b1dc:	2000dbed 	.word	0x2000dbed

0800b1e0 <__sinit_lock_acquire>:
 800b1e0:	4801      	ldr	r0, [pc, #4]	; (800b1e8 <__sinit_lock_acquire+0x8>)
 800b1e2:	f000 b8cc 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800b1e6:	bf00      	nop
 800b1e8:	2000dbee 	.word	0x2000dbee

0800b1ec <__sinit_lock_release>:
 800b1ec:	4801      	ldr	r0, [pc, #4]	; (800b1f4 <__sinit_lock_release+0x8>)
 800b1ee:	f000 b8c7 	b.w	800b380 <__retarget_lock_release_recursive>
 800b1f2:	bf00      	nop
 800b1f4:	2000dbee 	.word	0x2000dbee

0800b1f8 <__sinit>:
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	f7ff fff0 	bl	800b1e0 <__sinit_lock_acquire>
 800b200:	69a3      	ldr	r3, [r4, #24]
 800b202:	b11b      	cbz	r3, 800b20c <__sinit+0x14>
 800b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b208:	f7ff bff0 	b.w	800b1ec <__sinit_lock_release>
 800b20c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b210:	6523      	str	r3, [r4, #80]	; 0x50
 800b212:	4b13      	ldr	r3, [pc, #76]	; (800b260 <__sinit+0x68>)
 800b214:	4a13      	ldr	r2, [pc, #76]	; (800b264 <__sinit+0x6c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	62a2      	str	r2, [r4, #40]	; 0x28
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	bf04      	itt	eq
 800b21e:	2301      	moveq	r3, #1
 800b220:	61a3      	streq	r3, [r4, #24]
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f820 	bl	800b268 <__sfp>
 800b228:	6060      	str	r0, [r4, #4]
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 f81c 	bl	800b268 <__sfp>
 800b230:	60a0      	str	r0, [r4, #8]
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f818 	bl	800b268 <__sfp>
 800b238:	2200      	movs	r2, #0
 800b23a:	60e0      	str	r0, [r4, #12]
 800b23c:	2104      	movs	r1, #4
 800b23e:	6860      	ldr	r0, [r4, #4]
 800b240:	f7ff ff82 	bl	800b148 <std>
 800b244:	68a0      	ldr	r0, [r4, #8]
 800b246:	2201      	movs	r2, #1
 800b248:	2109      	movs	r1, #9
 800b24a:	f7ff ff7d 	bl	800b148 <std>
 800b24e:	68e0      	ldr	r0, [r4, #12]
 800b250:	2202      	movs	r2, #2
 800b252:	2112      	movs	r1, #18
 800b254:	f7ff ff78 	bl	800b148 <std>
 800b258:	2301      	movs	r3, #1
 800b25a:	61a3      	str	r3, [r4, #24]
 800b25c:	e7d2      	b.n	800b204 <__sinit+0xc>
 800b25e:	bf00      	nop
 800b260:	0800f0bc 	.word	0x0800f0bc
 800b264:	0800b191 	.word	0x0800b191

0800b268 <__sfp>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	4607      	mov	r7, r0
 800b26c:	f7ff ffac 	bl	800b1c8 <__sfp_lock_acquire>
 800b270:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <__sfp+0x84>)
 800b272:	681e      	ldr	r6, [r3, #0]
 800b274:	69b3      	ldr	r3, [r6, #24]
 800b276:	b913      	cbnz	r3, 800b27e <__sfp+0x16>
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff ffbd 	bl	800b1f8 <__sinit>
 800b27e:	3648      	adds	r6, #72	; 0x48
 800b280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b284:	3b01      	subs	r3, #1
 800b286:	d503      	bpl.n	800b290 <__sfp+0x28>
 800b288:	6833      	ldr	r3, [r6, #0]
 800b28a:	b30b      	cbz	r3, 800b2d0 <__sfp+0x68>
 800b28c:	6836      	ldr	r6, [r6, #0]
 800b28e:	e7f7      	b.n	800b280 <__sfp+0x18>
 800b290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b294:	b9d5      	cbnz	r5, 800b2cc <__sfp+0x64>
 800b296:	4b16      	ldr	r3, [pc, #88]	; (800b2f0 <__sfp+0x88>)
 800b298:	60e3      	str	r3, [r4, #12]
 800b29a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b29e:	6665      	str	r5, [r4, #100]	; 0x64
 800b2a0:	f000 f86c 	bl	800b37c <__retarget_lock_init_recursive>
 800b2a4:	f7ff ff96 	bl	800b1d4 <__sfp_lock_release>
 800b2a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2b0:	6025      	str	r5, [r4, #0]
 800b2b2:	61a5      	str	r5, [r4, #24]
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2bc:	f000 f86f 	bl	800b39e <memset>
 800b2c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2cc:	3468      	adds	r4, #104	; 0x68
 800b2ce:	e7d9      	b.n	800b284 <__sfp+0x1c>
 800b2d0:	2104      	movs	r1, #4
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f7ff ff62 	bl	800b19c <__sfmoreglue>
 800b2d8:	4604      	mov	r4, r0
 800b2da:	6030      	str	r0, [r6, #0]
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1d5      	bne.n	800b28c <__sfp+0x24>
 800b2e0:	f7ff ff78 	bl	800b1d4 <__sfp_lock_release>
 800b2e4:	230c      	movs	r3, #12
 800b2e6:	603b      	str	r3, [r7, #0]
 800b2e8:	e7ee      	b.n	800b2c8 <__sfp+0x60>
 800b2ea:	bf00      	nop
 800b2ec:	0800f0bc 	.word	0x0800f0bc
 800b2f0:	ffff0001 	.word	0xffff0001

0800b2f4 <_fwalk_reent>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	4688      	mov	r8, r1
 800b2fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b300:	2700      	movs	r7, #0
 800b302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b306:	f1b9 0901 	subs.w	r9, r9, #1
 800b30a:	d505      	bpl.n	800b318 <_fwalk_reent+0x24>
 800b30c:	6824      	ldr	r4, [r4, #0]
 800b30e:	2c00      	cmp	r4, #0
 800b310:	d1f7      	bne.n	800b302 <_fwalk_reent+0xe>
 800b312:	4638      	mov	r0, r7
 800b314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b318:	89ab      	ldrh	r3, [r5, #12]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d907      	bls.n	800b32e <_fwalk_reent+0x3a>
 800b31e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b322:	3301      	adds	r3, #1
 800b324:	d003      	beq.n	800b32e <_fwalk_reent+0x3a>
 800b326:	4629      	mov	r1, r5
 800b328:	4630      	mov	r0, r6
 800b32a:	47c0      	blx	r8
 800b32c:	4307      	orrs	r7, r0
 800b32e:	3568      	adds	r5, #104	; 0x68
 800b330:	e7e9      	b.n	800b306 <_fwalk_reent+0x12>
	...

0800b334 <__libc_init_array>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	4d0d      	ldr	r5, [pc, #52]	; (800b36c <__libc_init_array+0x38>)
 800b338:	4c0d      	ldr	r4, [pc, #52]	; (800b370 <__libc_init_array+0x3c>)
 800b33a:	1b64      	subs	r4, r4, r5
 800b33c:	10a4      	asrs	r4, r4, #2
 800b33e:	2600      	movs	r6, #0
 800b340:	42a6      	cmp	r6, r4
 800b342:	d109      	bne.n	800b358 <__libc_init_array+0x24>
 800b344:	4d0b      	ldr	r5, [pc, #44]	; (800b374 <__libc_init_array+0x40>)
 800b346:	4c0c      	ldr	r4, [pc, #48]	; (800b378 <__libc_init_array+0x44>)
 800b348:	f003 f9f8 	bl	800e73c <_init>
 800b34c:	1b64      	subs	r4, r4, r5
 800b34e:	10a4      	asrs	r4, r4, #2
 800b350:	2600      	movs	r6, #0
 800b352:	42a6      	cmp	r6, r4
 800b354:	d105      	bne.n	800b362 <__libc_init_array+0x2e>
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35c:	4798      	blx	r3
 800b35e:	3601      	adds	r6, #1
 800b360:	e7ee      	b.n	800b340 <__libc_init_array+0xc>
 800b362:	f855 3b04 	ldr.w	r3, [r5], #4
 800b366:	4798      	blx	r3
 800b368:	3601      	adds	r6, #1
 800b36a:	e7f2      	b.n	800b352 <__libc_init_array+0x1e>
 800b36c:	0800f43c 	.word	0x0800f43c
 800b370:	0800f43c 	.word	0x0800f43c
 800b374:	0800f43c 	.word	0x0800f43c
 800b378:	0800f440 	.word	0x0800f440

0800b37c <__retarget_lock_init_recursive>:
 800b37c:	4770      	bx	lr

0800b37e <__retarget_lock_acquire_recursive>:
 800b37e:	4770      	bx	lr

0800b380 <__retarget_lock_release_recursive>:
 800b380:	4770      	bx	lr

0800b382 <memcpy>:
 800b382:	440a      	add	r2, r1
 800b384:	4291      	cmp	r1, r2
 800b386:	f100 33ff 	add.w	r3, r0, #4294967295
 800b38a:	d100      	bne.n	800b38e <memcpy+0xc>
 800b38c:	4770      	bx	lr
 800b38e:	b510      	push	{r4, lr}
 800b390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b398:	4291      	cmp	r1, r2
 800b39a:	d1f9      	bne.n	800b390 <memcpy+0xe>
 800b39c:	bd10      	pop	{r4, pc}

0800b39e <memset>:
 800b39e:	4402      	add	r2, r0
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d100      	bne.n	800b3a8 <memset+0xa>
 800b3a6:	4770      	bx	lr
 800b3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ac:	e7f9      	b.n	800b3a2 <memset+0x4>
	...

0800b3b0 <sbrk_aligned>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	4e0e      	ldr	r6, [pc, #56]	; (800b3ec <sbrk_aligned+0x3c>)
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	6831      	ldr	r1, [r6, #0]
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	b911      	cbnz	r1, 800b3c2 <sbrk_aligned+0x12>
 800b3bc:	f000 fd60 	bl	800be80 <_sbrk_r>
 800b3c0:	6030      	str	r0, [r6, #0]
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f000 fd5b 	bl	800be80 <_sbrk_r>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d00a      	beq.n	800b3e4 <sbrk_aligned+0x34>
 800b3ce:	1cc4      	adds	r4, r0, #3
 800b3d0:	f024 0403 	bic.w	r4, r4, #3
 800b3d4:	42a0      	cmp	r0, r4
 800b3d6:	d007      	beq.n	800b3e8 <sbrk_aligned+0x38>
 800b3d8:	1a21      	subs	r1, r4, r0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 fd50 	bl	800be80 <_sbrk_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d101      	bne.n	800b3e8 <sbrk_aligned+0x38>
 800b3e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	2000dbf4 	.word	0x2000dbf4

0800b3f0 <_malloc_r>:
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	1ccd      	adds	r5, r1, #3
 800b3f6:	f025 0503 	bic.w	r5, r5, #3
 800b3fa:	3508      	adds	r5, #8
 800b3fc:	2d0c      	cmp	r5, #12
 800b3fe:	bf38      	it	cc
 800b400:	250c      	movcc	r5, #12
 800b402:	2d00      	cmp	r5, #0
 800b404:	4607      	mov	r7, r0
 800b406:	db01      	blt.n	800b40c <_malloc_r+0x1c>
 800b408:	42a9      	cmp	r1, r5
 800b40a:	d905      	bls.n	800b418 <_malloc_r+0x28>
 800b40c:	230c      	movs	r3, #12
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	2600      	movs	r6, #0
 800b412:	4630      	mov	r0, r6
 800b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b418:	4e2e      	ldr	r6, [pc, #184]	; (800b4d4 <_malloc_r+0xe4>)
 800b41a:	f001 fd37 	bl	800ce8c <__malloc_lock>
 800b41e:	6833      	ldr	r3, [r6, #0]
 800b420:	461c      	mov	r4, r3
 800b422:	bb34      	cbnz	r4, 800b472 <_malloc_r+0x82>
 800b424:	4629      	mov	r1, r5
 800b426:	4638      	mov	r0, r7
 800b428:	f7ff ffc2 	bl	800b3b0 <sbrk_aligned>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	4604      	mov	r4, r0
 800b430:	d14d      	bne.n	800b4ce <_malloc_r+0xde>
 800b432:	6834      	ldr	r4, [r6, #0]
 800b434:	4626      	mov	r6, r4
 800b436:	2e00      	cmp	r6, #0
 800b438:	d140      	bne.n	800b4bc <_malloc_r+0xcc>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	4631      	mov	r1, r6
 800b43e:	4638      	mov	r0, r7
 800b440:	eb04 0803 	add.w	r8, r4, r3
 800b444:	f000 fd1c 	bl	800be80 <_sbrk_r>
 800b448:	4580      	cmp	r8, r0
 800b44a:	d13a      	bne.n	800b4c2 <_malloc_r+0xd2>
 800b44c:	6821      	ldr	r1, [r4, #0]
 800b44e:	3503      	adds	r5, #3
 800b450:	1a6d      	subs	r5, r5, r1
 800b452:	f025 0503 	bic.w	r5, r5, #3
 800b456:	3508      	adds	r5, #8
 800b458:	2d0c      	cmp	r5, #12
 800b45a:	bf38      	it	cc
 800b45c:	250c      	movcc	r5, #12
 800b45e:	4629      	mov	r1, r5
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff ffa5 	bl	800b3b0 <sbrk_aligned>
 800b466:	3001      	adds	r0, #1
 800b468:	d02b      	beq.n	800b4c2 <_malloc_r+0xd2>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	442b      	add	r3, r5
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	e00e      	b.n	800b490 <_malloc_r+0xa0>
 800b472:	6822      	ldr	r2, [r4, #0]
 800b474:	1b52      	subs	r2, r2, r5
 800b476:	d41e      	bmi.n	800b4b6 <_malloc_r+0xc6>
 800b478:	2a0b      	cmp	r2, #11
 800b47a:	d916      	bls.n	800b4aa <_malloc_r+0xba>
 800b47c:	1961      	adds	r1, r4, r5
 800b47e:	42a3      	cmp	r3, r4
 800b480:	6025      	str	r5, [r4, #0]
 800b482:	bf18      	it	ne
 800b484:	6059      	strne	r1, [r3, #4]
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	bf08      	it	eq
 800b48a:	6031      	streq	r1, [r6, #0]
 800b48c:	5162      	str	r2, [r4, r5]
 800b48e:	604b      	str	r3, [r1, #4]
 800b490:	4638      	mov	r0, r7
 800b492:	f104 060b 	add.w	r6, r4, #11
 800b496:	f001 fcff 	bl	800ce98 <__malloc_unlock>
 800b49a:	f026 0607 	bic.w	r6, r6, #7
 800b49e:	1d23      	adds	r3, r4, #4
 800b4a0:	1af2      	subs	r2, r6, r3
 800b4a2:	d0b6      	beq.n	800b412 <_malloc_r+0x22>
 800b4a4:	1b9b      	subs	r3, r3, r6
 800b4a6:	50a3      	str	r3, [r4, r2]
 800b4a8:	e7b3      	b.n	800b412 <_malloc_r+0x22>
 800b4aa:	6862      	ldr	r2, [r4, #4]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	bf0c      	ite	eq
 800b4b0:	6032      	streq	r2, [r6, #0]
 800b4b2:	605a      	strne	r2, [r3, #4]
 800b4b4:	e7ec      	b.n	800b490 <_malloc_r+0xa0>
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	6864      	ldr	r4, [r4, #4]
 800b4ba:	e7b2      	b.n	800b422 <_malloc_r+0x32>
 800b4bc:	4634      	mov	r4, r6
 800b4be:	6876      	ldr	r6, [r6, #4]
 800b4c0:	e7b9      	b.n	800b436 <_malloc_r+0x46>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	603b      	str	r3, [r7, #0]
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f001 fce6 	bl	800ce98 <__malloc_unlock>
 800b4cc:	e7a1      	b.n	800b412 <_malloc_r+0x22>
 800b4ce:	6025      	str	r5, [r4, #0]
 800b4d0:	e7de      	b.n	800b490 <_malloc_r+0xa0>
 800b4d2:	bf00      	nop
 800b4d4:	2000dbf0 	.word	0x2000dbf0

0800b4d8 <__cvt>:
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	ec55 4b10 	vmov	r4, r5, d0
 800b4e0:	2d00      	cmp	r5, #0
 800b4e2:	460e      	mov	r6, r1
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	bfbb      	ittet	lt
 800b4ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4ee:	461d      	movlt	r5, r3
 800b4f0:	2300      	movge	r3, #0
 800b4f2:	232d      	movlt	r3, #45	; 0x2d
 800b4f4:	700b      	strb	r3, [r1, #0]
 800b4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4fc:	4691      	mov	r9, r2
 800b4fe:	f023 0820 	bic.w	r8, r3, #32
 800b502:	bfbc      	itt	lt
 800b504:	4622      	movlt	r2, r4
 800b506:	4614      	movlt	r4, r2
 800b508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b50c:	d005      	beq.n	800b51a <__cvt+0x42>
 800b50e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b512:	d100      	bne.n	800b516 <__cvt+0x3e>
 800b514:	3601      	adds	r6, #1
 800b516:	2102      	movs	r1, #2
 800b518:	e000      	b.n	800b51c <__cvt+0x44>
 800b51a:	2103      	movs	r1, #3
 800b51c:	ab03      	add	r3, sp, #12
 800b51e:	9301      	str	r3, [sp, #4]
 800b520:	ab02      	add	r3, sp, #8
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	ec45 4b10 	vmov	d0, r4, r5
 800b528:	4653      	mov	r3, sl
 800b52a:	4632      	mov	r2, r6
 800b52c:	f000 fde0 	bl	800c0f0 <_dtoa_r>
 800b530:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b534:	4607      	mov	r7, r0
 800b536:	d102      	bne.n	800b53e <__cvt+0x66>
 800b538:	f019 0f01 	tst.w	r9, #1
 800b53c:	d022      	beq.n	800b584 <__cvt+0xac>
 800b53e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b542:	eb07 0906 	add.w	r9, r7, r6
 800b546:	d110      	bne.n	800b56a <__cvt+0x92>
 800b548:	783b      	ldrb	r3, [r7, #0]
 800b54a:	2b30      	cmp	r3, #48	; 0x30
 800b54c:	d10a      	bne.n	800b564 <__cvt+0x8c>
 800b54e:	2200      	movs	r2, #0
 800b550:	2300      	movs	r3, #0
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f5 fabf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b55a:	b918      	cbnz	r0, 800b564 <__cvt+0x8c>
 800b55c:	f1c6 0601 	rsb	r6, r6, #1
 800b560:	f8ca 6000 	str.w	r6, [sl]
 800b564:	f8da 3000 	ldr.w	r3, [sl]
 800b568:	4499      	add	r9, r3
 800b56a:	2200      	movs	r2, #0
 800b56c:	2300      	movs	r3, #0
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f5 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b576:	b108      	cbz	r0, 800b57c <__cvt+0xa4>
 800b578:	f8cd 900c 	str.w	r9, [sp, #12]
 800b57c:	2230      	movs	r2, #48	; 0x30
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	454b      	cmp	r3, r9
 800b582:	d307      	bcc.n	800b594 <__cvt+0xbc>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b588:	1bdb      	subs	r3, r3, r7
 800b58a:	4638      	mov	r0, r7
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	b004      	add	sp, #16
 800b590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b594:	1c59      	adds	r1, r3, #1
 800b596:	9103      	str	r1, [sp, #12]
 800b598:	701a      	strb	r2, [r3, #0]
 800b59a:	e7f0      	b.n	800b57e <__cvt+0xa6>

0800b59c <__exponent>:
 800b59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	bfb8      	it	lt
 800b5a4:	4249      	neglt	r1, r1
 800b5a6:	f803 2b02 	strb.w	r2, [r3], #2
 800b5aa:	bfb4      	ite	lt
 800b5ac:	222d      	movlt	r2, #45	; 0x2d
 800b5ae:	222b      	movge	r2, #43	; 0x2b
 800b5b0:	2909      	cmp	r1, #9
 800b5b2:	7042      	strb	r2, [r0, #1]
 800b5b4:	dd2a      	ble.n	800b60c <__exponent+0x70>
 800b5b6:	f10d 0407 	add.w	r4, sp, #7
 800b5ba:	46a4      	mov	ip, r4
 800b5bc:	270a      	movs	r7, #10
 800b5be:	46a6      	mov	lr, r4
 800b5c0:	460a      	mov	r2, r1
 800b5c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5c6:	fb07 1516 	mls	r5, r7, r6, r1
 800b5ca:	3530      	adds	r5, #48	; 0x30
 800b5cc:	2a63      	cmp	r2, #99	; 0x63
 800b5ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	dcf1      	bgt.n	800b5be <__exponent+0x22>
 800b5da:	3130      	adds	r1, #48	; 0x30
 800b5dc:	f1ae 0502 	sub.w	r5, lr, #2
 800b5e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5e4:	1c44      	adds	r4, r0, #1
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	4561      	cmp	r1, ip
 800b5ea:	d30a      	bcc.n	800b602 <__exponent+0x66>
 800b5ec:	f10d 0209 	add.w	r2, sp, #9
 800b5f0:	eba2 020e 	sub.w	r2, r2, lr
 800b5f4:	4565      	cmp	r5, ip
 800b5f6:	bf88      	it	hi
 800b5f8:	2200      	movhi	r2, #0
 800b5fa:	4413      	add	r3, r2
 800b5fc:	1a18      	subs	r0, r3, r0
 800b5fe:	b003      	add	sp, #12
 800b600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b606:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b60a:	e7ed      	b.n	800b5e8 <__exponent+0x4c>
 800b60c:	2330      	movs	r3, #48	; 0x30
 800b60e:	3130      	adds	r1, #48	; 0x30
 800b610:	7083      	strb	r3, [r0, #2]
 800b612:	70c1      	strb	r1, [r0, #3]
 800b614:	1d03      	adds	r3, r0, #4
 800b616:	e7f1      	b.n	800b5fc <__exponent+0x60>

0800b618 <_printf_float>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	ed2d 8b02 	vpush	{d8}
 800b620:	b08d      	sub	sp, #52	; 0x34
 800b622:	460c      	mov	r4, r1
 800b624:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b628:	4616      	mov	r6, r2
 800b62a:	461f      	mov	r7, r3
 800b62c:	4605      	mov	r5, r0
 800b62e:	f001 fc0f 	bl	800ce50 <_localeconv_r>
 800b632:	f8d0 a000 	ldr.w	sl, [r0]
 800b636:	4650      	mov	r0, sl
 800b638:	f7f4 fdd2 	bl	80001e0 <strlen>
 800b63c:	2300      	movs	r3, #0
 800b63e:	930a      	str	r3, [sp, #40]	; 0x28
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	9305      	str	r3, [sp, #20]
 800b644:	f8d8 3000 	ldr.w	r3, [r8]
 800b648:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b64c:	3307      	adds	r3, #7
 800b64e:	f023 0307 	bic.w	r3, r3, #7
 800b652:	f103 0208 	add.w	r2, r3, #8
 800b656:	f8c8 2000 	str.w	r2, [r8]
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b662:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b66a:	9307      	str	r3, [sp, #28]
 800b66c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b670:	ee08 0a10 	vmov	s16, r0
 800b674:	4b9f      	ldr	r3, [pc, #636]	; (800b8f4 <_printf_float+0x2dc>)
 800b676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	f7f5 fa5d 	bl	8000b3c <__aeabi_dcmpun>
 800b682:	bb88      	cbnz	r0, 800b6e8 <_printf_float+0xd0>
 800b684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b688:	4b9a      	ldr	r3, [pc, #616]	; (800b8f4 <_printf_float+0x2dc>)
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	f7f5 fa37 	bl	8000b00 <__aeabi_dcmple>
 800b692:	bb48      	cbnz	r0, 800b6e8 <_printf_float+0xd0>
 800b694:	2200      	movs	r2, #0
 800b696:	2300      	movs	r3, #0
 800b698:	4640      	mov	r0, r8
 800b69a:	4649      	mov	r1, r9
 800b69c:	f7f5 fa26 	bl	8000aec <__aeabi_dcmplt>
 800b6a0:	b110      	cbz	r0, 800b6a8 <_printf_float+0x90>
 800b6a2:	232d      	movs	r3, #45	; 0x2d
 800b6a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6a8:	4b93      	ldr	r3, [pc, #588]	; (800b8f8 <_printf_float+0x2e0>)
 800b6aa:	4894      	ldr	r0, [pc, #592]	; (800b8fc <_printf_float+0x2e4>)
 800b6ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6b0:	bf94      	ite	ls
 800b6b2:	4698      	movls	r8, r3
 800b6b4:	4680      	movhi	r8, r0
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	9b05      	ldr	r3, [sp, #20]
 800b6bc:	f023 0204 	bic.w	r2, r3, #4
 800b6c0:	6022      	str	r2, [r4, #0]
 800b6c2:	f04f 0900 	mov.w	r9, #0
 800b6c6:	9700      	str	r7, [sp, #0]
 800b6c8:	4633      	mov	r3, r6
 800b6ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 f9d8 	bl	800ba84 <_printf_common>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f040 8090 	bne.w	800b7fa <_printf_float+0x1e2>
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	b00d      	add	sp, #52	; 0x34
 800b6e0:	ecbd 8b02 	vpop	{d8}
 800b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	464b      	mov	r3, r9
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	f7f5 fa24 	bl	8000b3c <__aeabi_dcmpun>
 800b6f4:	b140      	cbz	r0, 800b708 <_printf_float+0xf0>
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	bfbc      	itt	lt
 800b6fc:	232d      	movlt	r3, #45	; 0x2d
 800b6fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b702:	487f      	ldr	r0, [pc, #508]	; (800b900 <_printf_float+0x2e8>)
 800b704:	4b7f      	ldr	r3, [pc, #508]	; (800b904 <_printf_float+0x2ec>)
 800b706:	e7d1      	b.n	800b6ac <_printf_float+0x94>
 800b708:	6863      	ldr	r3, [r4, #4]
 800b70a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b70e:	9206      	str	r2, [sp, #24]
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	d13f      	bne.n	800b794 <_printf_float+0x17c>
 800b714:	2306      	movs	r3, #6
 800b716:	6063      	str	r3, [r4, #4]
 800b718:	9b05      	ldr	r3, [sp, #20]
 800b71a:	6861      	ldr	r1, [r4, #4]
 800b71c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b720:	2300      	movs	r3, #0
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	ab0a      	add	r3, sp, #40	; 0x28
 800b726:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b72a:	ab09      	add	r3, sp, #36	; 0x24
 800b72c:	ec49 8b10 	vmov	d0, r8, r9
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	6022      	str	r2, [r4, #0]
 800b734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b738:	4628      	mov	r0, r5
 800b73a:	f7ff fecd 	bl	800b4d8 <__cvt>
 800b73e:	9b06      	ldr	r3, [sp, #24]
 800b740:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b742:	2b47      	cmp	r3, #71	; 0x47
 800b744:	4680      	mov	r8, r0
 800b746:	d108      	bne.n	800b75a <_printf_float+0x142>
 800b748:	1cc8      	adds	r0, r1, #3
 800b74a:	db02      	blt.n	800b752 <_printf_float+0x13a>
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	4299      	cmp	r1, r3
 800b750:	dd41      	ble.n	800b7d6 <_printf_float+0x1be>
 800b752:	f1ab 0b02 	sub.w	fp, fp, #2
 800b756:	fa5f fb8b 	uxtb.w	fp, fp
 800b75a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b75e:	d820      	bhi.n	800b7a2 <_printf_float+0x18a>
 800b760:	3901      	subs	r1, #1
 800b762:	465a      	mov	r2, fp
 800b764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b768:	9109      	str	r1, [sp, #36]	; 0x24
 800b76a:	f7ff ff17 	bl	800b59c <__exponent>
 800b76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b770:	1813      	adds	r3, r2, r0
 800b772:	2a01      	cmp	r2, #1
 800b774:	4681      	mov	r9, r0
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	dc02      	bgt.n	800b780 <_printf_float+0x168>
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	07d2      	lsls	r2, r2, #31
 800b77e:	d501      	bpl.n	800b784 <_printf_float+0x16c>
 800b780:	3301      	adds	r3, #1
 800b782:	6123      	str	r3, [r4, #16]
 800b784:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d09c      	beq.n	800b6c6 <_printf_float+0xae>
 800b78c:	232d      	movs	r3, #45	; 0x2d
 800b78e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b792:	e798      	b.n	800b6c6 <_printf_float+0xae>
 800b794:	9a06      	ldr	r2, [sp, #24]
 800b796:	2a47      	cmp	r2, #71	; 0x47
 800b798:	d1be      	bne.n	800b718 <_printf_float+0x100>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1bc      	bne.n	800b718 <_printf_float+0x100>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e7b9      	b.n	800b716 <_printf_float+0xfe>
 800b7a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7a6:	d118      	bne.n	800b7da <_printf_float+0x1c2>
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	6863      	ldr	r3, [r4, #4]
 800b7ac:	dd0b      	ble.n	800b7c6 <_printf_float+0x1ae>
 800b7ae:	6121      	str	r1, [r4, #16]
 800b7b0:	b913      	cbnz	r3, 800b7b8 <_printf_float+0x1a0>
 800b7b2:	6822      	ldr	r2, [r4, #0]
 800b7b4:	07d0      	lsls	r0, r2, #31
 800b7b6:	d502      	bpl.n	800b7be <_printf_float+0x1a6>
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	440b      	add	r3, r1
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7c0:	f04f 0900 	mov.w	r9, #0
 800b7c4:	e7de      	b.n	800b784 <_printf_float+0x16c>
 800b7c6:	b913      	cbnz	r3, 800b7ce <_printf_float+0x1b6>
 800b7c8:	6822      	ldr	r2, [r4, #0]
 800b7ca:	07d2      	lsls	r2, r2, #31
 800b7cc:	d501      	bpl.n	800b7d2 <_printf_float+0x1ba>
 800b7ce:	3302      	adds	r3, #2
 800b7d0:	e7f4      	b.n	800b7bc <_printf_float+0x1a4>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e7f2      	b.n	800b7bc <_printf_float+0x1a4>
 800b7d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	db05      	blt.n	800b7ec <_printf_float+0x1d4>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	6121      	str	r1, [r4, #16]
 800b7e4:	07d8      	lsls	r0, r3, #31
 800b7e6:	d5ea      	bpl.n	800b7be <_printf_float+0x1a6>
 800b7e8:	1c4b      	adds	r3, r1, #1
 800b7ea:	e7e7      	b.n	800b7bc <_printf_float+0x1a4>
 800b7ec:	2900      	cmp	r1, #0
 800b7ee:	bfd4      	ite	le
 800b7f0:	f1c1 0202 	rsble	r2, r1, #2
 800b7f4:	2201      	movgt	r2, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	e7e0      	b.n	800b7bc <_printf_float+0x1a4>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	055a      	lsls	r2, r3, #21
 800b7fe:	d407      	bmi.n	800b810 <_printf_float+0x1f8>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	4642      	mov	r2, r8
 800b804:	4631      	mov	r1, r6
 800b806:	4628      	mov	r0, r5
 800b808:	47b8      	blx	r7
 800b80a:	3001      	adds	r0, #1
 800b80c:	d12c      	bne.n	800b868 <_printf_float+0x250>
 800b80e:	e764      	b.n	800b6da <_printf_float+0xc2>
 800b810:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b814:	f240 80e0 	bls.w	800b9d8 <_printf_float+0x3c0>
 800b818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	f7f5 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b824:	2800      	cmp	r0, #0
 800b826:	d034      	beq.n	800b892 <_printf_float+0x27a>
 800b828:	4a37      	ldr	r2, [pc, #220]	; (800b908 <_printf_float+0x2f0>)
 800b82a:	2301      	movs	r3, #1
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	47b8      	blx	r7
 800b832:	3001      	adds	r0, #1
 800b834:	f43f af51 	beq.w	800b6da <_printf_float+0xc2>
 800b838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b83c:	429a      	cmp	r2, r3
 800b83e:	db02      	blt.n	800b846 <_printf_float+0x22e>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	07d8      	lsls	r0, r3, #31
 800b844:	d510      	bpl.n	800b868 <_printf_float+0x250>
 800b846:	ee18 3a10 	vmov	r3, s16
 800b84a:	4652      	mov	r2, sl
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	f43f af41 	beq.w	800b6da <_printf_float+0xc2>
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	f104 091a 	add.w	r9, r4, #26
 800b860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b862:	3b01      	subs	r3, #1
 800b864:	4543      	cmp	r3, r8
 800b866:	dc09      	bgt.n	800b87c <_printf_float+0x264>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	079b      	lsls	r3, r3, #30
 800b86c:	f100 8105 	bmi.w	800ba7a <_printf_float+0x462>
 800b870:	68e0      	ldr	r0, [r4, #12]
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	4298      	cmp	r0, r3
 800b876:	bfb8      	it	lt
 800b878:	4618      	movlt	r0, r3
 800b87a:	e730      	b.n	800b6de <_printf_float+0xc6>
 800b87c:	2301      	movs	r3, #1
 800b87e:	464a      	mov	r2, r9
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	47b8      	blx	r7
 800b886:	3001      	adds	r0, #1
 800b888:	f43f af27 	beq.w	800b6da <_printf_float+0xc2>
 800b88c:	f108 0801 	add.w	r8, r8, #1
 800b890:	e7e6      	b.n	800b860 <_printf_float+0x248>
 800b892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	dc39      	bgt.n	800b90c <_printf_float+0x2f4>
 800b898:	4a1b      	ldr	r2, [pc, #108]	; (800b908 <_printf_float+0x2f0>)
 800b89a:	2301      	movs	r3, #1
 800b89c:	4631      	mov	r1, r6
 800b89e:	4628      	mov	r0, r5
 800b8a0:	47b8      	blx	r7
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	f43f af19 	beq.w	800b6da <_printf_float+0xc2>
 800b8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	d102      	bne.n	800b8b6 <_printf_float+0x29e>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	07d9      	lsls	r1, r3, #31
 800b8b4:	d5d8      	bpl.n	800b868 <_printf_float+0x250>
 800b8b6:	ee18 3a10 	vmov	r3, s16
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	4631      	mov	r1, r6
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b8      	blx	r7
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	f43f af09 	beq.w	800b6da <_printf_float+0xc2>
 800b8c8:	f04f 0900 	mov.w	r9, #0
 800b8cc:	f104 0a1a 	add.w	sl, r4, #26
 800b8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d2:	425b      	negs	r3, r3
 800b8d4:	454b      	cmp	r3, r9
 800b8d6:	dc01      	bgt.n	800b8dc <_printf_float+0x2c4>
 800b8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8da:	e792      	b.n	800b802 <_printf_float+0x1ea>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4652      	mov	r2, sl
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	47b8      	blx	r7
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f43f aef7 	beq.w	800b6da <_printf_float+0xc2>
 800b8ec:	f109 0901 	add.w	r9, r9, #1
 800b8f0:	e7ee      	b.n	800b8d0 <_printf_float+0x2b8>
 800b8f2:	bf00      	nop
 800b8f4:	7fefffff 	.word	0x7fefffff
 800b8f8:	0800f0c0 	.word	0x0800f0c0
 800b8fc:	0800f0c4 	.word	0x0800f0c4
 800b900:	0800f0cc 	.word	0x0800f0cc
 800b904:	0800f0c8 	.word	0x0800f0c8
 800b908:	0800f0d0 	.word	0x0800f0d0
 800b90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b90e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b910:	429a      	cmp	r2, r3
 800b912:	bfa8      	it	ge
 800b914:	461a      	movge	r2, r3
 800b916:	2a00      	cmp	r2, #0
 800b918:	4691      	mov	r9, r2
 800b91a:	dc37      	bgt.n	800b98c <_printf_float+0x374>
 800b91c:	f04f 0b00 	mov.w	fp, #0
 800b920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b924:	f104 021a 	add.w	r2, r4, #26
 800b928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	eba3 0309 	sub.w	r3, r3, r9
 800b930:	455b      	cmp	r3, fp
 800b932:	dc33      	bgt.n	800b99c <_printf_float+0x384>
 800b934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b938:	429a      	cmp	r2, r3
 800b93a:	db3b      	blt.n	800b9b4 <_printf_float+0x39c>
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	07da      	lsls	r2, r3, #31
 800b940:	d438      	bmi.n	800b9b4 <_printf_float+0x39c>
 800b942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b944:	9a05      	ldr	r2, [sp, #20]
 800b946:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b948:	1a9a      	subs	r2, r3, r2
 800b94a:	eba3 0901 	sub.w	r9, r3, r1
 800b94e:	4591      	cmp	r9, r2
 800b950:	bfa8      	it	ge
 800b952:	4691      	movge	r9, r2
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	dc35      	bgt.n	800b9c6 <_printf_float+0x3ae>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b962:	f104 0a1a 	add.w	sl, r4, #26
 800b966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	eba3 0309 	sub.w	r3, r3, r9
 800b970:	4543      	cmp	r3, r8
 800b972:	f77f af79 	ble.w	800b868 <_printf_float+0x250>
 800b976:	2301      	movs	r3, #1
 800b978:	4652      	mov	r2, sl
 800b97a:	4631      	mov	r1, r6
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b8      	blx	r7
 800b980:	3001      	adds	r0, #1
 800b982:	f43f aeaa 	beq.w	800b6da <_printf_float+0xc2>
 800b986:	f108 0801 	add.w	r8, r8, #1
 800b98a:	e7ec      	b.n	800b966 <_printf_float+0x34e>
 800b98c:	4613      	mov	r3, r2
 800b98e:	4631      	mov	r1, r6
 800b990:	4642      	mov	r2, r8
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	d1c0      	bne.n	800b91c <_printf_float+0x304>
 800b99a:	e69e      	b.n	800b6da <_printf_float+0xc2>
 800b99c:	2301      	movs	r3, #1
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	9205      	str	r2, [sp, #20]
 800b9a4:	47b8      	blx	r7
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f43f ae97 	beq.w	800b6da <_printf_float+0xc2>
 800b9ac:	9a05      	ldr	r2, [sp, #20]
 800b9ae:	f10b 0b01 	add.w	fp, fp, #1
 800b9b2:	e7b9      	b.n	800b928 <_printf_float+0x310>
 800b9b4:	ee18 3a10 	vmov	r3, s16
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b8      	blx	r7
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d1be      	bne.n	800b942 <_printf_float+0x32a>
 800b9c4:	e689      	b.n	800b6da <_printf_float+0xc2>
 800b9c6:	9a05      	ldr	r2, [sp, #20]
 800b9c8:	464b      	mov	r3, r9
 800b9ca:	4442      	add	r2, r8
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	47b8      	blx	r7
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d1c1      	bne.n	800b95a <_printf_float+0x342>
 800b9d6:	e680      	b.n	800b6da <_printf_float+0xc2>
 800b9d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9da:	2a01      	cmp	r2, #1
 800b9dc:	dc01      	bgt.n	800b9e2 <_printf_float+0x3ca>
 800b9de:	07db      	lsls	r3, r3, #31
 800b9e0:	d538      	bpl.n	800ba54 <_printf_float+0x43c>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4642      	mov	r2, r8
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	47b8      	blx	r7
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f43f ae74 	beq.w	800b6da <_printf_float+0xc2>
 800b9f2:	ee18 3a10 	vmov	r3, s16
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f ae6b 	beq.w	800b6da <_printf_float+0xc2>
 800ba04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f7f5 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba10:	b9d8      	cbnz	r0, 800ba4a <_printf_float+0x432>
 800ba12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba14:	f108 0201 	add.w	r2, r8, #1
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	d10e      	bne.n	800ba42 <_printf_float+0x42a>
 800ba24:	e659      	b.n	800b6da <_printf_float+0xc2>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4652      	mov	r2, sl
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	f43f ae52 	beq.w	800b6da <_printf_float+0xc2>
 800ba36:	f108 0801 	add.w	r8, r8, #1
 800ba3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	4543      	cmp	r3, r8
 800ba40:	dcf1      	bgt.n	800ba26 <_printf_float+0x40e>
 800ba42:	464b      	mov	r3, r9
 800ba44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba48:	e6dc      	b.n	800b804 <_printf_float+0x1ec>
 800ba4a:	f04f 0800 	mov.w	r8, #0
 800ba4e:	f104 0a1a 	add.w	sl, r4, #26
 800ba52:	e7f2      	b.n	800ba3a <_printf_float+0x422>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4642      	mov	r2, r8
 800ba58:	e7df      	b.n	800ba1a <_printf_float+0x402>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	464a      	mov	r2, r9
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4628      	mov	r0, r5
 800ba62:	47b8      	blx	r7
 800ba64:	3001      	adds	r0, #1
 800ba66:	f43f ae38 	beq.w	800b6da <_printf_float+0xc2>
 800ba6a:	f108 0801 	add.w	r8, r8, #1
 800ba6e:	68e3      	ldr	r3, [r4, #12]
 800ba70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba72:	1a5b      	subs	r3, r3, r1
 800ba74:	4543      	cmp	r3, r8
 800ba76:	dcf0      	bgt.n	800ba5a <_printf_float+0x442>
 800ba78:	e6fa      	b.n	800b870 <_printf_float+0x258>
 800ba7a:	f04f 0800 	mov.w	r8, #0
 800ba7e:	f104 0919 	add.w	r9, r4, #25
 800ba82:	e7f4      	b.n	800ba6e <_printf_float+0x456>

0800ba84 <_printf_common>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	4616      	mov	r6, r2
 800ba8a:	4699      	mov	r9, r3
 800ba8c:	688a      	ldr	r2, [r1, #8]
 800ba8e:	690b      	ldr	r3, [r1, #16]
 800ba90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bfb8      	it	lt
 800ba98:	4613      	movlt	r3, r2
 800ba9a:	6033      	str	r3, [r6, #0]
 800ba9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baa0:	4607      	mov	r7, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b10a      	cbz	r2, 800baaa <_printf_common+0x26>
 800baa6:	3301      	adds	r3, #1
 800baa8:	6033      	str	r3, [r6, #0]
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	0699      	lsls	r1, r3, #26
 800baae:	bf42      	ittt	mi
 800bab0:	6833      	ldrmi	r3, [r6, #0]
 800bab2:	3302      	addmi	r3, #2
 800bab4:	6033      	strmi	r3, [r6, #0]
 800bab6:	6825      	ldr	r5, [r4, #0]
 800bab8:	f015 0506 	ands.w	r5, r5, #6
 800babc:	d106      	bne.n	800bacc <_printf_common+0x48>
 800babe:	f104 0a19 	add.w	sl, r4, #25
 800bac2:	68e3      	ldr	r3, [r4, #12]
 800bac4:	6832      	ldr	r2, [r6, #0]
 800bac6:	1a9b      	subs	r3, r3, r2
 800bac8:	42ab      	cmp	r3, r5
 800baca:	dc26      	bgt.n	800bb1a <_printf_common+0x96>
 800bacc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bad0:	1e13      	subs	r3, r2, #0
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	bf18      	it	ne
 800bad6:	2301      	movne	r3, #1
 800bad8:	0692      	lsls	r2, r2, #26
 800bada:	d42b      	bmi.n	800bb34 <_printf_common+0xb0>
 800badc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae0:	4649      	mov	r1, r9
 800bae2:	4638      	mov	r0, r7
 800bae4:	47c0      	blx	r8
 800bae6:	3001      	adds	r0, #1
 800bae8:	d01e      	beq.n	800bb28 <_printf_common+0xa4>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	68e5      	ldr	r5, [r4, #12]
 800baee:	6832      	ldr	r2, [r6, #0]
 800baf0:	f003 0306 	and.w	r3, r3, #6
 800baf4:	2b04      	cmp	r3, #4
 800baf6:	bf08      	it	eq
 800baf8:	1aad      	subeq	r5, r5, r2
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	6922      	ldr	r2, [r4, #16]
 800bafe:	bf0c      	ite	eq
 800bb00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb04:	2500      	movne	r5, #0
 800bb06:	4293      	cmp	r3, r2
 800bb08:	bfc4      	itt	gt
 800bb0a:	1a9b      	subgt	r3, r3, r2
 800bb0c:	18ed      	addgt	r5, r5, r3
 800bb0e:	2600      	movs	r6, #0
 800bb10:	341a      	adds	r4, #26
 800bb12:	42b5      	cmp	r5, r6
 800bb14:	d11a      	bne.n	800bb4c <_printf_common+0xc8>
 800bb16:	2000      	movs	r0, #0
 800bb18:	e008      	b.n	800bb2c <_printf_common+0xa8>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	4649      	mov	r1, r9
 800bb20:	4638      	mov	r0, r7
 800bb22:	47c0      	blx	r8
 800bb24:	3001      	adds	r0, #1
 800bb26:	d103      	bne.n	800bb30 <_printf_common+0xac>
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	3501      	adds	r5, #1
 800bb32:	e7c6      	b.n	800bac2 <_printf_common+0x3e>
 800bb34:	18e1      	adds	r1, r4, r3
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	2030      	movs	r0, #48	; 0x30
 800bb3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb3e:	4422      	add	r2, r4
 800bb40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb48:	3302      	adds	r3, #2
 800bb4a:	e7c7      	b.n	800badc <_printf_common+0x58>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4649      	mov	r1, r9
 800bb52:	4638      	mov	r0, r7
 800bb54:	47c0      	blx	r8
 800bb56:	3001      	adds	r0, #1
 800bb58:	d0e6      	beq.n	800bb28 <_printf_common+0xa4>
 800bb5a:	3601      	adds	r6, #1
 800bb5c:	e7d9      	b.n	800bb12 <_printf_common+0x8e>
	...

0800bb60 <_printf_i>:
 800bb60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb64:	7e0f      	ldrb	r7, [r1, #24]
 800bb66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb68:	2f78      	cmp	r7, #120	; 0x78
 800bb6a:	4691      	mov	r9, r2
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	460c      	mov	r4, r1
 800bb70:	469a      	mov	sl, r3
 800bb72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb76:	d807      	bhi.n	800bb88 <_printf_i+0x28>
 800bb78:	2f62      	cmp	r7, #98	; 0x62
 800bb7a:	d80a      	bhi.n	800bb92 <_printf_i+0x32>
 800bb7c:	2f00      	cmp	r7, #0
 800bb7e:	f000 80d8 	beq.w	800bd32 <_printf_i+0x1d2>
 800bb82:	2f58      	cmp	r7, #88	; 0x58
 800bb84:	f000 80a3 	beq.w	800bcce <_printf_i+0x16e>
 800bb88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb90:	e03a      	b.n	800bc08 <_printf_i+0xa8>
 800bb92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb96:	2b15      	cmp	r3, #21
 800bb98:	d8f6      	bhi.n	800bb88 <_printf_i+0x28>
 800bb9a:	a101      	add	r1, pc, #4	; (adr r1, 800bba0 <_printf_i+0x40>)
 800bb9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bba0:	0800bbf9 	.word	0x0800bbf9
 800bba4:	0800bc0d 	.word	0x0800bc0d
 800bba8:	0800bb89 	.word	0x0800bb89
 800bbac:	0800bb89 	.word	0x0800bb89
 800bbb0:	0800bb89 	.word	0x0800bb89
 800bbb4:	0800bb89 	.word	0x0800bb89
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bb89 	.word	0x0800bb89
 800bbc0:	0800bb89 	.word	0x0800bb89
 800bbc4:	0800bb89 	.word	0x0800bb89
 800bbc8:	0800bb89 	.word	0x0800bb89
 800bbcc:	0800bd19 	.word	0x0800bd19
 800bbd0:	0800bc3d 	.word	0x0800bc3d
 800bbd4:	0800bcfb 	.word	0x0800bcfb
 800bbd8:	0800bb89 	.word	0x0800bb89
 800bbdc:	0800bb89 	.word	0x0800bb89
 800bbe0:	0800bd3b 	.word	0x0800bd3b
 800bbe4:	0800bb89 	.word	0x0800bb89
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bb89 	.word	0x0800bb89
 800bbf0:	0800bb89 	.word	0x0800bb89
 800bbf4:	0800bd03 	.word	0x0800bd03
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	1d1a      	adds	r2, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	602a      	str	r2, [r5, #0]
 800bc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e0a3      	b.n	800bd54 <_printf_i+0x1f4>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	6829      	ldr	r1, [r5, #0]
 800bc10:	0606      	lsls	r6, r0, #24
 800bc12:	f101 0304 	add.w	r3, r1, #4
 800bc16:	d50a      	bpl.n	800bc2e <_printf_i+0xce>
 800bc18:	680e      	ldr	r6, [r1, #0]
 800bc1a:	602b      	str	r3, [r5, #0]
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	da03      	bge.n	800bc28 <_printf_i+0xc8>
 800bc20:	232d      	movs	r3, #45	; 0x2d
 800bc22:	4276      	negs	r6, r6
 800bc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc28:	485e      	ldr	r0, [pc, #376]	; (800bda4 <_printf_i+0x244>)
 800bc2a:	230a      	movs	r3, #10
 800bc2c:	e019      	b.n	800bc62 <_printf_i+0x102>
 800bc2e:	680e      	ldr	r6, [r1, #0]
 800bc30:	602b      	str	r3, [r5, #0]
 800bc32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc36:	bf18      	it	ne
 800bc38:	b236      	sxthne	r6, r6
 800bc3a:	e7ef      	b.n	800bc1c <_printf_i+0xbc>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	6029      	str	r1, [r5, #0]
 800bc44:	0601      	lsls	r1, r0, #24
 800bc46:	d501      	bpl.n	800bc4c <_printf_i+0xec>
 800bc48:	681e      	ldr	r6, [r3, #0]
 800bc4a:	e002      	b.n	800bc52 <_printf_i+0xf2>
 800bc4c:	0646      	lsls	r6, r0, #25
 800bc4e:	d5fb      	bpl.n	800bc48 <_printf_i+0xe8>
 800bc50:	881e      	ldrh	r6, [r3, #0]
 800bc52:	4854      	ldr	r0, [pc, #336]	; (800bda4 <_printf_i+0x244>)
 800bc54:	2f6f      	cmp	r7, #111	; 0x6f
 800bc56:	bf0c      	ite	eq
 800bc58:	2308      	moveq	r3, #8
 800bc5a:	230a      	movne	r3, #10
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc62:	6865      	ldr	r5, [r4, #4]
 800bc64:	60a5      	str	r5, [r4, #8]
 800bc66:	2d00      	cmp	r5, #0
 800bc68:	bfa2      	ittt	ge
 800bc6a:	6821      	ldrge	r1, [r4, #0]
 800bc6c:	f021 0104 	bicge.w	r1, r1, #4
 800bc70:	6021      	strge	r1, [r4, #0]
 800bc72:	b90e      	cbnz	r6, 800bc78 <_printf_i+0x118>
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	d04d      	beq.n	800bd14 <_printf_i+0x1b4>
 800bc78:	4615      	mov	r5, r2
 800bc7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc7e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc82:	5dc7      	ldrb	r7, [r0, r7]
 800bc84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc88:	4637      	mov	r7, r6
 800bc8a:	42bb      	cmp	r3, r7
 800bc8c:	460e      	mov	r6, r1
 800bc8e:	d9f4      	bls.n	800bc7a <_printf_i+0x11a>
 800bc90:	2b08      	cmp	r3, #8
 800bc92:	d10b      	bne.n	800bcac <_printf_i+0x14c>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	07de      	lsls	r6, r3, #31
 800bc98:	d508      	bpl.n	800bcac <_printf_i+0x14c>
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	6861      	ldr	r1, [r4, #4]
 800bc9e:	4299      	cmp	r1, r3
 800bca0:	bfde      	ittt	le
 800bca2:	2330      	movle	r3, #48	; 0x30
 800bca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcac:	1b52      	subs	r2, r2, r5
 800bcae:	6122      	str	r2, [r4, #16]
 800bcb0:	f8cd a000 	str.w	sl, [sp]
 800bcb4:	464b      	mov	r3, r9
 800bcb6:	aa03      	add	r2, sp, #12
 800bcb8:	4621      	mov	r1, r4
 800bcba:	4640      	mov	r0, r8
 800bcbc:	f7ff fee2 	bl	800ba84 <_printf_common>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d14c      	bne.n	800bd5e <_printf_i+0x1fe>
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	b004      	add	sp, #16
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	4835      	ldr	r0, [pc, #212]	; (800bda4 <_printf_i+0x244>)
 800bcd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcd4:	6829      	ldr	r1, [r5, #0]
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcdc:	6029      	str	r1, [r5, #0]
 800bcde:	061d      	lsls	r5, r3, #24
 800bce0:	d514      	bpl.n	800bd0c <_printf_i+0x1ac>
 800bce2:	07df      	lsls	r7, r3, #31
 800bce4:	bf44      	itt	mi
 800bce6:	f043 0320 	orrmi.w	r3, r3, #32
 800bcea:	6023      	strmi	r3, [r4, #0]
 800bcec:	b91e      	cbnz	r6, 800bcf6 <_printf_i+0x196>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	f023 0320 	bic.w	r3, r3, #32
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	2310      	movs	r3, #16
 800bcf8:	e7b0      	b.n	800bc5c <_printf_i+0xfc>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	f043 0320 	orr.w	r3, r3, #32
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	2378      	movs	r3, #120	; 0x78
 800bd04:	4828      	ldr	r0, [pc, #160]	; (800bda8 <_printf_i+0x248>)
 800bd06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd0a:	e7e3      	b.n	800bcd4 <_printf_i+0x174>
 800bd0c:	0659      	lsls	r1, r3, #25
 800bd0e:	bf48      	it	mi
 800bd10:	b2b6      	uxthmi	r6, r6
 800bd12:	e7e6      	b.n	800bce2 <_printf_i+0x182>
 800bd14:	4615      	mov	r5, r2
 800bd16:	e7bb      	b.n	800bc90 <_printf_i+0x130>
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	6826      	ldr	r6, [r4, #0]
 800bd1c:	6961      	ldr	r1, [r4, #20]
 800bd1e:	1d18      	adds	r0, r3, #4
 800bd20:	6028      	str	r0, [r5, #0]
 800bd22:	0635      	lsls	r5, r6, #24
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	d501      	bpl.n	800bd2c <_printf_i+0x1cc>
 800bd28:	6019      	str	r1, [r3, #0]
 800bd2a:	e002      	b.n	800bd32 <_printf_i+0x1d2>
 800bd2c:	0670      	lsls	r0, r6, #25
 800bd2e:	d5fb      	bpl.n	800bd28 <_printf_i+0x1c8>
 800bd30:	8019      	strh	r1, [r3, #0]
 800bd32:	2300      	movs	r3, #0
 800bd34:	6123      	str	r3, [r4, #16]
 800bd36:	4615      	mov	r5, r2
 800bd38:	e7ba      	b.n	800bcb0 <_printf_i+0x150>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	1d1a      	adds	r2, r3, #4
 800bd3e:	602a      	str	r2, [r5, #0]
 800bd40:	681d      	ldr	r5, [r3, #0]
 800bd42:	6862      	ldr	r2, [r4, #4]
 800bd44:	2100      	movs	r1, #0
 800bd46:	4628      	mov	r0, r5
 800bd48:	f7f4 fa52 	bl	80001f0 <memchr>
 800bd4c:	b108      	cbz	r0, 800bd52 <_printf_i+0x1f2>
 800bd4e:	1b40      	subs	r0, r0, r5
 800bd50:	6060      	str	r0, [r4, #4]
 800bd52:	6863      	ldr	r3, [r4, #4]
 800bd54:	6123      	str	r3, [r4, #16]
 800bd56:	2300      	movs	r3, #0
 800bd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd5c:	e7a8      	b.n	800bcb0 <_printf_i+0x150>
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4649      	mov	r1, r9
 800bd64:	4640      	mov	r0, r8
 800bd66:	47d0      	blx	sl
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d0ab      	beq.n	800bcc4 <_printf_i+0x164>
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	079b      	lsls	r3, r3, #30
 800bd70:	d413      	bmi.n	800bd9a <_printf_i+0x23a>
 800bd72:	68e0      	ldr	r0, [r4, #12]
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	4298      	cmp	r0, r3
 800bd78:	bfb8      	it	lt
 800bd7a:	4618      	movlt	r0, r3
 800bd7c:	e7a4      	b.n	800bcc8 <_printf_i+0x168>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	4632      	mov	r2, r6
 800bd82:	4649      	mov	r1, r9
 800bd84:	4640      	mov	r0, r8
 800bd86:	47d0      	blx	sl
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d09b      	beq.n	800bcc4 <_printf_i+0x164>
 800bd8c:	3501      	adds	r5, #1
 800bd8e:	68e3      	ldr	r3, [r4, #12]
 800bd90:	9903      	ldr	r1, [sp, #12]
 800bd92:	1a5b      	subs	r3, r3, r1
 800bd94:	42ab      	cmp	r3, r5
 800bd96:	dcf2      	bgt.n	800bd7e <_printf_i+0x21e>
 800bd98:	e7eb      	b.n	800bd72 <_printf_i+0x212>
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	f104 0619 	add.w	r6, r4, #25
 800bda0:	e7f5      	b.n	800bd8e <_printf_i+0x22e>
 800bda2:	bf00      	nop
 800bda4:	0800f0d2 	.word	0x0800f0d2
 800bda8:	0800f0e3 	.word	0x0800f0e3

0800bdac <cleanup_glue>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	460c      	mov	r4, r1
 800bdb0:	6809      	ldr	r1, [r1, #0]
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	b109      	cbz	r1, 800bdba <cleanup_glue+0xe>
 800bdb6:	f7ff fff9 	bl	800bdac <cleanup_glue>
 800bdba:	4621      	mov	r1, r4
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc2:	f001 bc09 	b.w	800d5d8 <_free_r>
	...

0800bdc8 <_reclaim_reent>:
 800bdc8:	4b2c      	ldr	r3, [pc, #176]	; (800be7c <_reclaim_reent+0xb4>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4283      	cmp	r3, r0
 800bdce:	b570      	push	{r4, r5, r6, lr}
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	d051      	beq.n	800be78 <_reclaim_reent+0xb0>
 800bdd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bdd6:	b143      	cbz	r3, 800bdea <_reclaim_reent+0x22>
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d14a      	bne.n	800be74 <_reclaim_reent+0xac>
 800bdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde0:	6819      	ldr	r1, [r3, #0]
 800bde2:	b111      	cbz	r1, 800bdea <_reclaim_reent+0x22>
 800bde4:	4620      	mov	r0, r4
 800bde6:	f001 fbf7 	bl	800d5d8 <_free_r>
 800bdea:	6961      	ldr	r1, [r4, #20]
 800bdec:	b111      	cbz	r1, 800bdf4 <_reclaim_reent+0x2c>
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f001 fbf2 	bl	800d5d8 <_free_r>
 800bdf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdf6:	b111      	cbz	r1, 800bdfe <_reclaim_reent+0x36>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f001 fbed 	bl	800d5d8 <_free_r>
 800bdfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be00:	b111      	cbz	r1, 800be08 <_reclaim_reent+0x40>
 800be02:	4620      	mov	r0, r4
 800be04:	f001 fbe8 	bl	800d5d8 <_free_r>
 800be08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be0a:	b111      	cbz	r1, 800be12 <_reclaim_reent+0x4a>
 800be0c:	4620      	mov	r0, r4
 800be0e:	f001 fbe3 	bl	800d5d8 <_free_r>
 800be12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be14:	b111      	cbz	r1, 800be1c <_reclaim_reent+0x54>
 800be16:	4620      	mov	r0, r4
 800be18:	f001 fbde 	bl	800d5d8 <_free_r>
 800be1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be1e:	b111      	cbz	r1, 800be26 <_reclaim_reent+0x5e>
 800be20:	4620      	mov	r0, r4
 800be22:	f001 fbd9 	bl	800d5d8 <_free_r>
 800be26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be28:	b111      	cbz	r1, 800be30 <_reclaim_reent+0x68>
 800be2a:	4620      	mov	r0, r4
 800be2c:	f001 fbd4 	bl	800d5d8 <_free_r>
 800be30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be32:	b111      	cbz	r1, 800be3a <_reclaim_reent+0x72>
 800be34:	4620      	mov	r0, r4
 800be36:	f001 fbcf 	bl	800d5d8 <_free_r>
 800be3a:	69a3      	ldr	r3, [r4, #24]
 800be3c:	b1e3      	cbz	r3, 800be78 <_reclaim_reent+0xb0>
 800be3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be40:	4620      	mov	r0, r4
 800be42:	4798      	blx	r3
 800be44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be46:	b1b9      	cbz	r1, 800be78 <_reclaim_reent+0xb0>
 800be48:	4620      	mov	r0, r4
 800be4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be4e:	f7ff bfad 	b.w	800bdac <cleanup_glue>
 800be52:	5949      	ldr	r1, [r1, r5]
 800be54:	b941      	cbnz	r1, 800be68 <_reclaim_reent+0xa0>
 800be56:	3504      	adds	r5, #4
 800be58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be5a:	2d80      	cmp	r5, #128	; 0x80
 800be5c:	68d9      	ldr	r1, [r3, #12]
 800be5e:	d1f8      	bne.n	800be52 <_reclaim_reent+0x8a>
 800be60:	4620      	mov	r0, r4
 800be62:	f001 fbb9 	bl	800d5d8 <_free_r>
 800be66:	e7ba      	b.n	800bdde <_reclaim_reent+0x16>
 800be68:	680e      	ldr	r6, [r1, #0]
 800be6a:	4620      	mov	r0, r4
 800be6c:	f001 fbb4 	bl	800d5d8 <_free_r>
 800be70:	4631      	mov	r1, r6
 800be72:	e7ef      	b.n	800be54 <_reclaim_reent+0x8c>
 800be74:	2500      	movs	r5, #0
 800be76:	e7ef      	b.n	800be58 <_reclaim_reent+0x90>
 800be78:	bd70      	pop	{r4, r5, r6, pc}
 800be7a:	bf00      	nop
 800be7c:	2000001c 	.word	0x2000001c

0800be80 <_sbrk_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d06      	ldr	r5, [pc, #24]	; (800be9c <_sbrk_r+0x1c>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	602b      	str	r3, [r5, #0]
 800be8c:	f7f6 fc46 	bl	800271c <_sbrk>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_sbrk_r+0x1a>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_sbrk_r+0x1a>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	2000dbf8 	.word	0x2000dbf8

0800bea0 <siprintf>:
 800bea0:	b40e      	push	{r1, r2, r3}
 800bea2:	b500      	push	{lr}
 800bea4:	b09c      	sub	sp, #112	; 0x70
 800bea6:	ab1d      	add	r3, sp, #116	; 0x74
 800bea8:	9002      	str	r0, [sp, #8]
 800beaa:	9006      	str	r0, [sp, #24]
 800beac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800beb0:	4809      	ldr	r0, [pc, #36]	; (800bed8 <siprintf+0x38>)
 800beb2:	9107      	str	r1, [sp, #28]
 800beb4:	9104      	str	r1, [sp, #16]
 800beb6:	4909      	ldr	r1, [pc, #36]	; (800bedc <siprintf+0x3c>)
 800beb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bebc:	9105      	str	r1, [sp, #20]
 800bebe:	6800      	ldr	r0, [r0, #0]
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	a902      	add	r1, sp, #8
 800bec4:	f001 fc30 	bl	800d728 <_svfiprintf_r>
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
 800bece:	b01c      	add	sp, #112	; 0x70
 800bed0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bed4:	b003      	add	sp, #12
 800bed6:	4770      	bx	lr
 800bed8:	2000001c 	.word	0x2000001c
 800bedc:	ffff0208 	.word	0xffff0208

0800bee0 <__sread>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	460c      	mov	r4, r1
 800bee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee8:	f001 fd1e 	bl	800d928 <_read_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	bfab      	itete	ge
 800bef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bef2:	89a3      	ldrhlt	r3, [r4, #12]
 800bef4:	181b      	addge	r3, r3, r0
 800bef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800befa:	bfac      	ite	ge
 800befc:	6563      	strge	r3, [r4, #84]	; 0x54
 800befe:	81a3      	strhlt	r3, [r4, #12]
 800bf00:	bd10      	pop	{r4, pc}

0800bf02 <__swrite>:
 800bf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf06:	461f      	mov	r7, r3
 800bf08:	898b      	ldrh	r3, [r1, #12]
 800bf0a:	05db      	lsls	r3, r3, #23
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	460c      	mov	r4, r1
 800bf10:	4616      	mov	r6, r2
 800bf12:	d505      	bpl.n	800bf20 <__swrite+0x1e>
 800bf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf18:	2302      	movs	r3, #2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f000 ff9c 	bl	800ce58 <_lseek_r>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	4628      	mov	r0, r5
 800bf32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf36:	f000 b82b 	b.w	800bf90 <_write_r>

0800bf3a <__sseek>:
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf42:	f000 ff89 	bl	800ce58 <_lseek_r>
 800bf46:	1c43      	adds	r3, r0, #1
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	bf15      	itete	ne
 800bf4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf56:	81a3      	strheq	r3, [r4, #12]
 800bf58:	bf18      	it	ne
 800bf5a:	81a3      	strhne	r3, [r4, #12]
 800bf5c:	bd10      	pop	{r4, pc}

0800bf5e <__sclose>:
 800bf5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf62:	f000 b827 	b.w	800bfb4 <_close_r>

0800bf66 <strncmp>:
 800bf66:	b510      	push	{r4, lr}
 800bf68:	b17a      	cbz	r2, 800bf8a <strncmp+0x24>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	3901      	subs	r1, #1
 800bf6e:	1884      	adds	r4, r0, r2
 800bf70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf78:	4290      	cmp	r0, r2
 800bf7a:	d101      	bne.n	800bf80 <strncmp+0x1a>
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	d101      	bne.n	800bf84 <strncmp+0x1e>
 800bf80:	1a80      	subs	r0, r0, r2
 800bf82:	bd10      	pop	{r4, pc}
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d1f3      	bne.n	800bf70 <strncmp+0xa>
 800bf88:	e7fa      	b.n	800bf80 <strncmp+0x1a>
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	e7f9      	b.n	800bf82 <strncmp+0x1c>
	...

0800bf90 <_write_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d07      	ldr	r5, [pc, #28]	; (800bfb0 <_write_r+0x20>)
 800bf94:	4604      	mov	r4, r0
 800bf96:	4608      	mov	r0, r1
 800bf98:	4611      	mov	r1, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f7f6 fb6b 	bl	800267a <_write>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_write_r+0x1e>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_write_r+0x1e>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	2000dbf8 	.word	0x2000dbf8

0800bfb4 <_close_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	; (800bfd0 <_close_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f6 fb77 	bl	80026b2 <_close>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_close_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_close_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	2000dbf8 	.word	0x2000dbf8

0800bfd4 <quorem>:
 800bfd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	6903      	ldr	r3, [r0, #16]
 800bfda:	690c      	ldr	r4, [r1, #16]
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	4607      	mov	r7, r0
 800bfe0:	f2c0 8081 	blt.w	800c0e6 <quorem+0x112>
 800bfe4:	3c01      	subs	r4, #1
 800bfe6:	f101 0814 	add.w	r8, r1, #20
 800bfea:	f100 0514 	add.w	r5, r0, #20
 800bfee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bff2:	9301      	str	r3, [sp, #4]
 800bff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bffc:	3301      	adds	r3, #1
 800bffe:	429a      	cmp	r2, r3
 800c000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c008:	fbb2 f6f3 	udiv	r6, r2, r3
 800c00c:	d331      	bcc.n	800c072 <quorem+0x9e>
 800c00e:	f04f 0e00 	mov.w	lr, #0
 800c012:	4640      	mov	r0, r8
 800c014:	46ac      	mov	ip, r5
 800c016:	46f2      	mov	sl, lr
 800c018:	f850 2b04 	ldr.w	r2, [r0], #4
 800c01c:	b293      	uxth	r3, r2
 800c01e:	fb06 e303 	mla	r3, r6, r3, lr
 800c022:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c026:	b29b      	uxth	r3, r3
 800c028:	ebaa 0303 	sub.w	r3, sl, r3
 800c02c:	f8dc a000 	ldr.w	sl, [ip]
 800c030:	0c12      	lsrs	r2, r2, #16
 800c032:	fa13 f38a 	uxtah	r3, r3, sl
 800c036:	fb06 e202 	mla	r2, r6, r2, lr
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	9b00      	ldr	r3, [sp, #0]
 800c03e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c042:	b292      	uxth	r2, r2
 800c044:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c04c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c050:	4581      	cmp	r9, r0
 800c052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c056:	f84c 3b04 	str.w	r3, [ip], #4
 800c05a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c05e:	d2db      	bcs.n	800c018 <quorem+0x44>
 800c060:	f855 300b 	ldr.w	r3, [r5, fp]
 800c064:	b92b      	cbnz	r3, 800c072 <quorem+0x9e>
 800c066:	9b01      	ldr	r3, [sp, #4]
 800c068:	3b04      	subs	r3, #4
 800c06a:	429d      	cmp	r5, r3
 800c06c:	461a      	mov	r2, r3
 800c06e:	d32e      	bcc.n	800c0ce <quorem+0xfa>
 800c070:	613c      	str	r4, [r7, #16]
 800c072:	4638      	mov	r0, r7
 800c074:	f001 f998 	bl	800d3a8 <__mcmp>
 800c078:	2800      	cmp	r0, #0
 800c07a:	db24      	blt.n	800c0c6 <quorem+0xf2>
 800c07c:	3601      	adds	r6, #1
 800c07e:	4628      	mov	r0, r5
 800c080:	f04f 0c00 	mov.w	ip, #0
 800c084:	f858 2b04 	ldr.w	r2, [r8], #4
 800c088:	f8d0 e000 	ldr.w	lr, [r0]
 800c08c:	b293      	uxth	r3, r2
 800c08e:	ebac 0303 	sub.w	r3, ip, r3
 800c092:	0c12      	lsrs	r2, r2, #16
 800c094:	fa13 f38e 	uxtah	r3, r3, lr
 800c098:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c09c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a6:	45c1      	cmp	r9, r8
 800c0a8:	f840 3b04 	str.w	r3, [r0], #4
 800c0ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0b0:	d2e8      	bcs.n	800c084 <quorem+0xb0>
 800c0b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ba:	b922      	cbnz	r2, 800c0c6 <quorem+0xf2>
 800c0bc:	3b04      	subs	r3, #4
 800c0be:	429d      	cmp	r5, r3
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	d30a      	bcc.n	800c0da <quorem+0x106>
 800c0c4:	613c      	str	r4, [r7, #16]
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	b003      	add	sp, #12
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ce:	6812      	ldr	r2, [r2, #0]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	2a00      	cmp	r2, #0
 800c0d4:	d1cc      	bne.n	800c070 <quorem+0x9c>
 800c0d6:	3c01      	subs	r4, #1
 800c0d8:	e7c7      	b.n	800c06a <quorem+0x96>
 800c0da:	6812      	ldr	r2, [r2, #0]
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	d1f0      	bne.n	800c0c4 <quorem+0xf0>
 800c0e2:	3c01      	subs	r4, #1
 800c0e4:	e7eb      	b.n	800c0be <quorem+0xea>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e7ee      	b.n	800c0c8 <quorem+0xf4>
 800c0ea:	0000      	movs	r0, r0
 800c0ec:	0000      	movs	r0, r0
	...

0800c0f0 <_dtoa_r>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	ed2d 8b04 	vpush	{d8-d9}
 800c0f8:	ec57 6b10 	vmov	r6, r7, d0
 800c0fc:	b093      	sub	sp, #76	; 0x4c
 800c0fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c104:	9106      	str	r1, [sp, #24]
 800c106:	ee10 aa10 	vmov	sl, s0
 800c10a:	4604      	mov	r4, r0
 800c10c:	9209      	str	r2, [sp, #36]	; 0x24
 800c10e:	930c      	str	r3, [sp, #48]	; 0x30
 800c110:	46bb      	mov	fp, r7
 800c112:	b975      	cbnz	r5, 800c132 <_dtoa_r+0x42>
 800c114:	2010      	movs	r0, #16
 800c116:	f000 feb1 	bl	800ce7c <malloc>
 800c11a:	4602      	mov	r2, r0
 800c11c:	6260      	str	r0, [r4, #36]	; 0x24
 800c11e:	b920      	cbnz	r0, 800c12a <_dtoa_r+0x3a>
 800c120:	4ba7      	ldr	r3, [pc, #668]	; (800c3c0 <_dtoa_r+0x2d0>)
 800c122:	21ea      	movs	r1, #234	; 0xea
 800c124:	48a7      	ldr	r0, [pc, #668]	; (800c3c4 <_dtoa_r+0x2d4>)
 800c126:	f001 fc11 	bl	800d94c <__assert_func>
 800c12a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c12e:	6005      	str	r5, [r0, #0]
 800c130:	60c5      	str	r5, [r0, #12]
 800c132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c134:	6819      	ldr	r1, [r3, #0]
 800c136:	b151      	cbz	r1, 800c14e <_dtoa_r+0x5e>
 800c138:	685a      	ldr	r2, [r3, #4]
 800c13a:	604a      	str	r2, [r1, #4]
 800c13c:	2301      	movs	r3, #1
 800c13e:	4093      	lsls	r3, r2
 800c140:	608b      	str	r3, [r1, #8]
 800c142:	4620      	mov	r0, r4
 800c144:	f000 feee 	bl	800cf24 <_Bfree>
 800c148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	1e3b      	subs	r3, r7, #0
 800c150:	bfaa      	itet	ge
 800c152:	2300      	movge	r3, #0
 800c154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c158:	f8c8 3000 	strge.w	r3, [r8]
 800c15c:	4b9a      	ldr	r3, [pc, #616]	; (800c3c8 <_dtoa_r+0x2d8>)
 800c15e:	bfbc      	itt	lt
 800c160:	2201      	movlt	r2, #1
 800c162:	f8c8 2000 	strlt.w	r2, [r8]
 800c166:	ea33 030b 	bics.w	r3, r3, fp
 800c16a:	d11b      	bne.n	800c1a4 <_dtoa_r+0xb4>
 800c16c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c16e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c178:	4333      	orrs	r3, r6
 800c17a:	f000 8592 	beq.w	800cca2 <_dtoa_r+0xbb2>
 800c17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c180:	b963      	cbnz	r3, 800c19c <_dtoa_r+0xac>
 800c182:	4b92      	ldr	r3, [pc, #584]	; (800c3cc <_dtoa_r+0x2dc>)
 800c184:	e022      	b.n	800c1cc <_dtoa_r+0xdc>
 800c186:	4b92      	ldr	r3, [pc, #584]	; (800c3d0 <_dtoa_r+0x2e0>)
 800c188:	9301      	str	r3, [sp, #4]
 800c18a:	3308      	adds	r3, #8
 800c18c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	9801      	ldr	r0, [sp, #4]
 800c192:	b013      	add	sp, #76	; 0x4c
 800c194:	ecbd 8b04 	vpop	{d8-d9}
 800c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	4b8b      	ldr	r3, [pc, #556]	; (800c3cc <_dtoa_r+0x2dc>)
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	3303      	adds	r3, #3
 800c1a2:	e7f3      	b.n	800c18c <_dtoa_r+0x9c>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	4659      	mov	r1, fp
 800c1ac:	f7f4 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1b0:	ec4b ab19 	vmov	d9, sl, fp
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	b158      	cbz	r0, 800c1d0 <_dtoa_r+0xe0>
 800c1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 856b 	beq.w	800cc9c <_dtoa_r+0xbac>
 800c1c6:	4883      	ldr	r0, [pc, #524]	; (800c3d4 <_dtoa_r+0x2e4>)
 800c1c8:	6018      	str	r0, [r3, #0]
 800c1ca:	1e43      	subs	r3, r0, #1
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	e7df      	b.n	800c190 <_dtoa_r+0xa0>
 800c1d0:	ec4b ab10 	vmov	d0, sl, fp
 800c1d4:	aa10      	add	r2, sp, #64	; 0x40
 800c1d6:	a911      	add	r1, sp, #68	; 0x44
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f001 f98b 	bl	800d4f4 <__d2b>
 800c1de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c1e2:	ee08 0a10 	vmov	s16, r0
 800c1e6:	2d00      	cmp	r5, #0
 800c1e8:	f000 8084 	beq.w	800c2f4 <_dtoa_r+0x204>
 800c1ec:	ee19 3a90 	vmov	r3, s19
 800c1f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1f8:	4656      	mov	r6, sl
 800c1fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c206:	4b74      	ldr	r3, [pc, #464]	; (800c3d8 <_dtoa_r+0x2e8>)
 800c208:	2200      	movs	r2, #0
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7f4 f843 	bl	8000298 <__aeabi_dsub>
 800c212:	a365      	add	r3, pc, #404	; (adr r3, 800c3a8 <_dtoa_r+0x2b8>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f7f4 f9f6 	bl	8000608 <__aeabi_dmul>
 800c21c:	a364      	add	r3, pc, #400	; (adr r3, 800c3b0 <_dtoa_r+0x2c0>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f4 f83b 	bl	800029c <__adddf3>
 800c226:	4606      	mov	r6, r0
 800c228:	4628      	mov	r0, r5
 800c22a:	460f      	mov	r7, r1
 800c22c:	f7f4 f982 	bl	8000534 <__aeabi_i2d>
 800c230:	a361      	add	r3, pc, #388	; (adr r3, 800c3b8 <_dtoa_r+0x2c8>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 f9e7 	bl	8000608 <__aeabi_dmul>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4630      	mov	r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	f7f4 f82b 	bl	800029c <__adddf3>
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	f7f4 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800c24e:	2200      	movs	r2, #0
 800c250:	9000      	str	r0, [sp, #0]
 800c252:	2300      	movs	r3, #0
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 fc48 	bl	8000aec <__aeabi_dcmplt>
 800c25c:	b150      	cbz	r0, 800c274 <_dtoa_r+0x184>
 800c25e:	9800      	ldr	r0, [sp, #0]
 800c260:	f7f4 f968 	bl	8000534 <__aeabi_i2d>
 800c264:	4632      	mov	r2, r6
 800c266:	463b      	mov	r3, r7
 800c268:	f7f4 fc36 	bl	8000ad8 <__aeabi_dcmpeq>
 800c26c:	b910      	cbnz	r0, 800c274 <_dtoa_r+0x184>
 800c26e:	9b00      	ldr	r3, [sp, #0]
 800c270:	3b01      	subs	r3, #1
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	9b00      	ldr	r3, [sp, #0]
 800c276:	2b16      	cmp	r3, #22
 800c278:	d85a      	bhi.n	800c330 <_dtoa_r+0x240>
 800c27a:	9a00      	ldr	r2, [sp, #0]
 800c27c:	4b57      	ldr	r3, [pc, #348]	; (800c3dc <_dtoa_r+0x2ec>)
 800c27e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	ec51 0b19 	vmov	r0, r1, d9
 800c28a:	f7f4 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d050      	beq.n	800c334 <_dtoa_r+0x244>
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	3b01      	subs	r3, #1
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c29e:	1b5d      	subs	r5, r3, r5
 800c2a0:	1e6b      	subs	r3, r5, #1
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	bf45      	ittet	mi
 800c2a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c2aa:	9304      	strmi	r3, [sp, #16]
 800c2ac:	2300      	movpl	r3, #0
 800c2ae:	2300      	movmi	r3, #0
 800c2b0:	bf4c      	ite	mi
 800c2b2:	9305      	strmi	r3, [sp, #20]
 800c2b4:	9304      	strpl	r3, [sp, #16]
 800c2b6:	9b00      	ldr	r3, [sp, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db3d      	blt.n	800c338 <_dtoa_r+0x248>
 800c2bc:	9b05      	ldr	r3, [sp, #20]
 800c2be:	9a00      	ldr	r2, [sp, #0]
 800c2c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c2c2:	4413      	add	r3, r2
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9307      	str	r3, [sp, #28]
 800c2ca:	9b06      	ldr	r3, [sp, #24]
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	f200 8089 	bhi.w	800c3e4 <_dtoa_r+0x2f4>
 800c2d2:	2b05      	cmp	r3, #5
 800c2d4:	bfc4      	itt	gt
 800c2d6:	3b04      	subgt	r3, #4
 800c2d8:	9306      	strgt	r3, [sp, #24]
 800c2da:	9b06      	ldr	r3, [sp, #24]
 800c2dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c2e0:	bfcc      	ite	gt
 800c2e2:	2500      	movgt	r5, #0
 800c2e4:	2501      	movle	r5, #1
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	f200 8087 	bhi.w	800c3fa <_dtoa_r+0x30a>
 800c2ec:	e8df f003 	tbb	[pc, r3]
 800c2f0:	59383a2d 	.word	0x59383a2d
 800c2f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2f8:	441d      	add	r5, r3
 800c2fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2fe:	2b20      	cmp	r3, #32
 800c300:	bfc1      	itttt	gt
 800c302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c30a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c30e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c312:	bfda      	itte	le
 800c314:	f1c3 0320 	rsble	r3, r3, #32
 800c318:	fa06 f003 	lslle.w	r0, r6, r3
 800c31c:	4318      	orrgt	r0, r3
 800c31e:	f7f4 f8f9 	bl	8000514 <__aeabi_ui2d>
 800c322:	2301      	movs	r3, #1
 800c324:	4606      	mov	r6, r0
 800c326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c32a:	3d01      	subs	r5, #1
 800c32c:	930e      	str	r3, [sp, #56]	; 0x38
 800c32e:	e76a      	b.n	800c206 <_dtoa_r+0x116>
 800c330:	2301      	movs	r3, #1
 800c332:	e7b2      	b.n	800c29a <_dtoa_r+0x1aa>
 800c334:	900b      	str	r0, [sp, #44]	; 0x2c
 800c336:	e7b1      	b.n	800c29c <_dtoa_r+0x1ac>
 800c338:	9b04      	ldr	r3, [sp, #16]
 800c33a:	9a00      	ldr	r2, [sp, #0]
 800c33c:	1a9b      	subs	r3, r3, r2
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	4253      	negs	r3, r2
 800c342:	9307      	str	r3, [sp, #28]
 800c344:	2300      	movs	r3, #0
 800c346:	930a      	str	r3, [sp, #40]	; 0x28
 800c348:	e7bf      	b.n	800c2ca <_dtoa_r+0x1da>
 800c34a:	2300      	movs	r3, #0
 800c34c:	9308      	str	r3, [sp, #32]
 800c34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c350:	2b00      	cmp	r3, #0
 800c352:	dc55      	bgt.n	800c400 <_dtoa_r+0x310>
 800c354:	2301      	movs	r3, #1
 800c356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c35a:	461a      	mov	r2, r3
 800c35c:	9209      	str	r2, [sp, #36]	; 0x24
 800c35e:	e00c      	b.n	800c37a <_dtoa_r+0x28a>
 800c360:	2301      	movs	r3, #1
 800c362:	e7f3      	b.n	800c34c <_dtoa_r+0x25c>
 800c364:	2300      	movs	r3, #0
 800c366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c368:	9308      	str	r3, [sp, #32]
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	4413      	add	r3, r2
 800c36e:	9302      	str	r3, [sp, #8]
 800c370:	3301      	adds	r3, #1
 800c372:	2b01      	cmp	r3, #1
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	bfb8      	it	lt
 800c378:	2301      	movlt	r3, #1
 800c37a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c37c:	2200      	movs	r2, #0
 800c37e:	6042      	str	r2, [r0, #4]
 800c380:	2204      	movs	r2, #4
 800c382:	f102 0614 	add.w	r6, r2, #20
 800c386:	429e      	cmp	r6, r3
 800c388:	6841      	ldr	r1, [r0, #4]
 800c38a:	d93d      	bls.n	800c408 <_dtoa_r+0x318>
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 fd89 	bl	800cea4 <_Balloc>
 800c392:	9001      	str	r0, [sp, #4]
 800c394:	2800      	cmp	r0, #0
 800c396:	d13b      	bne.n	800c410 <_dtoa_r+0x320>
 800c398:	4b11      	ldr	r3, [pc, #68]	; (800c3e0 <_dtoa_r+0x2f0>)
 800c39a:	4602      	mov	r2, r0
 800c39c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c3a0:	e6c0      	b.n	800c124 <_dtoa_r+0x34>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e7df      	b.n	800c366 <_dtoa_r+0x276>
 800c3a6:	bf00      	nop
 800c3a8:	636f4361 	.word	0x636f4361
 800c3ac:	3fd287a7 	.word	0x3fd287a7
 800c3b0:	8b60c8b3 	.word	0x8b60c8b3
 800c3b4:	3fc68a28 	.word	0x3fc68a28
 800c3b8:	509f79fb 	.word	0x509f79fb
 800c3bc:	3fd34413 	.word	0x3fd34413
 800c3c0:	0800f101 	.word	0x0800f101
 800c3c4:	0800f118 	.word	0x0800f118
 800c3c8:	7ff00000 	.word	0x7ff00000
 800c3cc:	0800f0fd 	.word	0x0800f0fd
 800c3d0:	0800f0f4 	.word	0x0800f0f4
 800c3d4:	0800f0d1 	.word	0x0800f0d1
 800c3d8:	3ff80000 	.word	0x3ff80000
 800c3dc:	0800f208 	.word	0x0800f208
 800c3e0:	0800f173 	.word	0x0800f173
 800c3e4:	2501      	movs	r5, #1
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9306      	str	r3, [sp, #24]
 800c3ea:	9508      	str	r5, [sp, #32]
 800c3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2312      	movs	r3, #18
 800c3f8:	e7b0      	b.n	800c35c <_dtoa_r+0x26c>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	9308      	str	r3, [sp, #32]
 800c3fe:	e7f5      	b.n	800c3ec <_dtoa_r+0x2fc>
 800c400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c406:	e7b8      	b.n	800c37a <_dtoa_r+0x28a>
 800c408:	3101      	adds	r1, #1
 800c40a:	6041      	str	r1, [r0, #4]
 800c40c:	0052      	lsls	r2, r2, #1
 800c40e:	e7b8      	b.n	800c382 <_dtoa_r+0x292>
 800c410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c412:	9a01      	ldr	r2, [sp, #4]
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	2b0e      	cmp	r3, #14
 800c41a:	f200 809d 	bhi.w	800c558 <_dtoa_r+0x468>
 800c41e:	2d00      	cmp	r5, #0
 800c420:	f000 809a 	beq.w	800c558 <_dtoa_r+0x468>
 800c424:	9b00      	ldr	r3, [sp, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	dd32      	ble.n	800c490 <_dtoa_r+0x3a0>
 800c42a:	4ab7      	ldr	r2, [pc, #732]	; (800c708 <_dtoa_r+0x618>)
 800c42c:	f003 030f 	and.w	r3, r3, #15
 800c430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c434:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	05d8      	lsls	r0, r3, #23
 800c43c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c440:	d516      	bpl.n	800c470 <_dtoa_r+0x380>
 800c442:	4bb2      	ldr	r3, [pc, #712]	; (800c70c <_dtoa_r+0x61c>)
 800c444:	ec51 0b19 	vmov	r0, r1, d9
 800c448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c44c:	f7f4 fa06 	bl	800085c <__aeabi_ddiv>
 800c450:	f007 070f 	and.w	r7, r7, #15
 800c454:	4682      	mov	sl, r0
 800c456:	468b      	mov	fp, r1
 800c458:	2503      	movs	r5, #3
 800c45a:	4eac      	ldr	r6, [pc, #688]	; (800c70c <_dtoa_r+0x61c>)
 800c45c:	b957      	cbnz	r7, 800c474 <_dtoa_r+0x384>
 800c45e:	4642      	mov	r2, r8
 800c460:	464b      	mov	r3, r9
 800c462:	4650      	mov	r0, sl
 800c464:	4659      	mov	r1, fp
 800c466:	f7f4 f9f9 	bl	800085c <__aeabi_ddiv>
 800c46a:	4682      	mov	sl, r0
 800c46c:	468b      	mov	fp, r1
 800c46e:	e028      	b.n	800c4c2 <_dtoa_r+0x3d2>
 800c470:	2502      	movs	r5, #2
 800c472:	e7f2      	b.n	800c45a <_dtoa_r+0x36a>
 800c474:	07f9      	lsls	r1, r7, #31
 800c476:	d508      	bpl.n	800c48a <_dtoa_r+0x39a>
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c480:	f7f4 f8c2 	bl	8000608 <__aeabi_dmul>
 800c484:	3501      	adds	r5, #1
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	107f      	asrs	r7, r7, #1
 800c48c:	3608      	adds	r6, #8
 800c48e:	e7e5      	b.n	800c45c <_dtoa_r+0x36c>
 800c490:	f000 809b 	beq.w	800c5ca <_dtoa_r+0x4da>
 800c494:	9b00      	ldr	r3, [sp, #0]
 800c496:	4f9d      	ldr	r7, [pc, #628]	; (800c70c <_dtoa_r+0x61c>)
 800c498:	425e      	negs	r6, r3
 800c49a:	4b9b      	ldr	r3, [pc, #620]	; (800c708 <_dtoa_r+0x618>)
 800c49c:	f006 020f 	and.w	r2, r6, #15
 800c4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	ec51 0b19 	vmov	r0, r1, d9
 800c4ac:	f7f4 f8ac 	bl	8000608 <__aeabi_dmul>
 800c4b0:	1136      	asrs	r6, r6, #4
 800c4b2:	4682      	mov	sl, r0
 800c4b4:	468b      	mov	fp, r1
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	2502      	movs	r5, #2
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	d17a      	bne.n	800c5b4 <_dtoa_r+0x4c4>
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1d3      	bne.n	800c46a <_dtoa_r+0x37a>
 800c4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 8082 	beq.w	800c5ce <_dtoa_r+0x4de>
 800c4ca:	4b91      	ldr	r3, [pc, #580]	; (800c710 <_dtoa_r+0x620>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	4650      	mov	r0, sl
 800c4d0:	4659      	mov	r1, fp
 800c4d2:	f7f4 fb0b 	bl	8000aec <__aeabi_dcmplt>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d079      	beq.n	800c5ce <_dtoa_r+0x4de>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d076      	beq.n	800c5ce <_dtoa_r+0x4de>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dd36      	ble.n	800c554 <_dtoa_r+0x464>
 800c4e6:	9b00      	ldr	r3, [sp, #0]
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	4659      	mov	r1, fp
 800c4ec:	1e5f      	subs	r7, r3, #1
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4b88      	ldr	r3, [pc, #544]	; (800c714 <_dtoa_r+0x624>)
 800c4f2:	f7f4 f889 	bl	8000608 <__aeabi_dmul>
 800c4f6:	9e02      	ldr	r6, [sp, #8]
 800c4f8:	4682      	mov	sl, r0
 800c4fa:	468b      	mov	fp, r1
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	4628      	mov	r0, r5
 800c500:	f7f4 f818 	bl	8000534 <__aeabi_i2d>
 800c504:	4652      	mov	r2, sl
 800c506:	465b      	mov	r3, fp
 800c508:	f7f4 f87e 	bl	8000608 <__aeabi_dmul>
 800c50c:	4b82      	ldr	r3, [pc, #520]	; (800c718 <_dtoa_r+0x628>)
 800c50e:	2200      	movs	r2, #0
 800c510:	f7f3 fec4 	bl	800029c <__adddf3>
 800c514:	46d0      	mov	r8, sl
 800c516:	46d9      	mov	r9, fp
 800c518:	4682      	mov	sl, r0
 800c51a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d158      	bne.n	800c5d4 <_dtoa_r+0x4e4>
 800c522:	4b7e      	ldr	r3, [pc, #504]	; (800c71c <_dtoa_r+0x62c>)
 800c524:	2200      	movs	r2, #0
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f3 feb5 	bl	8000298 <__aeabi_dsub>
 800c52e:	4652      	mov	r2, sl
 800c530:	465b      	mov	r3, fp
 800c532:	4680      	mov	r8, r0
 800c534:	4689      	mov	r9, r1
 800c536:	f7f4 faf7 	bl	8000b28 <__aeabi_dcmpgt>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	f040 8295 	bne.w	800ca6a <_dtoa_r+0x97a>
 800c540:	4652      	mov	r2, sl
 800c542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c546:	4640      	mov	r0, r8
 800c548:	4649      	mov	r1, r9
 800c54a:	f7f4 facf 	bl	8000aec <__aeabi_dcmplt>
 800c54e:	2800      	cmp	r0, #0
 800c550:	f040 8289 	bne.w	800ca66 <_dtoa_r+0x976>
 800c554:	ec5b ab19 	vmov	sl, fp, d9
 800c558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f2c0 8148 	blt.w	800c7f0 <_dtoa_r+0x700>
 800c560:	9a00      	ldr	r2, [sp, #0]
 800c562:	2a0e      	cmp	r2, #14
 800c564:	f300 8144 	bgt.w	800c7f0 <_dtoa_r+0x700>
 800c568:	4b67      	ldr	r3, [pc, #412]	; (800c708 <_dtoa_r+0x618>)
 800c56a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c56e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c574:	2b00      	cmp	r3, #0
 800c576:	f280 80d5 	bge.w	800c724 <_dtoa_r+0x634>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f300 80d1 	bgt.w	800c724 <_dtoa_r+0x634>
 800c582:	f040 826f 	bne.w	800ca64 <_dtoa_r+0x974>
 800c586:	4b65      	ldr	r3, [pc, #404]	; (800c71c <_dtoa_r+0x62c>)
 800c588:	2200      	movs	r2, #0
 800c58a:	4640      	mov	r0, r8
 800c58c:	4649      	mov	r1, r9
 800c58e:	f7f4 f83b 	bl	8000608 <__aeabi_dmul>
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	f7f4 fabd 	bl	8000b14 <__aeabi_dcmpge>
 800c59a:	9e03      	ldr	r6, [sp, #12]
 800c59c:	4637      	mov	r7, r6
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f040 8245 	bne.w	800ca2e <_dtoa_r+0x93e>
 800c5a4:	9d01      	ldr	r5, [sp, #4]
 800c5a6:	2331      	movs	r3, #49	; 0x31
 800c5a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ac:	9b00      	ldr	r3, [sp, #0]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	e240      	b.n	800ca36 <_dtoa_r+0x946>
 800c5b4:	07f2      	lsls	r2, r6, #31
 800c5b6:	d505      	bpl.n	800c5c4 <_dtoa_r+0x4d4>
 800c5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5bc:	f7f4 f824 	bl	8000608 <__aeabi_dmul>
 800c5c0:	3501      	adds	r5, #1
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	1076      	asrs	r6, r6, #1
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	e777      	b.n	800c4ba <_dtoa_r+0x3ca>
 800c5ca:	2502      	movs	r5, #2
 800c5cc:	e779      	b.n	800c4c2 <_dtoa_r+0x3d2>
 800c5ce:	9f00      	ldr	r7, [sp, #0]
 800c5d0:	9e03      	ldr	r6, [sp, #12]
 800c5d2:	e794      	b.n	800c4fe <_dtoa_r+0x40e>
 800c5d4:	9901      	ldr	r1, [sp, #4]
 800c5d6:	4b4c      	ldr	r3, [pc, #304]	; (800c708 <_dtoa_r+0x618>)
 800c5d8:	4431      	add	r1, r6
 800c5da:	910d      	str	r1, [sp, #52]	; 0x34
 800c5dc:	9908      	ldr	r1, [sp, #32]
 800c5de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	d043      	beq.n	800c672 <_dtoa_r+0x582>
 800c5ea:	494d      	ldr	r1, [pc, #308]	; (800c720 <_dtoa_r+0x630>)
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	f7f4 f935 	bl	800085c <__aeabi_ddiv>
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	465b      	mov	r3, fp
 800c5f6:	f7f3 fe4f 	bl	8000298 <__aeabi_dsub>
 800c5fa:	9d01      	ldr	r5, [sp, #4]
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	468b      	mov	fp, r1
 800c600:	4649      	mov	r1, r9
 800c602:	4640      	mov	r0, r8
 800c604:	f7f4 fab0 	bl	8000b68 <__aeabi_d2iz>
 800c608:	4606      	mov	r6, r0
 800c60a:	f7f3 ff93 	bl	8000534 <__aeabi_i2d>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f3 fe3f 	bl	8000298 <__aeabi_dsub>
 800c61a:	3630      	adds	r6, #48	; 0x30
 800c61c:	f805 6b01 	strb.w	r6, [r5], #1
 800c620:	4652      	mov	r2, sl
 800c622:	465b      	mov	r3, fp
 800c624:	4680      	mov	r8, r0
 800c626:	4689      	mov	r9, r1
 800c628:	f7f4 fa60 	bl	8000aec <__aeabi_dcmplt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d163      	bne.n	800c6f8 <_dtoa_r+0x608>
 800c630:	4642      	mov	r2, r8
 800c632:	464b      	mov	r3, r9
 800c634:	4936      	ldr	r1, [pc, #216]	; (800c710 <_dtoa_r+0x620>)
 800c636:	2000      	movs	r0, #0
 800c638:	f7f3 fe2e 	bl	8000298 <__aeabi_dsub>
 800c63c:	4652      	mov	r2, sl
 800c63e:	465b      	mov	r3, fp
 800c640:	f7f4 fa54 	bl	8000aec <__aeabi_dcmplt>
 800c644:	2800      	cmp	r0, #0
 800c646:	f040 80b5 	bne.w	800c7b4 <_dtoa_r+0x6c4>
 800c64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c64c:	429d      	cmp	r5, r3
 800c64e:	d081      	beq.n	800c554 <_dtoa_r+0x464>
 800c650:	4b30      	ldr	r3, [pc, #192]	; (800c714 <_dtoa_r+0x624>)
 800c652:	2200      	movs	r2, #0
 800c654:	4650      	mov	r0, sl
 800c656:	4659      	mov	r1, fp
 800c658:	f7f3 ffd6 	bl	8000608 <__aeabi_dmul>
 800c65c:	4b2d      	ldr	r3, [pc, #180]	; (800c714 <_dtoa_r+0x624>)
 800c65e:	4682      	mov	sl, r0
 800c660:	468b      	mov	fp, r1
 800c662:	4640      	mov	r0, r8
 800c664:	4649      	mov	r1, r9
 800c666:	2200      	movs	r2, #0
 800c668:	f7f3 ffce 	bl	8000608 <__aeabi_dmul>
 800c66c:	4680      	mov	r8, r0
 800c66e:	4689      	mov	r9, r1
 800c670:	e7c6      	b.n	800c600 <_dtoa_r+0x510>
 800c672:	4650      	mov	r0, sl
 800c674:	4659      	mov	r1, fp
 800c676:	f7f3 ffc7 	bl	8000608 <__aeabi_dmul>
 800c67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c67c:	9d01      	ldr	r5, [sp, #4]
 800c67e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c680:	4682      	mov	sl, r0
 800c682:	468b      	mov	fp, r1
 800c684:	4649      	mov	r1, r9
 800c686:	4640      	mov	r0, r8
 800c688:	f7f4 fa6e 	bl	8000b68 <__aeabi_d2iz>
 800c68c:	4606      	mov	r6, r0
 800c68e:	f7f3 ff51 	bl	8000534 <__aeabi_i2d>
 800c692:	3630      	adds	r6, #48	; 0x30
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4640      	mov	r0, r8
 800c69a:	4649      	mov	r1, r9
 800c69c:	f7f3 fdfc 	bl	8000298 <__aeabi_dsub>
 800c6a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6a6:	429d      	cmp	r5, r3
 800c6a8:	4680      	mov	r8, r0
 800c6aa:	4689      	mov	r9, r1
 800c6ac:	f04f 0200 	mov.w	r2, #0
 800c6b0:	d124      	bne.n	800c6fc <_dtoa_r+0x60c>
 800c6b2:	4b1b      	ldr	r3, [pc, #108]	; (800c720 <_dtoa_r+0x630>)
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	4659      	mov	r1, fp
 800c6b8:	f7f3 fdf0 	bl	800029c <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	f7f4 fa30 	bl	8000b28 <__aeabi_dcmpgt>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d173      	bne.n	800c7b4 <_dtoa_r+0x6c4>
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	4913      	ldr	r1, [pc, #76]	; (800c720 <_dtoa_r+0x630>)
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	f7f3 fde0 	bl	8000298 <__aeabi_dsub>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4649      	mov	r1, r9
 800c6e0:	f7f4 fa04 	bl	8000aec <__aeabi_dcmplt>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f43f af35 	beq.w	800c554 <_dtoa_r+0x464>
 800c6ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6ec:	1e6b      	subs	r3, r5, #1
 800c6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6f4:	2b30      	cmp	r3, #48	; 0x30
 800c6f6:	d0f8      	beq.n	800c6ea <_dtoa_r+0x5fa>
 800c6f8:	9700      	str	r7, [sp, #0]
 800c6fa:	e049      	b.n	800c790 <_dtoa_r+0x6a0>
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <_dtoa_r+0x624>)
 800c6fe:	f7f3 ff83 	bl	8000608 <__aeabi_dmul>
 800c702:	4680      	mov	r8, r0
 800c704:	4689      	mov	r9, r1
 800c706:	e7bd      	b.n	800c684 <_dtoa_r+0x594>
 800c708:	0800f208 	.word	0x0800f208
 800c70c:	0800f1e0 	.word	0x0800f1e0
 800c710:	3ff00000 	.word	0x3ff00000
 800c714:	40240000 	.word	0x40240000
 800c718:	401c0000 	.word	0x401c0000
 800c71c:	40140000 	.word	0x40140000
 800c720:	3fe00000 	.word	0x3fe00000
 800c724:	9d01      	ldr	r5, [sp, #4]
 800c726:	4656      	mov	r6, sl
 800c728:	465f      	mov	r7, fp
 800c72a:	4642      	mov	r2, r8
 800c72c:	464b      	mov	r3, r9
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f4 f893 	bl	800085c <__aeabi_ddiv>
 800c736:	f7f4 fa17 	bl	8000b68 <__aeabi_d2iz>
 800c73a:	4682      	mov	sl, r0
 800c73c:	f7f3 fefa 	bl	8000534 <__aeabi_i2d>
 800c740:	4642      	mov	r2, r8
 800c742:	464b      	mov	r3, r9
 800c744:	f7f3 ff60 	bl	8000608 <__aeabi_dmul>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4630      	mov	r0, r6
 800c74e:	4639      	mov	r1, r7
 800c750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c754:	f7f3 fda0 	bl	8000298 <__aeabi_dsub>
 800c758:	f805 6b01 	strb.w	r6, [r5], #1
 800c75c:	9e01      	ldr	r6, [sp, #4]
 800c75e:	9f03      	ldr	r7, [sp, #12]
 800c760:	1bae      	subs	r6, r5, r6
 800c762:	42b7      	cmp	r7, r6
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	d135      	bne.n	800c7d6 <_dtoa_r+0x6e6>
 800c76a:	f7f3 fd97 	bl	800029c <__adddf3>
 800c76e:	4642      	mov	r2, r8
 800c770:	464b      	mov	r3, r9
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	f7f4 f9d7 	bl	8000b28 <__aeabi_dcmpgt>
 800c77a:	b9d0      	cbnz	r0, 800c7b2 <_dtoa_r+0x6c2>
 800c77c:	4642      	mov	r2, r8
 800c77e:	464b      	mov	r3, r9
 800c780:	4630      	mov	r0, r6
 800c782:	4639      	mov	r1, r7
 800c784:	f7f4 f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c788:	b110      	cbz	r0, 800c790 <_dtoa_r+0x6a0>
 800c78a:	f01a 0f01 	tst.w	sl, #1
 800c78e:	d110      	bne.n	800c7b2 <_dtoa_r+0x6c2>
 800c790:	4620      	mov	r0, r4
 800c792:	ee18 1a10 	vmov	r1, s16
 800c796:	f000 fbc5 	bl	800cf24 <_Bfree>
 800c79a:	2300      	movs	r3, #0
 800c79c:	9800      	ldr	r0, [sp, #0]
 800c79e:	702b      	strb	r3, [r5, #0]
 800c7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	6018      	str	r0, [r3, #0]
 800c7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f43f acf1 	beq.w	800c190 <_dtoa_r+0xa0>
 800c7ae:	601d      	str	r5, [r3, #0]
 800c7b0:	e4ee      	b.n	800c190 <_dtoa_r+0xa0>
 800c7b2:	9f00      	ldr	r7, [sp, #0]
 800c7b4:	462b      	mov	r3, r5
 800c7b6:	461d      	mov	r5, r3
 800c7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7bc:	2a39      	cmp	r2, #57	; 0x39
 800c7be:	d106      	bne.n	800c7ce <_dtoa_r+0x6de>
 800c7c0:	9a01      	ldr	r2, [sp, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d1f7      	bne.n	800c7b6 <_dtoa_r+0x6c6>
 800c7c6:	9901      	ldr	r1, [sp, #4]
 800c7c8:	2230      	movs	r2, #48	; 0x30
 800c7ca:	3701      	adds	r7, #1
 800c7cc:	700a      	strb	r2, [r1, #0]
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	3201      	adds	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	e790      	b.n	800c6f8 <_dtoa_r+0x608>
 800c7d6:	4ba6      	ldr	r3, [pc, #664]	; (800ca70 <_dtoa_r+0x980>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f7f3 ff15 	bl	8000608 <__aeabi_dmul>
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	f7f4 f977 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d09d      	beq.n	800c72a <_dtoa_r+0x63a>
 800c7ee:	e7cf      	b.n	800c790 <_dtoa_r+0x6a0>
 800c7f0:	9a08      	ldr	r2, [sp, #32]
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	f000 80d7 	beq.w	800c9a6 <_dtoa_r+0x8b6>
 800c7f8:	9a06      	ldr	r2, [sp, #24]
 800c7fa:	2a01      	cmp	r2, #1
 800c7fc:	f300 80ba 	bgt.w	800c974 <_dtoa_r+0x884>
 800c800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c802:	2a00      	cmp	r2, #0
 800c804:	f000 80b2 	beq.w	800c96c <_dtoa_r+0x87c>
 800c808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c80c:	9e07      	ldr	r6, [sp, #28]
 800c80e:	9d04      	ldr	r5, [sp, #16]
 800c810:	9a04      	ldr	r2, [sp, #16]
 800c812:	441a      	add	r2, r3
 800c814:	9204      	str	r2, [sp, #16]
 800c816:	9a05      	ldr	r2, [sp, #20]
 800c818:	2101      	movs	r1, #1
 800c81a:	441a      	add	r2, r3
 800c81c:	4620      	mov	r0, r4
 800c81e:	9205      	str	r2, [sp, #20]
 800c820:	f000 fc38 	bl	800d094 <__i2b>
 800c824:	4607      	mov	r7, r0
 800c826:	2d00      	cmp	r5, #0
 800c828:	dd0c      	ble.n	800c844 <_dtoa_r+0x754>
 800c82a:	9b05      	ldr	r3, [sp, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dd09      	ble.n	800c844 <_dtoa_r+0x754>
 800c830:	42ab      	cmp	r3, r5
 800c832:	9a04      	ldr	r2, [sp, #16]
 800c834:	bfa8      	it	ge
 800c836:	462b      	movge	r3, r5
 800c838:	1ad2      	subs	r2, r2, r3
 800c83a:	9204      	str	r2, [sp, #16]
 800c83c:	9a05      	ldr	r2, [sp, #20]
 800c83e:	1aed      	subs	r5, r5, r3
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	9b07      	ldr	r3, [sp, #28]
 800c846:	b31b      	cbz	r3, 800c890 <_dtoa_r+0x7a0>
 800c848:	9b08      	ldr	r3, [sp, #32]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80af 	beq.w	800c9ae <_dtoa_r+0x8be>
 800c850:	2e00      	cmp	r6, #0
 800c852:	dd13      	ble.n	800c87c <_dtoa_r+0x78c>
 800c854:	4639      	mov	r1, r7
 800c856:	4632      	mov	r2, r6
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fcdb 	bl	800d214 <__pow5mult>
 800c85e:	ee18 2a10 	vmov	r2, s16
 800c862:	4601      	mov	r1, r0
 800c864:	4607      	mov	r7, r0
 800c866:	4620      	mov	r0, r4
 800c868:	f000 fc2a 	bl	800d0c0 <__multiply>
 800c86c:	ee18 1a10 	vmov	r1, s16
 800c870:	4680      	mov	r8, r0
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fb56 	bl	800cf24 <_Bfree>
 800c878:	ee08 8a10 	vmov	s16, r8
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	1b9a      	subs	r2, r3, r6
 800c880:	d006      	beq.n	800c890 <_dtoa_r+0x7a0>
 800c882:	ee18 1a10 	vmov	r1, s16
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fcc4 	bl	800d214 <__pow5mult>
 800c88c:	ee08 0a10 	vmov	s16, r0
 800c890:	2101      	movs	r1, #1
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fbfe 	bl	800d094 <__i2b>
 800c898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	4606      	mov	r6, r0
 800c89e:	f340 8088 	ble.w	800c9b2 <_dtoa_r+0x8c2>
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	4601      	mov	r1, r0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f000 fcb4 	bl	800d214 <__pow5mult>
 800c8ac:	9b06      	ldr	r3, [sp, #24]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	f340 8081 	ble.w	800c9b8 <_dtoa_r+0x8c8>
 800c8b6:	f04f 0800 	mov.w	r8, #0
 800c8ba:	6933      	ldr	r3, [r6, #16]
 800c8bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8c0:	6918      	ldr	r0, [r3, #16]
 800c8c2:	f000 fb97 	bl	800cff4 <__hi0bits>
 800c8c6:	f1c0 0020 	rsb	r0, r0, #32
 800c8ca:	9b05      	ldr	r3, [sp, #20]
 800c8cc:	4418      	add	r0, r3
 800c8ce:	f010 001f 	ands.w	r0, r0, #31
 800c8d2:	f000 8092 	beq.w	800c9fa <_dtoa_r+0x90a>
 800c8d6:	f1c0 0320 	rsb	r3, r0, #32
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	f340 808a 	ble.w	800c9f4 <_dtoa_r+0x904>
 800c8e0:	f1c0 001c 	rsb	r0, r0, #28
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	4403      	add	r3, r0
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	9b05      	ldr	r3, [sp, #20]
 800c8ec:	4403      	add	r3, r0
 800c8ee:	4405      	add	r5, r0
 800c8f0:	9305      	str	r3, [sp, #20]
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dd07      	ble.n	800c908 <_dtoa_r+0x818>
 800c8f8:	ee18 1a10 	vmov	r1, s16
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 fce2 	bl	800d2c8 <__lshift>
 800c904:	ee08 0a10 	vmov	s16, r0
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dd05      	ble.n	800c91a <_dtoa_r+0x82a>
 800c90e:	4631      	mov	r1, r6
 800c910:	461a      	mov	r2, r3
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fcd8 	bl	800d2c8 <__lshift>
 800c918:	4606      	mov	r6, r0
 800c91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d06e      	beq.n	800c9fe <_dtoa_r+0x90e>
 800c920:	ee18 0a10 	vmov	r0, s16
 800c924:	4631      	mov	r1, r6
 800c926:	f000 fd3f 	bl	800d3a8 <__mcmp>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	da67      	bge.n	800c9fe <_dtoa_r+0x90e>
 800c92e:	9b00      	ldr	r3, [sp, #0]
 800c930:	3b01      	subs	r3, #1
 800c932:	ee18 1a10 	vmov	r1, s16
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	220a      	movs	r2, #10
 800c93a:	2300      	movs	r3, #0
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 fb13 	bl	800cf68 <__multadd>
 800c942:	9b08      	ldr	r3, [sp, #32]
 800c944:	ee08 0a10 	vmov	s16, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 81b1 	beq.w	800ccb0 <_dtoa_r+0xbc0>
 800c94e:	2300      	movs	r3, #0
 800c950:	4639      	mov	r1, r7
 800c952:	220a      	movs	r2, #10
 800c954:	4620      	mov	r0, r4
 800c956:	f000 fb07 	bl	800cf68 <__multadd>
 800c95a:	9b02      	ldr	r3, [sp, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	4607      	mov	r7, r0
 800c960:	f300 808e 	bgt.w	800ca80 <_dtoa_r+0x990>
 800c964:	9b06      	ldr	r3, [sp, #24]
 800c966:	2b02      	cmp	r3, #2
 800c968:	dc51      	bgt.n	800ca0e <_dtoa_r+0x91e>
 800c96a:	e089      	b.n	800ca80 <_dtoa_r+0x990>
 800c96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c96e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c972:	e74b      	b.n	800c80c <_dtoa_r+0x71c>
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	1e5e      	subs	r6, r3, #1
 800c978:	9b07      	ldr	r3, [sp, #28]
 800c97a:	42b3      	cmp	r3, r6
 800c97c:	bfbf      	itttt	lt
 800c97e:	9b07      	ldrlt	r3, [sp, #28]
 800c980:	9607      	strlt	r6, [sp, #28]
 800c982:	1af2      	sublt	r2, r6, r3
 800c984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c986:	bfb6      	itet	lt
 800c988:	189b      	addlt	r3, r3, r2
 800c98a:	1b9e      	subge	r6, r3, r6
 800c98c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	bfb8      	it	lt
 800c992:	2600      	movlt	r6, #0
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfb7      	itett	lt
 800c998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c99c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c9a0:	1a9d      	sublt	r5, r3, r2
 800c9a2:	2300      	movlt	r3, #0
 800c9a4:	e734      	b.n	800c810 <_dtoa_r+0x720>
 800c9a6:	9e07      	ldr	r6, [sp, #28]
 800c9a8:	9d04      	ldr	r5, [sp, #16]
 800c9aa:	9f08      	ldr	r7, [sp, #32]
 800c9ac:	e73b      	b.n	800c826 <_dtoa_r+0x736>
 800c9ae:	9a07      	ldr	r2, [sp, #28]
 800c9b0:	e767      	b.n	800c882 <_dtoa_r+0x792>
 800c9b2:	9b06      	ldr	r3, [sp, #24]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	dc18      	bgt.n	800c9ea <_dtoa_r+0x8fa>
 800c9b8:	f1ba 0f00 	cmp.w	sl, #0
 800c9bc:	d115      	bne.n	800c9ea <_dtoa_r+0x8fa>
 800c9be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9c2:	b993      	cbnz	r3, 800c9ea <_dtoa_r+0x8fa>
 800c9c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9c8:	0d1b      	lsrs	r3, r3, #20
 800c9ca:	051b      	lsls	r3, r3, #20
 800c9cc:	b183      	cbz	r3, 800c9f0 <_dtoa_r+0x900>
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	9b05      	ldr	r3, [sp, #20]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	9305      	str	r3, [sp, #20]
 800c9da:	f04f 0801 	mov.w	r8, #1
 800c9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f47f af6a 	bne.w	800c8ba <_dtoa_r+0x7ca>
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	e76f      	b.n	800c8ca <_dtoa_r+0x7da>
 800c9ea:	f04f 0800 	mov.w	r8, #0
 800c9ee:	e7f6      	b.n	800c9de <_dtoa_r+0x8ee>
 800c9f0:	4698      	mov	r8, r3
 800c9f2:	e7f4      	b.n	800c9de <_dtoa_r+0x8ee>
 800c9f4:	f43f af7d 	beq.w	800c8f2 <_dtoa_r+0x802>
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	301c      	adds	r0, #28
 800c9fc:	e772      	b.n	800c8e4 <_dtoa_r+0x7f4>
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	dc37      	bgt.n	800ca74 <_dtoa_r+0x984>
 800ca04:	9b06      	ldr	r3, [sp, #24]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	dd34      	ble.n	800ca74 <_dtoa_r+0x984>
 800ca0a:	9b03      	ldr	r3, [sp, #12]
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	9b02      	ldr	r3, [sp, #8]
 800ca10:	b96b      	cbnz	r3, 800ca2e <_dtoa_r+0x93e>
 800ca12:	4631      	mov	r1, r6
 800ca14:	2205      	movs	r2, #5
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 faa6 	bl	800cf68 <__multadd>
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	4606      	mov	r6, r0
 800ca20:	ee18 0a10 	vmov	r0, s16
 800ca24:	f000 fcc0 	bl	800d3a8 <__mcmp>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	f73f adbb 	bgt.w	800c5a4 <_dtoa_r+0x4b4>
 800ca2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca30:	9d01      	ldr	r5, [sp, #4]
 800ca32:	43db      	mvns	r3, r3
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	f04f 0800 	mov.w	r8, #0
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 fa71 	bl	800cf24 <_Bfree>
 800ca42:	2f00      	cmp	r7, #0
 800ca44:	f43f aea4 	beq.w	800c790 <_dtoa_r+0x6a0>
 800ca48:	f1b8 0f00 	cmp.w	r8, #0
 800ca4c:	d005      	beq.n	800ca5a <_dtoa_r+0x96a>
 800ca4e:	45b8      	cmp	r8, r7
 800ca50:	d003      	beq.n	800ca5a <_dtoa_r+0x96a>
 800ca52:	4641      	mov	r1, r8
 800ca54:	4620      	mov	r0, r4
 800ca56:	f000 fa65 	bl	800cf24 <_Bfree>
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f000 fa61 	bl	800cf24 <_Bfree>
 800ca62:	e695      	b.n	800c790 <_dtoa_r+0x6a0>
 800ca64:	2600      	movs	r6, #0
 800ca66:	4637      	mov	r7, r6
 800ca68:	e7e1      	b.n	800ca2e <_dtoa_r+0x93e>
 800ca6a:	9700      	str	r7, [sp, #0]
 800ca6c:	4637      	mov	r7, r6
 800ca6e:	e599      	b.n	800c5a4 <_dtoa_r+0x4b4>
 800ca70:	40240000 	.word	0x40240000
 800ca74:	9b08      	ldr	r3, [sp, #32]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80ca 	beq.w	800cc10 <_dtoa_r+0xb20>
 800ca7c:	9b03      	ldr	r3, [sp, #12]
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	2d00      	cmp	r5, #0
 800ca82:	dd05      	ble.n	800ca90 <_dtoa_r+0x9a0>
 800ca84:	4639      	mov	r1, r7
 800ca86:	462a      	mov	r2, r5
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 fc1d 	bl	800d2c8 <__lshift>
 800ca8e:	4607      	mov	r7, r0
 800ca90:	f1b8 0f00 	cmp.w	r8, #0
 800ca94:	d05b      	beq.n	800cb4e <_dtoa_r+0xa5e>
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fa03 	bl	800cea4 <_Balloc>
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b928      	cbnz	r0, 800caae <_dtoa_r+0x9be>
 800caa2:	4b87      	ldr	r3, [pc, #540]	; (800ccc0 <_dtoa_r+0xbd0>)
 800caa4:	4602      	mov	r2, r0
 800caa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800caaa:	f7ff bb3b 	b.w	800c124 <_dtoa_r+0x34>
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	3202      	adds	r2, #2
 800cab2:	0092      	lsls	r2, r2, #2
 800cab4:	f107 010c 	add.w	r1, r7, #12
 800cab8:	300c      	adds	r0, #12
 800caba:	f7fe fc62 	bl	800b382 <memcpy>
 800cabe:	2201      	movs	r2, #1
 800cac0:	4629      	mov	r1, r5
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fc00 	bl	800d2c8 <__lshift>
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	f103 0901 	add.w	r9, r3, #1
 800cace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cad2:	4413      	add	r3, r2
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	f00a 0301 	and.w	r3, sl, #1
 800cada:	46b8      	mov	r8, r7
 800cadc:	9304      	str	r3, [sp, #16]
 800cade:	4607      	mov	r7, r0
 800cae0:	4631      	mov	r1, r6
 800cae2:	ee18 0a10 	vmov	r0, s16
 800cae6:	f7ff fa75 	bl	800bfd4 <quorem>
 800caea:	4641      	mov	r1, r8
 800caec:	9002      	str	r0, [sp, #8]
 800caee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800caf2:	ee18 0a10 	vmov	r0, s16
 800caf6:	f000 fc57 	bl	800d3a8 <__mcmp>
 800cafa:	463a      	mov	r2, r7
 800cafc:	9003      	str	r0, [sp, #12]
 800cafe:	4631      	mov	r1, r6
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 fc6d 	bl	800d3e0 <__mdiff>
 800cb06:	68c2      	ldr	r2, [r0, #12]
 800cb08:	f109 3bff 	add.w	fp, r9, #4294967295
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	bb02      	cbnz	r2, 800cb52 <_dtoa_r+0xa62>
 800cb10:	4601      	mov	r1, r0
 800cb12:	ee18 0a10 	vmov	r0, s16
 800cb16:	f000 fc47 	bl	800d3a8 <__mcmp>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4620      	mov	r0, r4
 800cb20:	9207      	str	r2, [sp, #28]
 800cb22:	f000 f9ff 	bl	800cf24 <_Bfree>
 800cb26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb2a:	ea43 0102 	orr.w	r1, r3, r2
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	430b      	orrs	r3, r1
 800cb32:	464d      	mov	r5, r9
 800cb34:	d10f      	bne.n	800cb56 <_dtoa_r+0xa66>
 800cb36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb3a:	d02a      	beq.n	800cb92 <_dtoa_r+0xaa2>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dd02      	ble.n	800cb48 <_dtoa_r+0xa58>
 800cb42:	9b02      	ldr	r3, [sp, #8]
 800cb44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb48:	f88b a000 	strb.w	sl, [fp]
 800cb4c:	e775      	b.n	800ca3a <_dtoa_r+0x94a>
 800cb4e:	4638      	mov	r0, r7
 800cb50:	e7ba      	b.n	800cac8 <_dtoa_r+0x9d8>
 800cb52:	2201      	movs	r2, #1
 800cb54:	e7e2      	b.n	800cb1c <_dtoa_r+0xa2c>
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	db04      	blt.n	800cb66 <_dtoa_r+0xa76>
 800cb5c:	9906      	ldr	r1, [sp, #24]
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	9904      	ldr	r1, [sp, #16]
 800cb62:	430b      	orrs	r3, r1
 800cb64:	d122      	bne.n	800cbac <_dtoa_r+0xabc>
 800cb66:	2a00      	cmp	r2, #0
 800cb68:	ddee      	ble.n	800cb48 <_dtoa_r+0xa58>
 800cb6a:	ee18 1a10 	vmov	r1, s16
 800cb6e:	2201      	movs	r2, #1
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fba9 	bl	800d2c8 <__lshift>
 800cb76:	4631      	mov	r1, r6
 800cb78:	ee08 0a10 	vmov	s16, r0
 800cb7c:	f000 fc14 	bl	800d3a8 <__mcmp>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dc03      	bgt.n	800cb8c <_dtoa_r+0xa9c>
 800cb84:	d1e0      	bne.n	800cb48 <_dtoa_r+0xa58>
 800cb86:	f01a 0f01 	tst.w	sl, #1
 800cb8a:	d0dd      	beq.n	800cb48 <_dtoa_r+0xa58>
 800cb8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb90:	d1d7      	bne.n	800cb42 <_dtoa_r+0xa52>
 800cb92:	2339      	movs	r3, #57	; 0x39
 800cb94:	f88b 3000 	strb.w	r3, [fp]
 800cb98:	462b      	mov	r3, r5
 800cb9a:	461d      	mov	r5, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cba2:	2a39      	cmp	r2, #57	; 0x39
 800cba4:	d071      	beq.n	800cc8a <_dtoa_r+0xb9a>
 800cba6:	3201      	adds	r2, #1
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	e746      	b.n	800ca3a <_dtoa_r+0x94a>
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	dd07      	ble.n	800cbc0 <_dtoa_r+0xad0>
 800cbb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbb4:	d0ed      	beq.n	800cb92 <_dtoa_r+0xaa2>
 800cbb6:	f10a 0301 	add.w	r3, sl, #1
 800cbba:	f88b 3000 	strb.w	r3, [fp]
 800cbbe:	e73c      	b.n	800ca3a <_dtoa_r+0x94a>
 800cbc0:	9b05      	ldr	r3, [sp, #20]
 800cbc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cbc6:	4599      	cmp	r9, r3
 800cbc8:	d047      	beq.n	800cc5a <_dtoa_r+0xb6a>
 800cbca:	ee18 1a10 	vmov	r1, s16
 800cbce:	2300      	movs	r3, #0
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 f9c8 	bl	800cf68 <__multadd>
 800cbd8:	45b8      	cmp	r8, r7
 800cbda:	ee08 0a10 	vmov	s16, r0
 800cbde:	f04f 0300 	mov.w	r3, #0
 800cbe2:	f04f 020a 	mov.w	r2, #10
 800cbe6:	4641      	mov	r1, r8
 800cbe8:	4620      	mov	r0, r4
 800cbea:	d106      	bne.n	800cbfa <_dtoa_r+0xb0a>
 800cbec:	f000 f9bc 	bl	800cf68 <__multadd>
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	4607      	mov	r7, r0
 800cbf4:	f109 0901 	add.w	r9, r9, #1
 800cbf8:	e772      	b.n	800cae0 <_dtoa_r+0x9f0>
 800cbfa:	f000 f9b5 	bl	800cf68 <__multadd>
 800cbfe:	4639      	mov	r1, r7
 800cc00:	4680      	mov	r8, r0
 800cc02:	2300      	movs	r3, #0
 800cc04:	220a      	movs	r2, #10
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 f9ae 	bl	800cf68 <__multadd>
 800cc0c:	4607      	mov	r7, r0
 800cc0e:	e7f1      	b.n	800cbf4 <_dtoa_r+0xb04>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	9302      	str	r3, [sp, #8]
 800cc14:	9d01      	ldr	r5, [sp, #4]
 800cc16:	ee18 0a10 	vmov	r0, s16
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	f7ff f9da 	bl	800bfd4 <quorem>
 800cc20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	f805 ab01 	strb.w	sl, [r5], #1
 800cc2a:	1aea      	subs	r2, r5, r3
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	dd09      	ble.n	800cc46 <_dtoa_r+0xb56>
 800cc32:	ee18 1a10 	vmov	r1, s16
 800cc36:	2300      	movs	r3, #0
 800cc38:	220a      	movs	r2, #10
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 f994 	bl	800cf68 <__multadd>
 800cc40:	ee08 0a10 	vmov	s16, r0
 800cc44:	e7e7      	b.n	800cc16 <_dtoa_r+0xb26>
 800cc46:	9b02      	ldr	r3, [sp, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfc8      	it	gt
 800cc4c:	461d      	movgt	r5, r3
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	bfd8      	it	le
 800cc52:	2501      	movle	r5, #1
 800cc54:	441d      	add	r5, r3
 800cc56:	f04f 0800 	mov.w	r8, #0
 800cc5a:	ee18 1a10 	vmov	r1, s16
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4620      	mov	r0, r4
 800cc62:	f000 fb31 	bl	800d2c8 <__lshift>
 800cc66:	4631      	mov	r1, r6
 800cc68:	ee08 0a10 	vmov	s16, r0
 800cc6c:	f000 fb9c 	bl	800d3a8 <__mcmp>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	dc91      	bgt.n	800cb98 <_dtoa_r+0xaa8>
 800cc74:	d102      	bne.n	800cc7c <_dtoa_r+0xb8c>
 800cc76:	f01a 0f01 	tst.w	sl, #1
 800cc7a:	d18d      	bne.n	800cb98 <_dtoa_r+0xaa8>
 800cc7c:	462b      	mov	r3, r5
 800cc7e:	461d      	mov	r5, r3
 800cc80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc84:	2a30      	cmp	r2, #48	; 0x30
 800cc86:	d0fa      	beq.n	800cc7e <_dtoa_r+0xb8e>
 800cc88:	e6d7      	b.n	800ca3a <_dtoa_r+0x94a>
 800cc8a:	9a01      	ldr	r2, [sp, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d184      	bne.n	800cb9a <_dtoa_r+0xaaa>
 800cc90:	9b00      	ldr	r3, [sp, #0]
 800cc92:	3301      	adds	r3, #1
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	2331      	movs	r3, #49	; 0x31
 800cc98:	7013      	strb	r3, [r2, #0]
 800cc9a:	e6ce      	b.n	800ca3a <_dtoa_r+0x94a>
 800cc9c:	4b09      	ldr	r3, [pc, #36]	; (800ccc4 <_dtoa_r+0xbd4>)
 800cc9e:	f7ff ba95 	b.w	800c1cc <_dtoa_r+0xdc>
 800cca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f47f aa6e 	bne.w	800c186 <_dtoa_r+0x96>
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <_dtoa_r+0xbd8>)
 800ccac:	f7ff ba8e 	b.w	800c1cc <_dtoa_r+0xdc>
 800ccb0:	9b02      	ldr	r3, [sp, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dcae      	bgt.n	800cc14 <_dtoa_r+0xb24>
 800ccb6:	9b06      	ldr	r3, [sp, #24]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	f73f aea8 	bgt.w	800ca0e <_dtoa_r+0x91e>
 800ccbe:	e7a9      	b.n	800cc14 <_dtoa_r+0xb24>
 800ccc0:	0800f173 	.word	0x0800f173
 800ccc4:	0800f0d0 	.word	0x0800f0d0
 800ccc8:	0800f0f4 	.word	0x0800f0f4

0800cccc <__sflush_r>:
 800cccc:	898a      	ldrh	r2, [r1, #12]
 800ccce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	0710      	lsls	r0, r2, #28
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	d458      	bmi.n	800cd8c <__sflush_r+0xc0>
 800ccda:	684b      	ldr	r3, [r1, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dc05      	bgt.n	800ccec <__sflush_r+0x20>
 800cce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	dc02      	bgt.n	800ccec <__sflush_r+0x20>
 800cce6:	2000      	movs	r0, #0
 800cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	d0f9      	beq.n	800cce6 <__sflush_r+0x1a>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccf8:	682f      	ldr	r7, [r5, #0]
 800ccfa:	602b      	str	r3, [r5, #0]
 800ccfc:	d032      	beq.n	800cd64 <__sflush_r+0x98>
 800ccfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	075a      	lsls	r2, r3, #29
 800cd04:	d505      	bpl.n	800cd12 <__sflush_r+0x46>
 800cd06:	6863      	ldr	r3, [r4, #4]
 800cd08:	1ac0      	subs	r0, r0, r3
 800cd0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd0c:	b10b      	cbz	r3, 800cd12 <__sflush_r+0x46>
 800cd0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd10:	1ac0      	subs	r0, r0, r3
 800cd12:	2300      	movs	r3, #0
 800cd14:	4602      	mov	r2, r0
 800cd16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd18:	6a21      	ldr	r1, [r4, #32]
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	47b0      	blx	r6
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	d106      	bne.n	800cd32 <__sflush_r+0x66>
 800cd24:	6829      	ldr	r1, [r5, #0]
 800cd26:	291d      	cmp	r1, #29
 800cd28:	d82c      	bhi.n	800cd84 <__sflush_r+0xb8>
 800cd2a:	4a2a      	ldr	r2, [pc, #168]	; (800cdd4 <__sflush_r+0x108>)
 800cd2c:	40ca      	lsrs	r2, r1
 800cd2e:	07d6      	lsls	r6, r2, #31
 800cd30:	d528      	bpl.n	800cd84 <__sflush_r+0xb8>
 800cd32:	2200      	movs	r2, #0
 800cd34:	6062      	str	r2, [r4, #4]
 800cd36:	04d9      	lsls	r1, r3, #19
 800cd38:	6922      	ldr	r2, [r4, #16]
 800cd3a:	6022      	str	r2, [r4, #0]
 800cd3c:	d504      	bpl.n	800cd48 <__sflush_r+0x7c>
 800cd3e:	1c42      	adds	r2, r0, #1
 800cd40:	d101      	bne.n	800cd46 <__sflush_r+0x7a>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	b903      	cbnz	r3, 800cd48 <__sflush_r+0x7c>
 800cd46:	6560      	str	r0, [r4, #84]	; 0x54
 800cd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd4a:	602f      	str	r7, [r5, #0]
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	d0ca      	beq.n	800cce6 <__sflush_r+0x1a>
 800cd50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd54:	4299      	cmp	r1, r3
 800cd56:	d002      	beq.n	800cd5e <__sflush_r+0x92>
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f000 fc3d 	bl	800d5d8 <_free_r>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	6360      	str	r0, [r4, #52]	; 0x34
 800cd62:	e7c1      	b.n	800cce8 <__sflush_r+0x1c>
 800cd64:	6a21      	ldr	r1, [r4, #32]
 800cd66:	2301      	movs	r3, #1
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b0      	blx	r6
 800cd6c:	1c41      	adds	r1, r0, #1
 800cd6e:	d1c7      	bne.n	800cd00 <__sflush_r+0x34>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0c4      	beq.n	800cd00 <__sflush_r+0x34>
 800cd76:	2b1d      	cmp	r3, #29
 800cd78:	d001      	beq.n	800cd7e <__sflush_r+0xb2>
 800cd7a:	2b16      	cmp	r3, #22
 800cd7c:	d101      	bne.n	800cd82 <__sflush_r+0xb6>
 800cd7e:	602f      	str	r7, [r5, #0]
 800cd80:	e7b1      	b.n	800cce6 <__sflush_r+0x1a>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd88:	81a3      	strh	r3, [r4, #12]
 800cd8a:	e7ad      	b.n	800cce8 <__sflush_r+0x1c>
 800cd8c:	690f      	ldr	r7, [r1, #16]
 800cd8e:	2f00      	cmp	r7, #0
 800cd90:	d0a9      	beq.n	800cce6 <__sflush_r+0x1a>
 800cd92:	0793      	lsls	r3, r2, #30
 800cd94:	680e      	ldr	r6, [r1, #0]
 800cd96:	bf08      	it	eq
 800cd98:	694b      	ldreq	r3, [r1, #20]
 800cd9a:	600f      	str	r7, [r1, #0]
 800cd9c:	bf18      	it	ne
 800cd9e:	2300      	movne	r3, #0
 800cda0:	eba6 0807 	sub.w	r8, r6, r7
 800cda4:	608b      	str	r3, [r1, #8]
 800cda6:	f1b8 0f00 	cmp.w	r8, #0
 800cdaa:	dd9c      	ble.n	800cce6 <__sflush_r+0x1a>
 800cdac:	6a21      	ldr	r1, [r4, #32]
 800cdae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdb0:	4643      	mov	r3, r8
 800cdb2:	463a      	mov	r2, r7
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b0      	blx	r6
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	dc06      	bgt.n	800cdca <__sflush_r+0xfe>
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	e78e      	b.n	800cce8 <__sflush_r+0x1c>
 800cdca:	4407      	add	r7, r0
 800cdcc:	eba8 0800 	sub.w	r8, r8, r0
 800cdd0:	e7e9      	b.n	800cda6 <__sflush_r+0xda>
 800cdd2:	bf00      	nop
 800cdd4:	20400001 	.word	0x20400001

0800cdd8 <_fflush_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	690b      	ldr	r3, [r1, #16]
 800cddc:	4605      	mov	r5, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	b913      	cbnz	r3, 800cde8 <_fflush_r+0x10>
 800cde2:	2500      	movs	r5, #0
 800cde4:	4628      	mov	r0, r5
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	b118      	cbz	r0, 800cdf2 <_fflush_r+0x1a>
 800cdea:	6983      	ldr	r3, [r0, #24]
 800cdec:	b90b      	cbnz	r3, 800cdf2 <_fflush_r+0x1a>
 800cdee:	f7fe fa03 	bl	800b1f8 <__sinit>
 800cdf2:	4b14      	ldr	r3, [pc, #80]	; (800ce44 <_fflush_r+0x6c>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	d11b      	bne.n	800ce30 <_fflush_r+0x58>
 800cdf8:	686c      	ldr	r4, [r5, #4]
 800cdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0ef      	beq.n	800cde2 <_fflush_r+0xa>
 800ce02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce04:	07d0      	lsls	r0, r2, #31
 800ce06:	d404      	bmi.n	800ce12 <_fflush_r+0x3a>
 800ce08:	0599      	lsls	r1, r3, #22
 800ce0a:	d402      	bmi.n	800ce12 <_fflush_r+0x3a>
 800ce0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce0e:	f7fe fab6 	bl	800b37e <__retarget_lock_acquire_recursive>
 800ce12:	4628      	mov	r0, r5
 800ce14:	4621      	mov	r1, r4
 800ce16:	f7ff ff59 	bl	800cccc <__sflush_r>
 800ce1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce1c:	07da      	lsls	r2, r3, #31
 800ce1e:	4605      	mov	r5, r0
 800ce20:	d4e0      	bmi.n	800cde4 <_fflush_r+0xc>
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	059b      	lsls	r3, r3, #22
 800ce26:	d4dd      	bmi.n	800cde4 <_fflush_r+0xc>
 800ce28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce2a:	f7fe faa9 	bl	800b380 <__retarget_lock_release_recursive>
 800ce2e:	e7d9      	b.n	800cde4 <_fflush_r+0xc>
 800ce30:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <_fflush_r+0x70>)
 800ce32:	429c      	cmp	r4, r3
 800ce34:	d101      	bne.n	800ce3a <_fflush_r+0x62>
 800ce36:	68ac      	ldr	r4, [r5, #8]
 800ce38:	e7df      	b.n	800cdfa <_fflush_r+0x22>
 800ce3a:	4b04      	ldr	r3, [pc, #16]	; (800ce4c <_fflush_r+0x74>)
 800ce3c:	429c      	cmp	r4, r3
 800ce3e:	bf08      	it	eq
 800ce40:	68ec      	ldreq	r4, [r5, #12]
 800ce42:	e7da      	b.n	800cdfa <_fflush_r+0x22>
 800ce44:	0800f07c 	.word	0x0800f07c
 800ce48:	0800f09c 	.word	0x0800f09c
 800ce4c:	0800f05c 	.word	0x0800f05c

0800ce50 <_localeconv_r>:
 800ce50:	4800      	ldr	r0, [pc, #0]	; (800ce54 <_localeconv_r+0x4>)
 800ce52:	4770      	bx	lr
 800ce54:	20000170 	.word	0x20000170

0800ce58 <_lseek_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d07      	ldr	r5, [pc, #28]	; (800ce78 <_lseek_r+0x20>)
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	4608      	mov	r0, r1
 800ce60:	4611      	mov	r1, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	f7f5 fc4a 	bl	8002700 <_lseek>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_lseek_r+0x1e>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_lseek_r+0x1e>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	2000dbf8 	.word	0x2000dbf8

0800ce7c <malloc>:
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <malloc+0xc>)
 800ce7e:	4601      	mov	r1, r0
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	f7fe bab5 	b.w	800b3f0 <_malloc_r>
 800ce86:	bf00      	nop
 800ce88:	2000001c 	.word	0x2000001c

0800ce8c <__malloc_lock>:
 800ce8c:	4801      	ldr	r0, [pc, #4]	; (800ce94 <__malloc_lock+0x8>)
 800ce8e:	f7fe ba76 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800ce92:	bf00      	nop
 800ce94:	2000dbec 	.word	0x2000dbec

0800ce98 <__malloc_unlock>:
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <__malloc_unlock+0x8>)
 800ce9a:	f7fe ba71 	b.w	800b380 <__retarget_lock_release_recursive>
 800ce9e:	bf00      	nop
 800cea0:	2000dbec 	.word	0x2000dbec

0800cea4 <_Balloc>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cea8:	4604      	mov	r4, r0
 800ceaa:	460d      	mov	r5, r1
 800ceac:	b976      	cbnz	r6, 800cecc <_Balloc+0x28>
 800ceae:	2010      	movs	r0, #16
 800ceb0:	f7ff ffe4 	bl	800ce7c <malloc>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6260      	str	r0, [r4, #36]	; 0x24
 800ceb8:	b920      	cbnz	r0, 800cec4 <_Balloc+0x20>
 800ceba:	4b18      	ldr	r3, [pc, #96]	; (800cf1c <_Balloc+0x78>)
 800cebc:	4818      	ldr	r0, [pc, #96]	; (800cf20 <_Balloc+0x7c>)
 800cebe:	2166      	movs	r1, #102	; 0x66
 800cec0:	f000 fd44 	bl	800d94c <__assert_func>
 800cec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cec8:	6006      	str	r6, [r0, #0]
 800ceca:	60c6      	str	r6, [r0, #12]
 800cecc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cece:	68f3      	ldr	r3, [r6, #12]
 800ced0:	b183      	cbz	r3, 800cef4 <_Balloc+0x50>
 800ced2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ceda:	b9b8      	cbnz	r0, 800cf0c <_Balloc+0x68>
 800cedc:	2101      	movs	r1, #1
 800cede:	fa01 f605 	lsl.w	r6, r1, r5
 800cee2:	1d72      	adds	r2, r6, #5
 800cee4:	0092      	lsls	r2, r2, #2
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fb60 	bl	800d5ac <_calloc_r>
 800ceec:	b160      	cbz	r0, 800cf08 <_Balloc+0x64>
 800ceee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cef2:	e00e      	b.n	800cf12 <_Balloc+0x6e>
 800cef4:	2221      	movs	r2, #33	; 0x21
 800cef6:	2104      	movs	r1, #4
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fb57 	bl	800d5ac <_calloc_r>
 800cefe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf00:	60f0      	str	r0, [r6, #12]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e4      	bne.n	800ced2 <_Balloc+0x2e>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	6802      	ldr	r2, [r0, #0]
 800cf0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf12:	2300      	movs	r3, #0
 800cf14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf18:	e7f7      	b.n	800cf0a <_Balloc+0x66>
 800cf1a:	bf00      	nop
 800cf1c:	0800f101 	.word	0x0800f101
 800cf20:	0800f184 	.word	0x0800f184

0800cf24 <_Bfree>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf28:	4605      	mov	r5, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	b976      	cbnz	r6, 800cf4c <_Bfree+0x28>
 800cf2e:	2010      	movs	r0, #16
 800cf30:	f7ff ffa4 	bl	800ce7c <malloc>
 800cf34:	4602      	mov	r2, r0
 800cf36:	6268      	str	r0, [r5, #36]	; 0x24
 800cf38:	b920      	cbnz	r0, 800cf44 <_Bfree+0x20>
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <_Bfree+0x3c>)
 800cf3c:	4809      	ldr	r0, [pc, #36]	; (800cf64 <_Bfree+0x40>)
 800cf3e:	218a      	movs	r1, #138	; 0x8a
 800cf40:	f000 fd04 	bl	800d94c <__assert_func>
 800cf44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf48:	6006      	str	r6, [r0, #0]
 800cf4a:	60c6      	str	r6, [r0, #12]
 800cf4c:	b13c      	cbz	r4, 800cf5e <_Bfree+0x3a>
 800cf4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf50:	6862      	ldr	r2, [r4, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf58:	6021      	str	r1, [r4, #0]
 800cf5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	0800f101 	.word	0x0800f101
 800cf64:	0800f184 	.word	0x0800f184

0800cf68 <__multadd>:
 800cf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6c:	690d      	ldr	r5, [r1, #16]
 800cf6e:	4607      	mov	r7, r0
 800cf70:	460c      	mov	r4, r1
 800cf72:	461e      	mov	r6, r3
 800cf74:	f101 0c14 	add.w	ip, r1, #20
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f8dc 3000 	ldr.w	r3, [ip]
 800cf7e:	b299      	uxth	r1, r3
 800cf80:	fb02 6101 	mla	r1, r2, r1, r6
 800cf84:	0c1e      	lsrs	r6, r3, #16
 800cf86:	0c0b      	lsrs	r3, r1, #16
 800cf88:	fb02 3306 	mla	r3, r2, r6, r3
 800cf8c:	b289      	uxth	r1, r1
 800cf8e:	3001      	adds	r0, #1
 800cf90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf94:	4285      	cmp	r5, r0
 800cf96:	f84c 1b04 	str.w	r1, [ip], #4
 800cf9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf9e:	dcec      	bgt.n	800cf7a <__multadd+0x12>
 800cfa0:	b30e      	cbz	r6, 800cfe6 <__multadd+0x7e>
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	42ab      	cmp	r3, r5
 800cfa6:	dc19      	bgt.n	800cfdc <__multadd+0x74>
 800cfa8:	6861      	ldr	r1, [r4, #4]
 800cfaa:	4638      	mov	r0, r7
 800cfac:	3101      	adds	r1, #1
 800cfae:	f7ff ff79 	bl	800cea4 <_Balloc>
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	b928      	cbnz	r0, 800cfc2 <__multadd+0x5a>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <__multadd+0x84>)
 800cfba:	480d      	ldr	r0, [pc, #52]	; (800cff0 <__multadd+0x88>)
 800cfbc:	21b5      	movs	r1, #181	; 0xb5
 800cfbe:	f000 fcc5 	bl	800d94c <__assert_func>
 800cfc2:	6922      	ldr	r2, [r4, #16]
 800cfc4:	3202      	adds	r2, #2
 800cfc6:	f104 010c 	add.w	r1, r4, #12
 800cfca:	0092      	lsls	r2, r2, #2
 800cfcc:	300c      	adds	r0, #12
 800cfce:	f7fe f9d8 	bl	800b382 <memcpy>
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff ffa5 	bl	800cf24 <_Bfree>
 800cfda:	4644      	mov	r4, r8
 800cfdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfe0:	3501      	adds	r5, #1
 800cfe2:	615e      	str	r6, [r3, #20]
 800cfe4:	6125      	str	r5, [r4, #16]
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfec:	0800f173 	.word	0x0800f173
 800cff0:	0800f184 	.word	0x0800f184

0800cff4 <__hi0bits>:
 800cff4:	0c03      	lsrs	r3, r0, #16
 800cff6:	041b      	lsls	r3, r3, #16
 800cff8:	b9d3      	cbnz	r3, 800d030 <__hi0bits+0x3c>
 800cffa:	0400      	lsls	r0, r0, #16
 800cffc:	2310      	movs	r3, #16
 800cffe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d002:	bf04      	itt	eq
 800d004:	0200      	lsleq	r0, r0, #8
 800d006:	3308      	addeq	r3, #8
 800d008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d00c:	bf04      	itt	eq
 800d00e:	0100      	lsleq	r0, r0, #4
 800d010:	3304      	addeq	r3, #4
 800d012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d016:	bf04      	itt	eq
 800d018:	0080      	lsleq	r0, r0, #2
 800d01a:	3302      	addeq	r3, #2
 800d01c:	2800      	cmp	r0, #0
 800d01e:	db05      	blt.n	800d02c <__hi0bits+0x38>
 800d020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d024:	f103 0301 	add.w	r3, r3, #1
 800d028:	bf08      	it	eq
 800d02a:	2320      	moveq	r3, #32
 800d02c:	4618      	mov	r0, r3
 800d02e:	4770      	bx	lr
 800d030:	2300      	movs	r3, #0
 800d032:	e7e4      	b.n	800cffe <__hi0bits+0xa>

0800d034 <__lo0bits>:
 800d034:	6803      	ldr	r3, [r0, #0]
 800d036:	f013 0207 	ands.w	r2, r3, #7
 800d03a:	4601      	mov	r1, r0
 800d03c:	d00b      	beq.n	800d056 <__lo0bits+0x22>
 800d03e:	07da      	lsls	r2, r3, #31
 800d040:	d423      	bmi.n	800d08a <__lo0bits+0x56>
 800d042:	0798      	lsls	r0, r3, #30
 800d044:	bf49      	itett	mi
 800d046:	085b      	lsrmi	r3, r3, #1
 800d048:	089b      	lsrpl	r3, r3, #2
 800d04a:	2001      	movmi	r0, #1
 800d04c:	600b      	strmi	r3, [r1, #0]
 800d04e:	bf5c      	itt	pl
 800d050:	600b      	strpl	r3, [r1, #0]
 800d052:	2002      	movpl	r0, #2
 800d054:	4770      	bx	lr
 800d056:	b298      	uxth	r0, r3
 800d058:	b9a8      	cbnz	r0, 800d086 <__lo0bits+0x52>
 800d05a:	0c1b      	lsrs	r3, r3, #16
 800d05c:	2010      	movs	r0, #16
 800d05e:	b2da      	uxtb	r2, r3
 800d060:	b90a      	cbnz	r2, 800d066 <__lo0bits+0x32>
 800d062:	3008      	adds	r0, #8
 800d064:	0a1b      	lsrs	r3, r3, #8
 800d066:	071a      	lsls	r2, r3, #28
 800d068:	bf04      	itt	eq
 800d06a:	091b      	lsreq	r3, r3, #4
 800d06c:	3004      	addeq	r0, #4
 800d06e:	079a      	lsls	r2, r3, #30
 800d070:	bf04      	itt	eq
 800d072:	089b      	lsreq	r3, r3, #2
 800d074:	3002      	addeq	r0, #2
 800d076:	07da      	lsls	r2, r3, #31
 800d078:	d403      	bmi.n	800d082 <__lo0bits+0x4e>
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	f100 0001 	add.w	r0, r0, #1
 800d080:	d005      	beq.n	800d08e <__lo0bits+0x5a>
 800d082:	600b      	str	r3, [r1, #0]
 800d084:	4770      	bx	lr
 800d086:	4610      	mov	r0, r2
 800d088:	e7e9      	b.n	800d05e <__lo0bits+0x2a>
 800d08a:	2000      	movs	r0, #0
 800d08c:	4770      	bx	lr
 800d08e:	2020      	movs	r0, #32
 800d090:	4770      	bx	lr
	...

0800d094 <__i2b>:
 800d094:	b510      	push	{r4, lr}
 800d096:	460c      	mov	r4, r1
 800d098:	2101      	movs	r1, #1
 800d09a:	f7ff ff03 	bl	800cea4 <_Balloc>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	b928      	cbnz	r0, 800d0ae <__i2b+0x1a>
 800d0a2:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <__i2b+0x24>)
 800d0a4:	4805      	ldr	r0, [pc, #20]	; (800d0bc <__i2b+0x28>)
 800d0a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d0aa:	f000 fc4f 	bl	800d94c <__assert_func>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	6144      	str	r4, [r0, #20]
 800d0b2:	6103      	str	r3, [r0, #16]
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	bf00      	nop
 800d0b8:	0800f173 	.word	0x0800f173
 800d0bc:	0800f184 	.word	0x0800f184

0800d0c0 <__multiply>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	4691      	mov	r9, r2
 800d0c6:	690a      	ldr	r2, [r1, #16]
 800d0c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	bfb8      	it	lt
 800d0d0:	460b      	movlt	r3, r1
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	bfbc      	itt	lt
 800d0d6:	464c      	movlt	r4, r9
 800d0d8:	4699      	movlt	r9, r3
 800d0da:	6927      	ldr	r7, [r4, #16]
 800d0dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d0e0:	68a3      	ldr	r3, [r4, #8]
 800d0e2:	6861      	ldr	r1, [r4, #4]
 800d0e4:	eb07 060a 	add.w	r6, r7, sl
 800d0e8:	42b3      	cmp	r3, r6
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	bfb8      	it	lt
 800d0ee:	3101      	addlt	r1, #1
 800d0f0:	f7ff fed8 	bl	800cea4 <_Balloc>
 800d0f4:	b930      	cbnz	r0, 800d104 <__multiply+0x44>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	4b44      	ldr	r3, [pc, #272]	; (800d20c <__multiply+0x14c>)
 800d0fa:	4845      	ldr	r0, [pc, #276]	; (800d210 <__multiply+0x150>)
 800d0fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d100:	f000 fc24 	bl	800d94c <__assert_func>
 800d104:	f100 0514 	add.w	r5, r0, #20
 800d108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d10c:	462b      	mov	r3, r5
 800d10e:	2200      	movs	r2, #0
 800d110:	4543      	cmp	r3, r8
 800d112:	d321      	bcc.n	800d158 <__multiply+0x98>
 800d114:	f104 0314 	add.w	r3, r4, #20
 800d118:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d11c:	f109 0314 	add.w	r3, r9, #20
 800d120:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d124:	9202      	str	r2, [sp, #8]
 800d126:	1b3a      	subs	r2, r7, r4
 800d128:	3a15      	subs	r2, #21
 800d12a:	f022 0203 	bic.w	r2, r2, #3
 800d12e:	3204      	adds	r2, #4
 800d130:	f104 0115 	add.w	r1, r4, #21
 800d134:	428f      	cmp	r7, r1
 800d136:	bf38      	it	cc
 800d138:	2204      	movcc	r2, #4
 800d13a:	9201      	str	r2, [sp, #4]
 800d13c:	9a02      	ldr	r2, [sp, #8]
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	429a      	cmp	r2, r3
 800d142:	d80c      	bhi.n	800d15e <__multiply+0x9e>
 800d144:	2e00      	cmp	r6, #0
 800d146:	dd03      	ble.n	800d150 <__multiply+0x90>
 800d148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d05a      	beq.n	800d206 <__multiply+0x146>
 800d150:	6106      	str	r6, [r0, #16]
 800d152:	b005      	add	sp, #20
 800d154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d158:	f843 2b04 	str.w	r2, [r3], #4
 800d15c:	e7d8      	b.n	800d110 <__multiply+0x50>
 800d15e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d162:	f1ba 0f00 	cmp.w	sl, #0
 800d166:	d024      	beq.n	800d1b2 <__multiply+0xf2>
 800d168:	f104 0e14 	add.w	lr, r4, #20
 800d16c:	46a9      	mov	r9, r5
 800d16e:	f04f 0c00 	mov.w	ip, #0
 800d172:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d176:	f8d9 1000 	ldr.w	r1, [r9]
 800d17a:	fa1f fb82 	uxth.w	fp, r2
 800d17e:	b289      	uxth	r1, r1
 800d180:	fb0a 110b 	mla	r1, sl, fp, r1
 800d184:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d188:	f8d9 2000 	ldr.w	r2, [r9]
 800d18c:	4461      	add	r1, ip
 800d18e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d192:	fb0a c20b 	mla	r2, sl, fp, ip
 800d196:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d19a:	b289      	uxth	r1, r1
 800d19c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d1a0:	4577      	cmp	r7, lr
 800d1a2:	f849 1b04 	str.w	r1, [r9], #4
 800d1a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d1aa:	d8e2      	bhi.n	800d172 <__multiply+0xb2>
 800d1ac:	9a01      	ldr	r2, [sp, #4]
 800d1ae:	f845 c002 	str.w	ip, [r5, r2]
 800d1b2:	9a03      	ldr	r2, [sp, #12]
 800d1b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	f1b9 0f00 	cmp.w	r9, #0
 800d1be:	d020      	beq.n	800d202 <__multiply+0x142>
 800d1c0:	6829      	ldr	r1, [r5, #0]
 800d1c2:	f104 0c14 	add.w	ip, r4, #20
 800d1c6:	46ae      	mov	lr, r5
 800d1c8:	f04f 0a00 	mov.w	sl, #0
 800d1cc:	f8bc b000 	ldrh.w	fp, [ip]
 800d1d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d1d4:	fb09 220b 	mla	r2, r9, fp, r2
 800d1d8:	4492      	add	sl, r2
 800d1da:	b289      	uxth	r1, r1
 800d1dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d1e0:	f84e 1b04 	str.w	r1, [lr], #4
 800d1e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1e8:	f8be 1000 	ldrh.w	r1, [lr]
 800d1ec:	0c12      	lsrs	r2, r2, #16
 800d1ee:	fb09 1102 	mla	r1, r9, r2, r1
 800d1f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d1f6:	4567      	cmp	r7, ip
 800d1f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d1fc:	d8e6      	bhi.n	800d1cc <__multiply+0x10c>
 800d1fe:	9a01      	ldr	r2, [sp, #4]
 800d200:	50a9      	str	r1, [r5, r2]
 800d202:	3504      	adds	r5, #4
 800d204:	e79a      	b.n	800d13c <__multiply+0x7c>
 800d206:	3e01      	subs	r6, #1
 800d208:	e79c      	b.n	800d144 <__multiply+0x84>
 800d20a:	bf00      	nop
 800d20c:	0800f173 	.word	0x0800f173
 800d210:	0800f184 	.word	0x0800f184

0800d214 <__pow5mult>:
 800d214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d218:	4615      	mov	r5, r2
 800d21a:	f012 0203 	ands.w	r2, r2, #3
 800d21e:	4606      	mov	r6, r0
 800d220:	460f      	mov	r7, r1
 800d222:	d007      	beq.n	800d234 <__pow5mult+0x20>
 800d224:	4c25      	ldr	r4, [pc, #148]	; (800d2bc <__pow5mult+0xa8>)
 800d226:	3a01      	subs	r2, #1
 800d228:	2300      	movs	r3, #0
 800d22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d22e:	f7ff fe9b 	bl	800cf68 <__multadd>
 800d232:	4607      	mov	r7, r0
 800d234:	10ad      	asrs	r5, r5, #2
 800d236:	d03d      	beq.n	800d2b4 <__pow5mult+0xa0>
 800d238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d23a:	b97c      	cbnz	r4, 800d25c <__pow5mult+0x48>
 800d23c:	2010      	movs	r0, #16
 800d23e:	f7ff fe1d 	bl	800ce7c <malloc>
 800d242:	4602      	mov	r2, r0
 800d244:	6270      	str	r0, [r6, #36]	; 0x24
 800d246:	b928      	cbnz	r0, 800d254 <__pow5mult+0x40>
 800d248:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <__pow5mult+0xac>)
 800d24a:	481e      	ldr	r0, [pc, #120]	; (800d2c4 <__pow5mult+0xb0>)
 800d24c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d250:	f000 fb7c 	bl	800d94c <__assert_func>
 800d254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d258:	6004      	str	r4, [r0, #0]
 800d25a:	60c4      	str	r4, [r0, #12]
 800d25c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d264:	b94c      	cbnz	r4, 800d27a <__pow5mult+0x66>
 800d266:	f240 2171 	movw	r1, #625	; 0x271
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7ff ff12 	bl	800d094 <__i2b>
 800d270:	2300      	movs	r3, #0
 800d272:	f8c8 0008 	str.w	r0, [r8, #8]
 800d276:	4604      	mov	r4, r0
 800d278:	6003      	str	r3, [r0, #0]
 800d27a:	f04f 0900 	mov.w	r9, #0
 800d27e:	07eb      	lsls	r3, r5, #31
 800d280:	d50a      	bpl.n	800d298 <__pow5mult+0x84>
 800d282:	4639      	mov	r1, r7
 800d284:	4622      	mov	r2, r4
 800d286:	4630      	mov	r0, r6
 800d288:	f7ff ff1a 	bl	800d0c0 <__multiply>
 800d28c:	4639      	mov	r1, r7
 800d28e:	4680      	mov	r8, r0
 800d290:	4630      	mov	r0, r6
 800d292:	f7ff fe47 	bl	800cf24 <_Bfree>
 800d296:	4647      	mov	r7, r8
 800d298:	106d      	asrs	r5, r5, #1
 800d29a:	d00b      	beq.n	800d2b4 <__pow5mult+0xa0>
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	b938      	cbnz	r0, 800d2b0 <__pow5mult+0x9c>
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f7ff ff0b 	bl	800d0c0 <__multiply>
 800d2aa:	6020      	str	r0, [r4, #0]
 800d2ac:	f8c0 9000 	str.w	r9, [r0]
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	e7e4      	b.n	800d27e <__pow5mult+0x6a>
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ba:	bf00      	nop
 800d2bc:	0800f2d0 	.word	0x0800f2d0
 800d2c0:	0800f101 	.word	0x0800f101
 800d2c4:	0800f184 	.word	0x0800f184

0800d2c8 <__lshift>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	6849      	ldr	r1, [r1, #4]
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2d6:	68a3      	ldr	r3, [r4, #8]
 800d2d8:	4607      	mov	r7, r0
 800d2da:	4691      	mov	r9, r2
 800d2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2e0:	f108 0601 	add.w	r6, r8, #1
 800d2e4:	42b3      	cmp	r3, r6
 800d2e6:	db0b      	blt.n	800d300 <__lshift+0x38>
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	f7ff fddb 	bl	800cea4 <_Balloc>
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	b948      	cbnz	r0, 800d306 <__lshift+0x3e>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	4b2a      	ldr	r3, [pc, #168]	; (800d3a0 <__lshift+0xd8>)
 800d2f6:	482b      	ldr	r0, [pc, #172]	; (800d3a4 <__lshift+0xdc>)
 800d2f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2fc:	f000 fb26 	bl	800d94c <__assert_func>
 800d300:	3101      	adds	r1, #1
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	e7ee      	b.n	800d2e4 <__lshift+0x1c>
 800d306:	2300      	movs	r3, #0
 800d308:	f100 0114 	add.w	r1, r0, #20
 800d30c:	f100 0210 	add.w	r2, r0, #16
 800d310:	4618      	mov	r0, r3
 800d312:	4553      	cmp	r3, sl
 800d314:	db37      	blt.n	800d386 <__lshift+0xbe>
 800d316:	6920      	ldr	r0, [r4, #16]
 800d318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d31c:	f104 0314 	add.w	r3, r4, #20
 800d320:	f019 091f 	ands.w	r9, r9, #31
 800d324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d328:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d32c:	d02f      	beq.n	800d38e <__lshift+0xc6>
 800d32e:	f1c9 0e20 	rsb	lr, r9, #32
 800d332:	468a      	mov	sl, r1
 800d334:	f04f 0c00 	mov.w	ip, #0
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	fa02 f209 	lsl.w	r2, r2, r9
 800d33e:	ea42 020c 	orr.w	r2, r2, ip
 800d342:	f84a 2b04 	str.w	r2, [sl], #4
 800d346:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34a:	4298      	cmp	r0, r3
 800d34c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d350:	d8f2      	bhi.n	800d338 <__lshift+0x70>
 800d352:	1b03      	subs	r3, r0, r4
 800d354:	3b15      	subs	r3, #21
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	3304      	adds	r3, #4
 800d35c:	f104 0215 	add.w	r2, r4, #21
 800d360:	4290      	cmp	r0, r2
 800d362:	bf38      	it	cc
 800d364:	2304      	movcc	r3, #4
 800d366:	f841 c003 	str.w	ip, [r1, r3]
 800d36a:	f1bc 0f00 	cmp.w	ip, #0
 800d36e:	d001      	beq.n	800d374 <__lshift+0xac>
 800d370:	f108 0602 	add.w	r6, r8, #2
 800d374:	3e01      	subs	r6, #1
 800d376:	4638      	mov	r0, r7
 800d378:	612e      	str	r6, [r5, #16]
 800d37a:	4621      	mov	r1, r4
 800d37c:	f7ff fdd2 	bl	800cf24 <_Bfree>
 800d380:	4628      	mov	r0, r5
 800d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d386:	f842 0f04 	str.w	r0, [r2, #4]!
 800d38a:	3301      	adds	r3, #1
 800d38c:	e7c1      	b.n	800d312 <__lshift+0x4a>
 800d38e:	3904      	subs	r1, #4
 800d390:	f853 2b04 	ldr.w	r2, [r3], #4
 800d394:	f841 2f04 	str.w	r2, [r1, #4]!
 800d398:	4298      	cmp	r0, r3
 800d39a:	d8f9      	bhi.n	800d390 <__lshift+0xc8>
 800d39c:	e7ea      	b.n	800d374 <__lshift+0xac>
 800d39e:	bf00      	nop
 800d3a0:	0800f173 	.word	0x0800f173
 800d3a4:	0800f184 	.word	0x0800f184

0800d3a8 <__mcmp>:
 800d3a8:	b530      	push	{r4, r5, lr}
 800d3aa:	6902      	ldr	r2, [r0, #16]
 800d3ac:	690c      	ldr	r4, [r1, #16]
 800d3ae:	1b12      	subs	r2, r2, r4
 800d3b0:	d10e      	bne.n	800d3d0 <__mcmp+0x28>
 800d3b2:	f100 0314 	add.w	r3, r0, #20
 800d3b6:	3114      	adds	r1, #20
 800d3b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d3bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d3c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d3c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d3c8:	42a5      	cmp	r5, r4
 800d3ca:	d003      	beq.n	800d3d4 <__mcmp+0x2c>
 800d3cc:	d305      	bcc.n	800d3da <__mcmp+0x32>
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	bd30      	pop	{r4, r5, pc}
 800d3d4:	4283      	cmp	r3, r0
 800d3d6:	d3f3      	bcc.n	800d3c0 <__mcmp+0x18>
 800d3d8:	e7fa      	b.n	800d3d0 <__mcmp+0x28>
 800d3da:	f04f 32ff 	mov.w	r2, #4294967295
 800d3de:	e7f7      	b.n	800d3d0 <__mcmp+0x28>

0800d3e0 <__mdiff>:
 800d3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4690      	mov	r8, r2
 800d3ee:	f7ff ffdb 	bl	800d3a8 <__mcmp>
 800d3f2:	1e05      	subs	r5, r0, #0
 800d3f4:	d110      	bne.n	800d418 <__mdiff+0x38>
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f7ff fd53 	bl	800cea4 <_Balloc>
 800d3fe:	b930      	cbnz	r0, 800d40e <__mdiff+0x2e>
 800d400:	4b3a      	ldr	r3, [pc, #232]	; (800d4ec <__mdiff+0x10c>)
 800d402:	4602      	mov	r2, r0
 800d404:	f240 2132 	movw	r1, #562	; 0x232
 800d408:	4839      	ldr	r0, [pc, #228]	; (800d4f0 <__mdiff+0x110>)
 800d40a:	f000 fa9f 	bl	800d94c <__assert_func>
 800d40e:	2301      	movs	r3, #1
 800d410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d418:	bfa4      	itt	ge
 800d41a:	4643      	movge	r3, r8
 800d41c:	46a0      	movge	r8, r4
 800d41e:	4630      	mov	r0, r6
 800d420:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d424:	bfa6      	itte	ge
 800d426:	461c      	movge	r4, r3
 800d428:	2500      	movge	r5, #0
 800d42a:	2501      	movlt	r5, #1
 800d42c:	f7ff fd3a 	bl	800cea4 <_Balloc>
 800d430:	b920      	cbnz	r0, 800d43c <__mdiff+0x5c>
 800d432:	4b2e      	ldr	r3, [pc, #184]	; (800d4ec <__mdiff+0x10c>)
 800d434:	4602      	mov	r2, r0
 800d436:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d43a:	e7e5      	b.n	800d408 <__mdiff+0x28>
 800d43c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d440:	6926      	ldr	r6, [r4, #16]
 800d442:	60c5      	str	r5, [r0, #12]
 800d444:	f104 0914 	add.w	r9, r4, #20
 800d448:	f108 0514 	add.w	r5, r8, #20
 800d44c:	f100 0e14 	add.w	lr, r0, #20
 800d450:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d454:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d458:	f108 0210 	add.w	r2, r8, #16
 800d45c:	46f2      	mov	sl, lr
 800d45e:	2100      	movs	r1, #0
 800d460:	f859 3b04 	ldr.w	r3, [r9], #4
 800d464:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d468:	fa1f f883 	uxth.w	r8, r3
 800d46c:	fa11 f18b 	uxtah	r1, r1, fp
 800d470:	0c1b      	lsrs	r3, r3, #16
 800d472:	eba1 0808 	sub.w	r8, r1, r8
 800d476:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d47a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d47e:	fa1f f888 	uxth.w	r8, r8
 800d482:	1419      	asrs	r1, r3, #16
 800d484:	454e      	cmp	r6, r9
 800d486:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d48a:	f84a 3b04 	str.w	r3, [sl], #4
 800d48e:	d8e7      	bhi.n	800d460 <__mdiff+0x80>
 800d490:	1b33      	subs	r3, r6, r4
 800d492:	3b15      	subs	r3, #21
 800d494:	f023 0303 	bic.w	r3, r3, #3
 800d498:	3304      	adds	r3, #4
 800d49a:	3415      	adds	r4, #21
 800d49c:	42a6      	cmp	r6, r4
 800d49e:	bf38      	it	cc
 800d4a0:	2304      	movcc	r3, #4
 800d4a2:	441d      	add	r5, r3
 800d4a4:	4473      	add	r3, lr
 800d4a6:	469e      	mov	lr, r3
 800d4a8:	462e      	mov	r6, r5
 800d4aa:	4566      	cmp	r6, ip
 800d4ac:	d30e      	bcc.n	800d4cc <__mdiff+0xec>
 800d4ae:	f10c 0203 	add.w	r2, ip, #3
 800d4b2:	1b52      	subs	r2, r2, r5
 800d4b4:	f022 0203 	bic.w	r2, r2, #3
 800d4b8:	3d03      	subs	r5, #3
 800d4ba:	45ac      	cmp	ip, r5
 800d4bc:	bf38      	it	cc
 800d4be:	2200      	movcc	r2, #0
 800d4c0:	441a      	add	r2, r3
 800d4c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d4c6:	b17b      	cbz	r3, 800d4e8 <__mdiff+0x108>
 800d4c8:	6107      	str	r7, [r0, #16]
 800d4ca:	e7a3      	b.n	800d414 <__mdiff+0x34>
 800d4cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d4d0:	fa11 f288 	uxtah	r2, r1, r8
 800d4d4:	1414      	asrs	r4, r2, #16
 800d4d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d4e0:	f84e 2b04 	str.w	r2, [lr], #4
 800d4e4:	1421      	asrs	r1, r4, #16
 800d4e6:	e7e0      	b.n	800d4aa <__mdiff+0xca>
 800d4e8:	3f01      	subs	r7, #1
 800d4ea:	e7ea      	b.n	800d4c2 <__mdiff+0xe2>
 800d4ec:	0800f173 	.word	0x0800f173
 800d4f0:	0800f184 	.word	0x0800f184

0800d4f4 <__d2b>:
 800d4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	4689      	mov	r9, r1
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	ec57 6b10 	vmov	r6, r7, d0
 800d500:	4690      	mov	r8, r2
 800d502:	f7ff fccf 	bl	800cea4 <_Balloc>
 800d506:	4604      	mov	r4, r0
 800d508:	b930      	cbnz	r0, 800d518 <__d2b+0x24>
 800d50a:	4602      	mov	r2, r0
 800d50c:	4b25      	ldr	r3, [pc, #148]	; (800d5a4 <__d2b+0xb0>)
 800d50e:	4826      	ldr	r0, [pc, #152]	; (800d5a8 <__d2b+0xb4>)
 800d510:	f240 310a 	movw	r1, #778	; 0x30a
 800d514:	f000 fa1a 	bl	800d94c <__assert_func>
 800d518:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d51c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d520:	bb35      	cbnz	r5, 800d570 <__d2b+0x7c>
 800d522:	2e00      	cmp	r6, #0
 800d524:	9301      	str	r3, [sp, #4]
 800d526:	d028      	beq.n	800d57a <__d2b+0x86>
 800d528:	4668      	mov	r0, sp
 800d52a:	9600      	str	r6, [sp, #0]
 800d52c:	f7ff fd82 	bl	800d034 <__lo0bits>
 800d530:	9900      	ldr	r1, [sp, #0]
 800d532:	b300      	cbz	r0, 800d576 <__d2b+0x82>
 800d534:	9a01      	ldr	r2, [sp, #4]
 800d536:	f1c0 0320 	rsb	r3, r0, #32
 800d53a:	fa02 f303 	lsl.w	r3, r2, r3
 800d53e:	430b      	orrs	r3, r1
 800d540:	40c2      	lsrs	r2, r0
 800d542:	6163      	str	r3, [r4, #20]
 800d544:	9201      	str	r2, [sp, #4]
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	61a3      	str	r3, [r4, #24]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bf14      	ite	ne
 800d54e:	2202      	movne	r2, #2
 800d550:	2201      	moveq	r2, #1
 800d552:	6122      	str	r2, [r4, #16]
 800d554:	b1d5      	cbz	r5, 800d58c <__d2b+0x98>
 800d556:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d55a:	4405      	add	r5, r0
 800d55c:	f8c9 5000 	str.w	r5, [r9]
 800d560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d564:	f8c8 0000 	str.w	r0, [r8]
 800d568:	4620      	mov	r0, r4
 800d56a:	b003      	add	sp, #12
 800d56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d574:	e7d5      	b.n	800d522 <__d2b+0x2e>
 800d576:	6161      	str	r1, [r4, #20]
 800d578:	e7e5      	b.n	800d546 <__d2b+0x52>
 800d57a:	a801      	add	r0, sp, #4
 800d57c:	f7ff fd5a 	bl	800d034 <__lo0bits>
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	6163      	str	r3, [r4, #20]
 800d584:	2201      	movs	r2, #1
 800d586:	6122      	str	r2, [r4, #16]
 800d588:	3020      	adds	r0, #32
 800d58a:	e7e3      	b.n	800d554 <__d2b+0x60>
 800d58c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d590:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d594:	f8c9 0000 	str.w	r0, [r9]
 800d598:	6918      	ldr	r0, [r3, #16]
 800d59a:	f7ff fd2b 	bl	800cff4 <__hi0bits>
 800d59e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5a2:	e7df      	b.n	800d564 <__d2b+0x70>
 800d5a4:	0800f173 	.word	0x0800f173
 800d5a8:	0800f184 	.word	0x0800f184

0800d5ac <_calloc_r>:
 800d5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ae:	fba1 2402 	umull	r2, r4, r1, r2
 800d5b2:	b94c      	cbnz	r4, 800d5c8 <_calloc_r+0x1c>
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	9201      	str	r2, [sp, #4]
 800d5b8:	f7fd ff1a 	bl	800b3f0 <_malloc_r>
 800d5bc:	9a01      	ldr	r2, [sp, #4]
 800d5be:	4605      	mov	r5, r0
 800d5c0:	b930      	cbnz	r0, 800d5d0 <_calloc_r+0x24>
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	b003      	add	sp, #12
 800d5c6:	bd30      	pop	{r4, r5, pc}
 800d5c8:	220c      	movs	r2, #12
 800d5ca:	6002      	str	r2, [r0, #0]
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	e7f8      	b.n	800d5c2 <_calloc_r+0x16>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	f7fd fee4 	bl	800b39e <memset>
 800d5d6:	e7f4      	b.n	800d5c2 <_calloc_r+0x16>

0800d5d8 <_free_r>:
 800d5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5da:	2900      	cmp	r1, #0
 800d5dc:	d044      	beq.n	800d668 <_free_r+0x90>
 800d5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e2:	9001      	str	r0, [sp, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f1a1 0404 	sub.w	r4, r1, #4
 800d5ea:	bfb8      	it	lt
 800d5ec:	18e4      	addlt	r4, r4, r3
 800d5ee:	f7ff fc4d 	bl	800ce8c <__malloc_lock>
 800d5f2:	4a1e      	ldr	r2, [pc, #120]	; (800d66c <_free_r+0x94>)
 800d5f4:	9801      	ldr	r0, [sp, #4]
 800d5f6:	6813      	ldr	r3, [r2, #0]
 800d5f8:	b933      	cbnz	r3, 800d608 <_free_r+0x30>
 800d5fa:	6063      	str	r3, [r4, #4]
 800d5fc:	6014      	str	r4, [r2, #0]
 800d5fe:	b003      	add	sp, #12
 800d600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d604:	f7ff bc48 	b.w	800ce98 <__malloc_unlock>
 800d608:	42a3      	cmp	r3, r4
 800d60a:	d908      	bls.n	800d61e <_free_r+0x46>
 800d60c:	6825      	ldr	r5, [r4, #0]
 800d60e:	1961      	adds	r1, r4, r5
 800d610:	428b      	cmp	r3, r1
 800d612:	bf01      	itttt	eq
 800d614:	6819      	ldreq	r1, [r3, #0]
 800d616:	685b      	ldreq	r3, [r3, #4]
 800d618:	1949      	addeq	r1, r1, r5
 800d61a:	6021      	streq	r1, [r4, #0]
 800d61c:	e7ed      	b.n	800d5fa <_free_r+0x22>
 800d61e:	461a      	mov	r2, r3
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	b10b      	cbz	r3, 800d628 <_free_r+0x50>
 800d624:	42a3      	cmp	r3, r4
 800d626:	d9fa      	bls.n	800d61e <_free_r+0x46>
 800d628:	6811      	ldr	r1, [r2, #0]
 800d62a:	1855      	adds	r5, r2, r1
 800d62c:	42a5      	cmp	r5, r4
 800d62e:	d10b      	bne.n	800d648 <_free_r+0x70>
 800d630:	6824      	ldr	r4, [r4, #0]
 800d632:	4421      	add	r1, r4
 800d634:	1854      	adds	r4, r2, r1
 800d636:	42a3      	cmp	r3, r4
 800d638:	6011      	str	r1, [r2, #0]
 800d63a:	d1e0      	bne.n	800d5fe <_free_r+0x26>
 800d63c:	681c      	ldr	r4, [r3, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	6053      	str	r3, [r2, #4]
 800d642:	4421      	add	r1, r4
 800d644:	6011      	str	r1, [r2, #0]
 800d646:	e7da      	b.n	800d5fe <_free_r+0x26>
 800d648:	d902      	bls.n	800d650 <_free_r+0x78>
 800d64a:	230c      	movs	r3, #12
 800d64c:	6003      	str	r3, [r0, #0]
 800d64e:	e7d6      	b.n	800d5fe <_free_r+0x26>
 800d650:	6825      	ldr	r5, [r4, #0]
 800d652:	1961      	adds	r1, r4, r5
 800d654:	428b      	cmp	r3, r1
 800d656:	bf04      	itt	eq
 800d658:	6819      	ldreq	r1, [r3, #0]
 800d65a:	685b      	ldreq	r3, [r3, #4]
 800d65c:	6063      	str	r3, [r4, #4]
 800d65e:	bf04      	itt	eq
 800d660:	1949      	addeq	r1, r1, r5
 800d662:	6021      	streq	r1, [r4, #0]
 800d664:	6054      	str	r4, [r2, #4]
 800d666:	e7ca      	b.n	800d5fe <_free_r+0x26>
 800d668:	b003      	add	sp, #12
 800d66a:	bd30      	pop	{r4, r5, pc}
 800d66c:	2000dbf0 	.word	0x2000dbf0

0800d670 <__ssputs_r>:
 800d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d674:	688e      	ldr	r6, [r1, #8]
 800d676:	429e      	cmp	r6, r3
 800d678:	4682      	mov	sl, r0
 800d67a:	460c      	mov	r4, r1
 800d67c:	4690      	mov	r8, r2
 800d67e:	461f      	mov	r7, r3
 800d680:	d838      	bhi.n	800d6f4 <__ssputs_r+0x84>
 800d682:	898a      	ldrh	r2, [r1, #12]
 800d684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d688:	d032      	beq.n	800d6f0 <__ssputs_r+0x80>
 800d68a:	6825      	ldr	r5, [r4, #0]
 800d68c:	6909      	ldr	r1, [r1, #16]
 800d68e:	eba5 0901 	sub.w	r9, r5, r1
 800d692:	6965      	ldr	r5, [r4, #20]
 800d694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d69c:	3301      	adds	r3, #1
 800d69e:	444b      	add	r3, r9
 800d6a0:	106d      	asrs	r5, r5, #1
 800d6a2:	429d      	cmp	r5, r3
 800d6a4:	bf38      	it	cc
 800d6a6:	461d      	movcc	r5, r3
 800d6a8:	0553      	lsls	r3, r2, #21
 800d6aa:	d531      	bpl.n	800d710 <__ssputs_r+0xa0>
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7fd fe9f 	bl	800b3f0 <_malloc_r>
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	b950      	cbnz	r0, 800d6cc <__ssputs_r+0x5c>
 800d6b6:	230c      	movs	r3, #12
 800d6b8:	f8ca 3000 	str.w	r3, [sl]
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c2:	81a3      	strh	r3, [r4, #12]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6cc:	6921      	ldr	r1, [r4, #16]
 800d6ce:	464a      	mov	r2, r9
 800d6d0:	f7fd fe57 	bl	800b382 <memcpy>
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6de:	81a3      	strh	r3, [r4, #12]
 800d6e0:	6126      	str	r6, [r4, #16]
 800d6e2:	6165      	str	r5, [r4, #20]
 800d6e4:	444e      	add	r6, r9
 800d6e6:	eba5 0509 	sub.w	r5, r5, r9
 800d6ea:	6026      	str	r6, [r4, #0]
 800d6ec:	60a5      	str	r5, [r4, #8]
 800d6ee:	463e      	mov	r6, r7
 800d6f0:	42be      	cmp	r6, r7
 800d6f2:	d900      	bls.n	800d6f6 <__ssputs_r+0x86>
 800d6f4:	463e      	mov	r6, r7
 800d6f6:	6820      	ldr	r0, [r4, #0]
 800d6f8:	4632      	mov	r2, r6
 800d6fa:	4641      	mov	r1, r8
 800d6fc:	f000 f968 	bl	800d9d0 <memmove>
 800d700:	68a3      	ldr	r3, [r4, #8]
 800d702:	1b9b      	subs	r3, r3, r6
 800d704:	60a3      	str	r3, [r4, #8]
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	4433      	add	r3, r6
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	2000      	movs	r0, #0
 800d70e:	e7db      	b.n	800d6c8 <__ssputs_r+0x58>
 800d710:	462a      	mov	r2, r5
 800d712:	f000 f977 	bl	800da04 <_realloc_r>
 800d716:	4606      	mov	r6, r0
 800d718:	2800      	cmp	r0, #0
 800d71a:	d1e1      	bne.n	800d6e0 <__ssputs_r+0x70>
 800d71c:	6921      	ldr	r1, [r4, #16]
 800d71e:	4650      	mov	r0, sl
 800d720:	f7ff ff5a 	bl	800d5d8 <_free_r>
 800d724:	e7c7      	b.n	800d6b6 <__ssputs_r+0x46>
	...

0800d728 <_svfiprintf_r>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	4698      	mov	r8, r3
 800d72e:	898b      	ldrh	r3, [r1, #12]
 800d730:	061b      	lsls	r3, r3, #24
 800d732:	b09d      	sub	sp, #116	; 0x74
 800d734:	4607      	mov	r7, r0
 800d736:	460d      	mov	r5, r1
 800d738:	4614      	mov	r4, r2
 800d73a:	d50e      	bpl.n	800d75a <_svfiprintf_r+0x32>
 800d73c:	690b      	ldr	r3, [r1, #16]
 800d73e:	b963      	cbnz	r3, 800d75a <_svfiprintf_r+0x32>
 800d740:	2140      	movs	r1, #64	; 0x40
 800d742:	f7fd fe55 	bl	800b3f0 <_malloc_r>
 800d746:	6028      	str	r0, [r5, #0]
 800d748:	6128      	str	r0, [r5, #16]
 800d74a:	b920      	cbnz	r0, 800d756 <_svfiprintf_r+0x2e>
 800d74c:	230c      	movs	r3, #12
 800d74e:	603b      	str	r3, [r7, #0]
 800d750:	f04f 30ff 	mov.w	r0, #4294967295
 800d754:	e0d1      	b.n	800d8fa <_svfiprintf_r+0x1d2>
 800d756:	2340      	movs	r3, #64	; 0x40
 800d758:	616b      	str	r3, [r5, #20]
 800d75a:	2300      	movs	r3, #0
 800d75c:	9309      	str	r3, [sp, #36]	; 0x24
 800d75e:	2320      	movs	r3, #32
 800d760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d764:	f8cd 800c 	str.w	r8, [sp, #12]
 800d768:	2330      	movs	r3, #48	; 0x30
 800d76a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d914 <_svfiprintf_r+0x1ec>
 800d76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d772:	f04f 0901 	mov.w	r9, #1
 800d776:	4623      	mov	r3, r4
 800d778:	469a      	mov	sl, r3
 800d77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d77e:	b10a      	cbz	r2, 800d784 <_svfiprintf_r+0x5c>
 800d780:	2a25      	cmp	r2, #37	; 0x25
 800d782:	d1f9      	bne.n	800d778 <_svfiprintf_r+0x50>
 800d784:	ebba 0b04 	subs.w	fp, sl, r4
 800d788:	d00b      	beq.n	800d7a2 <_svfiprintf_r+0x7a>
 800d78a:	465b      	mov	r3, fp
 800d78c:	4622      	mov	r2, r4
 800d78e:	4629      	mov	r1, r5
 800d790:	4638      	mov	r0, r7
 800d792:	f7ff ff6d 	bl	800d670 <__ssputs_r>
 800d796:	3001      	adds	r0, #1
 800d798:	f000 80aa 	beq.w	800d8f0 <_svfiprintf_r+0x1c8>
 800d79c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d79e:	445a      	add	r2, fp
 800d7a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 80a2 	beq.w	800d8f0 <_svfiprintf_r+0x1c8>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b6:	f10a 0a01 	add.w	sl, sl, #1
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	9307      	str	r3, [sp, #28]
 800d7be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d7c4:	4654      	mov	r4, sl
 800d7c6:	2205      	movs	r2, #5
 800d7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7cc:	4851      	ldr	r0, [pc, #324]	; (800d914 <_svfiprintf_r+0x1ec>)
 800d7ce:	f7f2 fd0f 	bl	80001f0 <memchr>
 800d7d2:	9a04      	ldr	r2, [sp, #16]
 800d7d4:	b9d8      	cbnz	r0, 800d80e <_svfiprintf_r+0xe6>
 800d7d6:	06d0      	lsls	r0, r2, #27
 800d7d8:	bf44      	itt	mi
 800d7da:	2320      	movmi	r3, #32
 800d7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7e0:	0711      	lsls	r1, r2, #28
 800d7e2:	bf44      	itt	mi
 800d7e4:	232b      	movmi	r3, #43	; 0x2b
 800d7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d7f0:	d015      	beq.n	800d81e <_svfiprintf_r+0xf6>
 800d7f2:	9a07      	ldr	r2, [sp, #28]
 800d7f4:	4654      	mov	r4, sl
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	f04f 0c0a 	mov.w	ip, #10
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d802:	3b30      	subs	r3, #48	; 0x30
 800d804:	2b09      	cmp	r3, #9
 800d806:	d94e      	bls.n	800d8a6 <_svfiprintf_r+0x17e>
 800d808:	b1b0      	cbz	r0, 800d838 <_svfiprintf_r+0x110>
 800d80a:	9207      	str	r2, [sp, #28]
 800d80c:	e014      	b.n	800d838 <_svfiprintf_r+0x110>
 800d80e:	eba0 0308 	sub.w	r3, r0, r8
 800d812:	fa09 f303 	lsl.w	r3, r9, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	46a2      	mov	sl, r4
 800d81c:	e7d2      	b.n	800d7c4 <_svfiprintf_r+0x9c>
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	1d19      	adds	r1, r3, #4
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	9103      	str	r1, [sp, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	bfbb      	ittet	lt
 800d82a:	425b      	neglt	r3, r3
 800d82c:	f042 0202 	orrlt.w	r2, r2, #2
 800d830:	9307      	strge	r3, [sp, #28]
 800d832:	9307      	strlt	r3, [sp, #28]
 800d834:	bfb8      	it	lt
 800d836:	9204      	strlt	r2, [sp, #16]
 800d838:	7823      	ldrb	r3, [r4, #0]
 800d83a:	2b2e      	cmp	r3, #46	; 0x2e
 800d83c:	d10c      	bne.n	800d858 <_svfiprintf_r+0x130>
 800d83e:	7863      	ldrb	r3, [r4, #1]
 800d840:	2b2a      	cmp	r3, #42	; 0x2a
 800d842:	d135      	bne.n	800d8b0 <_svfiprintf_r+0x188>
 800d844:	9b03      	ldr	r3, [sp, #12]
 800d846:	1d1a      	adds	r2, r3, #4
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	9203      	str	r2, [sp, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bfb8      	it	lt
 800d850:	f04f 33ff 	movlt.w	r3, #4294967295
 800d854:	3402      	adds	r4, #2
 800d856:	9305      	str	r3, [sp, #20]
 800d858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d924 <_svfiprintf_r+0x1fc>
 800d85c:	7821      	ldrb	r1, [r4, #0]
 800d85e:	2203      	movs	r2, #3
 800d860:	4650      	mov	r0, sl
 800d862:	f7f2 fcc5 	bl	80001f0 <memchr>
 800d866:	b140      	cbz	r0, 800d87a <_svfiprintf_r+0x152>
 800d868:	2340      	movs	r3, #64	; 0x40
 800d86a:	eba0 000a 	sub.w	r0, r0, sl
 800d86e:	fa03 f000 	lsl.w	r0, r3, r0
 800d872:	9b04      	ldr	r3, [sp, #16]
 800d874:	4303      	orrs	r3, r0
 800d876:	3401      	adds	r4, #1
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87e:	4826      	ldr	r0, [pc, #152]	; (800d918 <_svfiprintf_r+0x1f0>)
 800d880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d884:	2206      	movs	r2, #6
 800d886:	f7f2 fcb3 	bl	80001f0 <memchr>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d038      	beq.n	800d900 <_svfiprintf_r+0x1d8>
 800d88e:	4b23      	ldr	r3, [pc, #140]	; (800d91c <_svfiprintf_r+0x1f4>)
 800d890:	bb1b      	cbnz	r3, 800d8da <_svfiprintf_r+0x1b2>
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	3307      	adds	r3, #7
 800d896:	f023 0307 	bic.w	r3, r3, #7
 800d89a:	3308      	adds	r3, #8
 800d89c:	9303      	str	r3, [sp, #12]
 800d89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8a0:	4433      	add	r3, r6
 800d8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a4:	e767      	b.n	800d776 <_svfiprintf_r+0x4e>
 800d8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	e7a5      	b.n	800d7fc <_svfiprintf_r+0xd4>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	3401      	adds	r4, #1
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	f04f 0c0a 	mov.w	ip, #10
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8c2:	3a30      	subs	r2, #48	; 0x30
 800d8c4:	2a09      	cmp	r2, #9
 800d8c6:	d903      	bls.n	800d8d0 <_svfiprintf_r+0x1a8>
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0c5      	beq.n	800d858 <_svfiprintf_r+0x130>
 800d8cc:	9105      	str	r1, [sp, #20]
 800d8ce:	e7c3      	b.n	800d858 <_svfiprintf_r+0x130>
 800d8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e7f0      	b.n	800d8bc <_svfiprintf_r+0x194>
 800d8da:	ab03      	add	r3, sp, #12
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	462a      	mov	r2, r5
 800d8e0:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <_svfiprintf_r+0x1f8>)
 800d8e2:	a904      	add	r1, sp, #16
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f7fd fe97 	bl	800b618 <_printf_float>
 800d8ea:	1c42      	adds	r2, r0, #1
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	d1d6      	bne.n	800d89e <_svfiprintf_r+0x176>
 800d8f0:	89ab      	ldrh	r3, [r5, #12]
 800d8f2:	065b      	lsls	r3, r3, #25
 800d8f4:	f53f af2c 	bmi.w	800d750 <_svfiprintf_r+0x28>
 800d8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8fa:	b01d      	add	sp, #116	; 0x74
 800d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d900:	ab03      	add	r3, sp, #12
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	462a      	mov	r2, r5
 800d906:	4b06      	ldr	r3, [pc, #24]	; (800d920 <_svfiprintf_r+0x1f8>)
 800d908:	a904      	add	r1, sp, #16
 800d90a:	4638      	mov	r0, r7
 800d90c:	f7fe f928 	bl	800bb60 <_printf_i>
 800d910:	e7eb      	b.n	800d8ea <_svfiprintf_r+0x1c2>
 800d912:	bf00      	nop
 800d914:	0800f2dc 	.word	0x0800f2dc
 800d918:	0800f2e6 	.word	0x0800f2e6
 800d91c:	0800b619 	.word	0x0800b619
 800d920:	0800d671 	.word	0x0800d671
 800d924:	0800f2e2 	.word	0x0800f2e2

0800d928 <_read_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_read_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f4 fe82 	bl	8002640 <_read>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_read_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_read_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	2000dbf8 	.word	0x2000dbf8

0800d94c <__assert_func>:
 800d94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d94e:	4614      	mov	r4, r2
 800d950:	461a      	mov	r2, r3
 800d952:	4b09      	ldr	r3, [pc, #36]	; (800d978 <__assert_func+0x2c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4605      	mov	r5, r0
 800d958:	68d8      	ldr	r0, [r3, #12]
 800d95a:	b14c      	cbz	r4, 800d970 <__assert_func+0x24>
 800d95c:	4b07      	ldr	r3, [pc, #28]	; (800d97c <__assert_func+0x30>)
 800d95e:	9100      	str	r1, [sp, #0]
 800d960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d964:	4906      	ldr	r1, [pc, #24]	; (800d980 <__assert_func+0x34>)
 800d966:	462b      	mov	r3, r5
 800d968:	f000 f80e 	bl	800d988 <fiprintf>
 800d96c:	f000 faa0 	bl	800deb0 <abort>
 800d970:	4b04      	ldr	r3, [pc, #16]	; (800d984 <__assert_func+0x38>)
 800d972:	461c      	mov	r4, r3
 800d974:	e7f3      	b.n	800d95e <__assert_func+0x12>
 800d976:	bf00      	nop
 800d978:	2000001c 	.word	0x2000001c
 800d97c:	0800f2ed 	.word	0x0800f2ed
 800d980:	0800f2fa 	.word	0x0800f2fa
 800d984:	0800f328 	.word	0x0800f328

0800d988 <fiprintf>:
 800d988:	b40e      	push	{r1, r2, r3}
 800d98a:	b503      	push	{r0, r1, lr}
 800d98c:	4601      	mov	r1, r0
 800d98e:	ab03      	add	r3, sp, #12
 800d990:	4805      	ldr	r0, [pc, #20]	; (800d9a8 <fiprintf+0x20>)
 800d992:	f853 2b04 	ldr.w	r2, [r3], #4
 800d996:	6800      	ldr	r0, [r0, #0]
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	f000 f88b 	bl	800dab4 <_vfiprintf_r>
 800d99e:	b002      	add	sp, #8
 800d9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9a4:	b003      	add	sp, #12
 800d9a6:	4770      	bx	lr
 800d9a8:	2000001c 	.word	0x2000001c

0800d9ac <__ascii_mbtowc>:
 800d9ac:	b082      	sub	sp, #8
 800d9ae:	b901      	cbnz	r1, 800d9b2 <__ascii_mbtowc+0x6>
 800d9b0:	a901      	add	r1, sp, #4
 800d9b2:	b142      	cbz	r2, 800d9c6 <__ascii_mbtowc+0x1a>
 800d9b4:	b14b      	cbz	r3, 800d9ca <__ascii_mbtowc+0x1e>
 800d9b6:	7813      	ldrb	r3, [r2, #0]
 800d9b8:	600b      	str	r3, [r1, #0]
 800d9ba:	7812      	ldrb	r2, [r2, #0]
 800d9bc:	1e10      	subs	r0, r2, #0
 800d9be:	bf18      	it	ne
 800d9c0:	2001      	movne	r0, #1
 800d9c2:	b002      	add	sp, #8
 800d9c4:	4770      	bx	lr
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	e7fb      	b.n	800d9c2 <__ascii_mbtowc+0x16>
 800d9ca:	f06f 0001 	mvn.w	r0, #1
 800d9ce:	e7f8      	b.n	800d9c2 <__ascii_mbtowc+0x16>

0800d9d0 <memmove>:
 800d9d0:	4288      	cmp	r0, r1
 800d9d2:	b510      	push	{r4, lr}
 800d9d4:	eb01 0402 	add.w	r4, r1, r2
 800d9d8:	d902      	bls.n	800d9e0 <memmove+0x10>
 800d9da:	4284      	cmp	r4, r0
 800d9dc:	4623      	mov	r3, r4
 800d9de:	d807      	bhi.n	800d9f0 <memmove+0x20>
 800d9e0:	1e43      	subs	r3, r0, #1
 800d9e2:	42a1      	cmp	r1, r4
 800d9e4:	d008      	beq.n	800d9f8 <memmove+0x28>
 800d9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ee:	e7f8      	b.n	800d9e2 <memmove+0x12>
 800d9f0:	4402      	add	r2, r0
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	428a      	cmp	r2, r1
 800d9f6:	d100      	bne.n	800d9fa <memmove+0x2a>
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da02:	e7f7      	b.n	800d9f4 <memmove+0x24>

0800da04 <_realloc_r>:
 800da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	4680      	mov	r8, r0
 800da0a:	4614      	mov	r4, r2
 800da0c:	460e      	mov	r6, r1
 800da0e:	b921      	cbnz	r1, 800da1a <_realloc_r+0x16>
 800da10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	4611      	mov	r1, r2
 800da16:	f7fd bceb 	b.w	800b3f0 <_malloc_r>
 800da1a:	b92a      	cbnz	r2, 800da28 <_realloc_r+0x24>
 800da1c:	f7ff fddc 	bl	800d5d8 <_free_r>
 800da20:	4625      	mov	r5, r4
 800da22:	4628      	mov	r0, r5
 800da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da28:	f000 faae 	bl	800df88 <_malloc_usable_size_r>
 800da2c:	4284      	cmp	r4, r0
 800da2e:	4607      	mov	r7, r0
 800da30:	d802      	bhi.n	800da38 <_realloc_r+0x34>
 800da32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da36:	d812      	bhi.n	800da5e <_realloc_r+0x5a>
 800da38:	4621      	mov	r1, r4
 800da3a:	4640      	mov	r0, r8
 800da3c:	f7fd fcd8 	bl	800b3f0 <_malloc_r>
 800da40:	4605      	mov	r5, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d0ed      	beq.n	800da22 <_realloc_r+0x1e>
 800da46:	42bc      	cmp	r4, r7
 800da48:	4622      	mov	r2, r4
 800da4a:	4631      	mov	r1, r6
 800da4c:	bf28      	it	cs
 800da4e:	463a      	movcs	r2, r7
 800da50:	f7fd fc97 	bl	800b382 <memcpy>
 800da54:	4631      	mov	r1, r6
 800da56:	4640      	mov	r0, r8
 800da58:	f7ff fdbe 	bl	800d5d8 <_free_r>
 800da5c:	e7e1      	b.n	800da22 <_realloc_r+0x1e>
 800da5e:	4635      	mov	r5, r6
 800da60:	e7df      	b.n	800da22 <_realloc_r+0x1e>

0800da62 <__sfputc_r>:
 800da62:	6893      	ldr	r3, [r2, #8]
 800da64:	3b01      	subs	r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	b410      	push	{r4}
 800da6a:	6093      	str	r3, [r2, #8]
 800da6c:	da08      	bge.n	800da80 <__sfputc_r+0x1e>
 800da6e:	6994      	ldr	r4, [r2, #24]
 800da70:	42a3      	cmp	r3, r4
 800da72:	db01      	blt.n	800da78 <__sfputc_r+0x16>
 800da74:	290a      	cmp	r1, #10
 800da76:	d103      	bne.n	800da80 <__sfputc_r+0x1e>
 800da78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da7c:	f000 b94a 	b.w	800dd14 <__swbuf_r>
 800da80:	6813      	ldr	r3, [r2, #0]
 800da82:	1c58      	adds	r0, r3, #1
 800da84:	6010      	str	r0, [r2, #0]
 800da86:	7019      	strb	r1, [r3, #0]
 800da88:	4608      	mov	r0, r1
 800da8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <__sfputs_r>:
 800da90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da92:	4606      	mov	r6, r0
 800da94:	460f      	mov	r7, r1
 800da96:	4614      	mov	r4, r2
 800da98:	18d5      	adds	r5, r2, r3
 800da9a:	42ac      	cmp	r4, r5
 800da9c:	d101      	bne.n	800daa2 <__sfputs_r+0x12>
 800da9e:	2000      	movs	r0, #0
 800daa0:	e007      	b.n	800dab2 <__sfputs_r+0x22>
 800daa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa6:	463a      	mov	r2, r7
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7ff ffda 	bl	800da62 <__sfputc_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	d1f3      	bne.n	800da9a <__sfputs_r+0xa>
 800dab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dab4 <_vfiprintf_r>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	460d      	mov	r5, r1
 800daba:	b09d      	sub	sp, #116	; 0x74
 800dabc:	4614      	mov	r4, r2
 800dabe:	4698      	mov	r8, r3
 800dac0:	4606      	mov	r6, r0
 800dac2:	b118      	cbz	r0, 800dacc <_vfiprintf_r+0x18>
 800dac4:	6983      	ldr	r3, [r0, #24]
 800dac6:	b90b      	cbnz	r3, 800dacc <_vfiprintf_r+0x18>
 800dac8:	f7fd fb96 	bl	800b1f8 <__sinit>
 800dacc:	4b89      	ldr	r3, [pc, #548]	; (800dcf4 <_vfiprintf_r+0x240>)
 800dace:	429d      	cmp	r5, r3
 800dad0:	d11b      	bne.n	800db0a <_vfiprintf_r+0x56>
 800dad2:	6875      	ldr	r5, [r6, #4]
 800dad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad6:	07d9      	lsls	r1, r3, #31
 800dad8:	d405      	bmi.n	800dae6 <_vfiprintf_r+0x32>
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	059a      	lsls	r2, r3, #22
 800dade:	d402      	bmi.n	800dae6 <_vfiprintf_r+0x32>
 800dae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dae2:	f7fd fc4c 	bl	800b37e <__retarget_lock_acquire_recursive>
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	071b      	lsls	r3, r3, #28
 800daea:	d501      	bpl.n	800daf0 <_vfiprintf_r+0x3c>
 800daec:	692b      	ldr	r3, [r5, #16]
 800daee:	b9eb      	cbnz	r3, 800db2c <_vfiprintf_r+0x78>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 f96e 	bl	800ddd4 <__swsetup_r>
 800daf8:	b1c0      	cbz	r0, 800db2c <_vfiprintf_r+0x78>
 800dafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dafc:	07dc      	lsls	r4, r3, #31
 800dafe:	d50e      	bpl.n	800db1e <_vfiprintf_r+0x6a>
 800db00:	f04f 30ff 	mov.w	r0, #4294967295
 800db04:	b01d      	add	sp, #116	; 0x74
 800db06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0a:	4b7b      	ldr	r3, [pc, #492]	; (800dcf8 <_vfiprintf_r+0x244>)
 800db0c:	429d      	cmp	r5, r3
 800db0e:	d101      	bne.n	800db14 <_vfiprintf_r+0x60>
 800db10:	68b5      	ldr	r5, [r6, #8]
 800db12:	e7df      	b.n	800dad4 <_vfiprintf_r+0x20>
 800db14:	4b79      	ldr	r3, [pc, #484]	; (800dcfc <_vfiprintf_r+0x248>)
 800db16:	429d      	cmp	r5, r3
 800db18:	bf08      	it	eq
 800db1a:	68f5      	ldreq	r5, [r6, #12]
 800db1c:	e7da      	b.n	800dad4 <_vfiprintf_r+0x20>
 800db1e:	89ab      	ldrh	r3, [r5, #12]
 800db20:	0598      	lsls	r0, r3, #22
 800db22:	d4ed      	bmi.n	800db00 <_vfiprintf_r+0x4c>
 800db24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db26:	f7fd fc2b 	bl	800b380 <__retarget_lock_release_recursive>
 800db2a:	e7e9      	b.n	800db00 <_vfiprintf_r+0x4c>
 800db2c:	2300      	movs	r3, #0
 800db2e:	9309      	str	r3, [sp, #36]	; 0x24
 800db30:	2320      	movs	r3, #32
 800db32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db36:	f8cd 800c 	str.w	r8, [sp, #12]
 800db3a:	2330      	movs	r3, #48	; 0x30
 800db3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd00 <_vfiprintf_r+0x24c>
 800db40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db44:	f04f 0901 	mov.w	r9, #1
 800db48:	4623      	mov	r3, r4
 800db4a:	469a      	mov	sl, r3
 800db4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db50:	b10a      	cbz	r2, 800db56 <_vfiprintf_r+0xa2>
 800db52:	2a25      	cmp	r2, #37	; 0x25
 800db54:	d1f9      	bne.n	800db4a <_vfiprintf_r+0x96>
 800db56:	ebba 0b04 	subs.w	fp, sl, r4
 800db5a:	d00b      	beq.n	800db74 <_vfiprintf_r+0xc0>
 800db5c:	465b      	mov	r3, fp
 800db5e:	4622      	mov	r2, r4
 800db60:	4629      	mov	r1, r5
 800db62:	4630      	mov	r0, r6
 800db64:	f7ff ff94 	bl	800da90 <__sfputs_r>
 800db68:	3001      	adds	r0, #1
 800db6a:	f000 80aa 	beq.w	800dcc2 <_vfiprintf_r+0x20e>
 800db6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db70:	445a      	add	r2, fp
 800db72:	9209      	str	r2, [sp, #36]	; 0x24
 800db74:	f89a 3000 	ldrb.w	r3, [sl]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 80a2 	beq.w	800dcc2 <_vfiprintf_r+0x20e>
 800db7e:	2300      	movs	r3, #0
 800db80:	f04f 32ff 	mov.w	r2, #4294967295
 800db84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db88:	f10a 0a01 	add.w	sl, sl, #1
 800db8c:	9304      	str	r3, [sp, #16]
 800db8e:	9307      	str	r3, [sp, #28]
 800db90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db94:	931a      	str	r3, [sp, #104]	; 0x68
 800db96:	4654      	mov	r4, sl
 800db98:	2205      	movs	r2, #5
 800db9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9e:	4858      	ldr	r0, [pc, #352]	; (800dd00 <_vfiprintf_r+0x24c>)
 800dba0:	f7f2 fb26 	bl	80001f0 <memchr>
 800dba4:	9a04      	ldr	r2, [sp, #16]
 800dba6:	b9d8      	cbnz	r0, 800dbe0 <_vfiprintf_r+0x12c>
 800dba8:	06d1      	lsls	r1, r2, #27
 800dbaa:	bf44      	itt	mi
 800dbac:	2320      	movmi	r3, #32
 800dbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbb2:	0713      	lsls	r3, r2, #28
 800dbb4:	bf44      	itt	mi
 800dbb6:	232b      	movmi	r3, #43	; 0x2b
 800dbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc2:	d015      	beq.n	800dbf0 <_vfiprintf_r+0x13c>
 800dbc4:	9a07      	ldr	r2, [sp, #28]
 800dbc6:	4654      	mov	r4, sl
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f04f 0c0a 	mov.w	ip, #10
 800dbce:	4621      	mov	r1, r4
 800dbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd4:	3b30      	subs	r3, #48	; 0x30
 800dbd6:	2b09      	cmp	r3, #9
 800dbd8:	d94e      	bls.n	800dc78 <_vfiprintf_r+0x1c4>
 800dbda:	b1b0      	cbz	r0, 800dc0a <_vfiprintf_r+0x156>
 800dbdc:	9207      	str	r2, [sp, #28]
 800dbde:	e014      	b.n	800dc0a <_vfiprintf_r+0x156>
 800dbe0:	eba0 0308 	sub.w	r3, r0, r8
 800dbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	9304      	str	r3, [sp, #16]
 800dbec:	46a2      	mov	sl, r4
 800dbee:	e7d2      	b.n	800db96 <_vfiprintf_r+0xe2>
 800dbf0:	9b03      	ldr	r3, [sp, #12]
 800dbf2:	1d19      	adds	r1, r3, #4
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	9103      	str	r1, [sp, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	bfbb      	ittet	lt
 800dbfc:	425b      	neglt	r3, r3
 800dbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800dc02:	9307      	strge	r3, [sp, #28]
 800dc04:	9307      	strlt	r3, [sp, #28]
 800dc06:	bfb8      	it	lt
 800dc08:	9204      	strlt	r2, [sp, #16]
 800dc0a:	7823      	ldrb	r3, [r4, #0]
 800dc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc0e:	d10c      	bne.n	800dc2a <_vfiprintf_r+0x176>
 800dc10:	7863      	ldrb	r3, [r4, #1]
 800dc12:	2b2a      	cmp	r3, #42	; 0x2a
 800dc14:	d135      	bne.n	800dc82 <_vfiprintf_r+0x1ce>
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	1d1a      	adds	r2, r3, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	9203      	str	r2, [sp, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfb8      	it	lt
 800dc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc26:	3402      	adds	r4, #2
 800dc28:	9305      	str	r3, [sp, #20]
 800dc2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd10 <_vfiprintf_r+0x25c>
 800dc2e:	7821      	ldrb	r1, [r4, #0]
 800dc30:	2203      	movs	r2, #3
 800dc32:	4650      	mov	r0, sl
 800dc34:	f7f2 fadc 	bl	80001f0 <memchr>
 800dc38:	b140      	cbz	r0, 800dc4c <_vfiprintf_r+0x198>
 800dc3a:	2340      	movs	r3, #64	; 0x40
 800dc3c:	eba0 000a 	sub.w	r0, r0, sl
 800dc40:	fa03 f000 	lsl.w	r0, r3, r0
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4303      	orrs	r3, r0
 800dc48:	3401      	adds	r4, #1
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc50:	482c      	ldr	r0, [pc, #176]	; (800dd04 <_vfiprintf_r+0x250>)
 800dc52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc56:	2206      	movs	r2, #6
 800dc58:	f7f2 faca 	bl	80001f0 <memchr>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d03f      	beq.n	800dce0 <_vfiprintf_r+0x22c>
 800dc60:	4b29      	ldr	r3, [pc, #164]	; (800dd08 <_vfiprintf_r+0x254>)
 800dc62:	bb1b      	cbnz	r3, 800dcac <_vfiprintf_r+0x1f8>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	3307      	adds	r3, #7
 800dc68:	f023 0307 	bic.w	r3, r3, #7
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	9303      	str	r3, [sp, #12]
 800dc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc72:	443b      	add	r3, r7
 800dc74:	9309      	str	r3, [sp, #36]	; 0x24
 800dc76:	e767      	b.n	800db48 <_vfiprintf_r+0x94>
 800dc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7a5      	b.n	800dbce <_vfiprintf_r+0x11a>
 800dc82:	2300      	movs	r3, #0
 800dc84:	3401      	adds	r4, #1
 800dc86:	9305      	str	r3, [sp, #20]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f04f 0c0a 	mov.w	ip, #10
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc94:	3a30      	subs	r2, #48	; 0x30
 800dc96:	2a09      	cmp	r2, #9
 800dc98:	d903      	bls.n	800dca2 <_vfiprintf_r+0x1ee>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0c5      	beq.n	800dc2a <_vfiprintf_r+0x176>
 800dc9e:	9105      	str	r1, [sp, #20]
 800dca0:	e7c3      	b.n	800dc2a <_vfiprintf_r+0x176>
 800dca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dca6:	4604      	mov	r4, r0
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e7f0      	b.n	800dc8e <_vfiprintf_r+0x1da>
 800dcac:	ab03      	add	r3, sp, #12
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	462a      	mov	r2, r5
 800dcb2:	4b16      	ldr	r3, [pc, #88]	; (800dd0c <_vfiprintf_r+0x258>)
 800dcb4:	a904      	add	r1, sp, #16
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fd fcae 	bl	800b618 <_printf_float>
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	1c78      	adds	r0, r7, #1
 800dcc0:	d1d6      	bne.n	800dc70 <_vfiprintf_r+0x1bc>
 800dcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc4:	07d9      	lsls	r1, r3, #31
 800dcc6:	d405      	bmi.n	800dcd4 <_vfiprintf_r+0x220>
 800dcc8:	89ab      	ldrh	r3, [r5, #12]
 800dcca:	059a      	lsls	r2, r3, #22
 800dccc:	d402      	bmi.n	800dcd4 <_vfiprintf_r+0x220>
 800dcce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcd0:	f7fd fb56 	bl	800b380 <__retarget_lock_release_recursive>
 800dcd4:	89ab      	ldrh	r3, [r5, #12]
 800dcd6:	065b      	lsls	r3, r3, #25
 800dcd8:	f53f af12 	bmi.w	800db00 <_vfiprintf_r+0x4c>
 800dcdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcde:	e711      	b.n	800db04 <_vfiprintf_r+0x50>
 800dce0:	ab03      	add	r3, sp, #12
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	462a      	mov	r2, r5
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <_vfiprintf_r+0x258>)
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7fd ff38 	bl	800bb60 <_printf_i>
 800dcf0:	e7e4      	b.n	800dcbc <_vfiprintf_r+0x208>
 800dcf2:	bf00      	nop
 800dcf4:	0800f07c 	.word	0x0800f07c
 800dcf8:	0800f09c 	.word	0x0800f09c
 800dcfc:	0800f05c 	.word	0x0800f05c
 800dd00:	0800f2dc 	.word	0x0800f2dc
 800dd04:	0800f2e6 	.word	0x0800f2e6
 800dd08:	0800b619 	.word	0x0800b619
 800dd0c:	0800da91 	.word	0x0800da91
 800dd10:	0800f2e2 	.word	0x0800f2e2

0800dd14 <__swbuf_r>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	460e      	mov	r6, r1
 800dd18:	4614      	mov	r4, r2
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	b118      	cbz	r0, 800dd26 <__swbuf_r+0x12>
 800dd1e:	6983      	ldr	r3, [r0, #24]
 800dd20:	b90b      	cbnz	r3, 800dd26 <__swbuf_r+0x12>
 800dd22:	f7fd fa69 	bl	800b1f8 <__sinit>
 800dd26:	4b21      	ldr	r3, [pc, #132]	; (800ddac <__swbuf_r+0x98>)
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	d12b      	bne.n	800dd84 <__swbuf_r+0x70>
 800dd2c:	686c      	ldr	r4, [r5, #4]
 800dd2e:	69a3      	ldr	r3, [r4, #24]
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	071a      	lsls	r2, r3, #28
 800dd36:	d52f      	bpl.n	800dd98 <__swbuf_r+0x84>
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	b36b      	cbz	r3, 800dd98 <__swbuf_r+0x84>
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	6820      	ldr	r0, [r4, #0]
 800dd40:	1ac0      	subs	r0, r0, r3
 800dd42:	6963      	ldr	r3, [r4, #20]
 800dd44:	b2f6      	uxtb	r6, r6
 800dd46:	4283      	cmp	r3, r0
 800dd48:	4637      	mov	r7, r6
 800dd4a:	dc04      	bgt.n	800dd56 <__swbuf_r+0x42>
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7ff f842 	bl	800cdd8 <_fflush_r>
 800dd54:	bb30      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd56:	68a3      	ldr	r3, [r4, #8]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	60a3      	str	r3, [r4, #8]
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	6022      	str	r2, [r4, #0]
 800dd62:	701e      	strb	r6, [r3, #0]
 800dd64:	6963      	ldr	r3, [r4, #20]
 800dd66:	3001      	adds	r0, #1
 800dd68:	4283      	cmp	r3, r0
 800dd6a:	d004      	beq.n	800dd76 <__swbuf_r+0x62>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	07db      	lsls	r3, r3, #31
 800dd70:	d506      	bpl.n	800dd80 <__swbuf_r+0x6c>
 800dd72:	2e0a      	cmp	r6, #10
 800dd74:	d104      	bne.n	800dd80 <__swbuf_r+0x6c>
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f7ff f82d 	bl	800cdd8 <_fflush_r>
 800dd7e:	b988      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd80:	4638      	mov	r0, r7
 800dd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <__swbuf_r+0x9c>)
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d101      	bne.n	800dd8e <__swbuf_r+0x7a>
 800dd8a:	68ac      	ldr	r4, [r5, #8]
 800dd8c:	e7cf      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <__swbuf_r+0xa0>)
 800dd90:	429c      	cmp	r4, r3
 800dd92:	bf08      	it	eq
 800dd94:	68ec      	ldreq	r4, [r5, #12]
 800dd96:	e7ca      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 f81a 	bl	800ddd4 <__swsetup_r>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0cb      	beq.n	800dd3c <__swbuf_r+0x28>
 800dda4:	f04f 37ff 	mov.w	r7, #4294967295
 800dda8:	e7ea      	b.n	800dd80 <__swbuf_r+0x6c>
 800ddaa:	bf00      	nop
 800ddac:	0800f07c 	.word	0x0800f07c
 800ddb0:	0800f09c 	.word	0x0800f09c
 800ddb4:	0800f05c 	.word	0x0800f05c

0800ddb8 <__ascii_wctomb>:
 800ddb8:	b149      	cbz	r1, 800ddce <__ascii_wctomb+0x16>
 800ddba:	2aff      	cmp	r2, #255	; 0xff
 800ddbc:	bf85      	ittet	hi
 800ddbe:	238a      	movhi	r3, #138	; 0x8a
 800ddc0:	6003      	strhi	r3, [r0, #0]
 800ddc2:	700a      	strbls	r2, [r1, #0]
 800ddc4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddc8:	bf98      	it	ls
 800ddca:	2001      	movls	r0, #1
 800ddcc:	4770      	bx	lr
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <__swsetup_r>:
 800ddd4:	4b32      	ldr	r3, [pc, #200]	; (800dea0 <__swsetup_r+0xcc>)
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	681d      	ldr	r5, [r3, #0]
 800ddda:	4606      	mov	r6, r0
 800dddc:	460c      	mov	r4, r1
 800ddde:	b125      	cbz	r5, 800ddea <__swsetup_r+0x16>
 800dde0:	69ab      	ldr	r3, [r5, #24]
 800dde2:	b913      	cbnz	r3, 800ddea <__swsetup_r+0x16>
 800dde4:	4628      	mov	r0, r5
 800dde6:	f7fd fa07 	bl	800b1f8 <__sinit>
 800ddea:	4b2e      	ldr	r3, [pc, #184]	; (800dea4 <__swsetup_r+0xd0>)
 800ddec:	429c      	cmp	r4, r3
 800ddee:	d10f      	bne.n	800de10 <__swsetup_r+0x3c>
 800ddf0:	686c      	ldr	r4, [r5, #4]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddf8:	0719      	lsls	r1, r3, #28
 800ddfa:	d42c      	bmi.n	800de56 <__swsetup_r+0x82>
 800ddfc:	06dd      	lsls	r5, r3, #27
 800ddfe:	d411      	bmi.n	800de24 <__swsetup_r+0x50>
 800de00:	2309      	movs	r3, #9
 800de02:	6033      	str	r3, [r6, #0]
 800de04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de08:	81a3      	strh	r3, [r4, #12]
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295
 800de0e:	e03e      	b.n	800de8e <__swsetup_r+0xba>
 800de10:	4b25      	ldr	r3, [pc, #148]	; (800dea8 <__swsetup_r+0xd4>)
 800de12:	429c      	cmp	r4, r3
 800de14:	d101      	bne.n	800de1a <__swsetup_r+0x46>
 800de16:	68ac      	ldr	r4, [r5, #8]
 800de18:	e7eb      	b.n	800ddf2 <__swsetup_r+0x1e>
 800de1a:	4b24      	ldr	r3, [pc, #144]	; (800deac <__swsetup_r+0xd8>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	bf08      	it	eq
 800de20:	68ec      	ldreq	r4, [r5, #12]
 800de22:	e7e6      	b.n	800ddf2 <__swsetup_r+0x1e>
 800de24:	0758      	lsls	r0, r3, #29
 800de26:	d512      	bpl.n	800de4e <__swsetup_r+0x7a>
 800de28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de2a:	b141      	cbz	r1, 800de3e <__swsetup_r+0x6a>
 800de2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de30:	4299      	cmp	r1, r3
 800de32:	d002      	beq.n	800de3a <__swsetup_r+0x66>
 800de34:	4630      	mov	r0, r6
 800de36:	f7ff fbcf 	bl	800d5d8 <_free_r>
 800de3a:	2300      	movs	r3, #0
 800de3c:	6363      	str	r3, [r4, #52]	; 0x34
 800de3e:	89a3      	ldrh	r3, [r4, #12]
 800de40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de44:	81a3      	strh	r3, [r4, #12]
 800de46:	2300      	movs	r3, #0
 800de48:	6063      	str	r3, [r4, #4]
 800de4a:	6923      	ldr	r3, [r4, #16]
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	f043 0308 	orr.w	r3, r3, #8
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	6923      	ldr	r3, [r4, #16]
 800de58:	b94b      	cbnz	r3, 800de6e <__swsetup_r+0x9a>
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de64:	d003      	beq.n	800de6e <__swsetup_r+0x9a>
 800de66:	4621      	mov	r1, r4
 800de68:	4630      	mov	r0, r6
 800de6a:	f000 f84d 	bl	800df08 <__smakebuf_r>
 800de6e:	89a0      	ldrh	r0, [r4, #12]
 800de70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de74:	f010 0301 	ands.w	r3, r0, #1
 800de78:	d00a      	beq.n	800de90 <__swsetup_r+0xbc>
 800de7a:	2300      	movs	r3, #0
 800de7c:	60a3      	str	r3, [r4, #8]
 800de7e:	6963      	ldr	r3, [r4, #20]
 800de80:	425b      	negs	r3, r3
 800de82:	61a3      	str	r3, [r4, #24]
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	b943      	cbnz	r3, 800de9a <__swsetup_r+0xc6>
 800de88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de8c:	d1ba      	bne.n	800de04 <__swsetup_r+0x30>
 800de8e:	bd70      	pop	{r4, r5, r6, pc}
 800de90:	0781      	lsls	r1, r0, #30
 800de92:	bf58      	it	pl
 800de94:	6963      	ldrpl	r3, [r4, #20]
 800de96:	60a3      	str	r3, [r4, #8]
 800de98:	e7f4      	b.n	800de84 <__swsetup_r+0xb0>
 800de9a:	2000      	movs	r0, #0
 800de9c:	e7f7      	b.n	800de8e <__swsetup_r+0xba>
 800de9e:	bf00      	nop
 800dea0:	2000001c 	.word	0x2000001c
 800dea4:	0800f07c 	.word	0x0800f07c
 800dea8:	0800f09c 	.word	0x0800f09c
 800deac:	0800f05c 	.word	0x0800f05c

0800deb0 <abort>:
 800deb0:	b508      	push	{r3, lr}
 800deb2:	2006      	movs	r0, #6
 800deb4:	f000 f898 	bl	800dfe8 <raise>
 800deb8:	2001      	movs	r0, #1
 800deba:	f7f4 fbb7 	bl	800262c <_exit>

0800debe <__swhatbuf_r>:
 800debe:	b570      	push	{r4, r5, r6, lr}
 800dec0:	460e      	mov	r6, r1
 800dec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec6:	2900      	cmp	r1, #0
 800dec8:	b096      	sub	sp, #88	; 0x58
 800deca:	4614      	mov	r4, r2
 800decc:	461d      	mov	r5, r3
 800dece:	da08      	bge.n	800dee2 <__swhatbuf_r+0x24>
 800ded0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	602a      	str	r2, [r5, #0]
 800ded8:	061a      	lsls	r2, r3, #24
 800deda:	d410      	bmi.n	800defe <__swhatbuf_r+0x40>
 800dedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dee0:	e00e      	b.n	800df00 <__swhatbuf_r+0x42>
 800dee2:	466a      	mov	r2, sp
 800dee4:	f000 f89c 	bl	800e020 <_fstat_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	dbf1      	blt.n	800ded0 <__swhatbuf_r+0x12>
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800def2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800def6:	425a      	negs	r2, r3
 800def8:	415a      	adcs	r2, r3
 800defa:	602a      	str	r2, [r5, #0]
 800defc:	e7ee      	b.n	800dedc <__swhatbuf_r+0x1e>
 800defe:	2340      	movs	r3, #64	; 0x40
 800df00:	2000      	movs	r0, #0
 800df02:	6023      	str	r3, [r4, #0]
 800df04:	b016      	add	sp, #88	; 0x58
 800df06:	bd70      	pop	{r4, r5, r6, pc}

0800df08 <__smakebuf_r>:
 800df08:	898b      	ldrh	r3, [r1, #12]
 800df0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df0c:	079d      	lsls	r5, r3, #30
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	d507      	bpl.n	800df24 <__smakebuf_r+0x1c>
 800df14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	2301      	movs	r3, #1
 800df1e:	6163      	str	r3, [r4, #20]
 800df20:	b002      	add	sp, #8
 800df22:	bd70      	pop	{r4, r5, r6, pc}
 800df24:	ab01      	add	r3, sp, #4
 800df26:	466a      	mov	r2, sp
 800df28:	f7ff ffc9 	bl	800debe <__swhatbuf_r>
 800df2c:	9900      	ldr	r1, [sp, #0]
 800df2e:	4605      	mov	r5, r0
 800df30:	4630      	mov	r0, r6
 800df32:	f7fd fa5d 	bl	800b3f0 <_malloc_r>
 800df36:	b948      	cbnz	r0, 800df4c <__smakebuf_r+0x44>
 800df38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3c:	059a      	lsls	r2, r3, #22
 800df3e:	d4ef      	bmi.n	800df20 <__smakebuf_r+0x18>
 800df40:	f023 0303 	bic.w	r3, r3, #3
 800df44:	f043 0302 	orr.w	r3, r3, #2
 800df48:	81a3      	strh	r3, [r4, #12]
 800df4a:	e7e3      	b.n	800df14 <__smakebuf_r+0xc>
 800df4c:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <__smakebuf_r+0x7c>)
 800df4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	6020      	str	r0, [r4, #0]
 800df54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	9b00      	ldr	r3, [sp, #0]
 800df5c:	6163      	str	r3, [r4, #20]
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	6120      	str	r0, [r4, #16]
 800df62:	b15b      	cbz	r3, 800df7c <__smakebuf_r+0x74>
 800df64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f86b 	bl	800e044 <_isatty_r>
 800df6e:	b128      	cbz	r0, 800df7c <__smakebuf_r+0x74>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f023 0303 	bic.w	r3, r3, #3
 800df76:	f043 0301 	orr.w	r3, r3, #1
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	89a0      	ldrh	r0, [r4, #12]
 800df7e:	4305      	orrs	r5, r0
 800df80:	81a5      	strh	r5, [r4, #12]
 800df82:	e7cd      	b.n	800df20 <__smakebuf_r+0x18>
 800df84:	0800b191 	.word	0x0800b191

0800df88 <_malloc_usable_size_r>:
 800df88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8c:	1f18      	subs	r0, r3, #4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	bfbc      	itt	lt
 800df92:	580b      	ldrlt	r3, [r1, r0]
 800df94:	18c0      	addlt	r0, r0, r3
 800df96:	4770      	bx	lr

0800df98 <_raise_r>:
 800df98:	291f      	cmp	r1, #31
 800df9a:	b538      	push	{r3, r4, r5, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	460d      	mov	r5, r1
 800dfa0:	d904      	bls.n	800dfac <_raise_r+0x14>
 800dfa2:	2316      	movs	r3, #22
 800dfa4:	6003      	str	r3, [r0, #0]
 800dfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dfae:	b112      	cbz	r2, 800dfb6 <_raise_r+0x1e>
 800dfb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfb4:	b94b      	cbnz	r3, 800dfca <_raise_r+0x32>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 f830 	bl	800e01c <_getpid_r>
 800dfbc:	462a      	mov	r2, r5
 800dfbe:	4601      	mov	r1, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfc6:	f000 b817 	b.w	800dff8 <_kill_r>
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d00a      	beq.n	800dfe4 <_raise_r+0x4c>
 800dfce:	1c59      	adds	r1, r3, #1
 800dfd0:	d103      	bne.n	800dfda <_raise_r+0x42>
 800dfd2:	2316      	movs	r3, #22
 800dfd4:	6003      	str	r3, [r0, #0]
 800dfd6:	2001      	movs	r0, #1
 800dfd8:	e7e7      	b.n	800dfaa <_raise_r+0x12>
 800dfda:	2400      	movs	r4, #0
 800dfdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	4798      	blx	r3
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	e7e0      	b.n	800dfaa <_raise_r+0x12>

0800dfe8 <raise>:
 800dfe8:	4b02      	ldr	r3, [pc, #8]	; (800dff4 <raise+0xc>)
 800dfea:	4601      	mov	r1, r0
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	f7ff bfd3 	b.w	800df98 <_raise_r>
 800dff2:	bf00      	nop
 800dff4:	2000001c 	.word	0x2000001c

0800dff8 <_kill_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d07      	ldr	r5, [pc, #28]	; (800e018 <_kill_r+0x20>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	4611      	mov	r1, r2
 800e004:	602b      	str	r3, [r5, #0]
 800e006:	f7f4 fb01 	bl	800260c <_kill>
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	d102      	bne.n	800e014 <_kill_r+0x1c>
 800e00e:	682b      	ldr	r3, [r5, #0]
 800e010:	b103      	cbz	r3, 800e014 <_kill_r+0x1c>
 800e012:	6023      	str	r3, [r4, #0]
 800e014:	bd38      	pop	{r3, r4, r5, pc}
 800e016:	bf00      	nop
 800e018:	2000dbf8 	.word	0x2000dbf8

0800e01c <_getpid_r>:
 800e01c:	f7f4 baee 	b.w	80025fc <_getpid>

0800e020 <_fstat_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d07      	ldr	r5, [pc, #28]	; (800e040 <_fstat_r+0x20>)
 800e024:	2300      	movs	r3, #0
 800e026:	4604      	mov	r4, r0
 800e028:	4608      	mov	r0, r1
 800e02a:	4611      	mov	r1, r2
 800e02c:	602b      	str	r3, [r5, #0]
 800e02e:	f7f4 fb4c 	bl	80026ca <_fstat>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d102      	bne.n	800e03c <_fstat_r+0x1c>
 800e036:	682b      	ldr	r3, [r5, #0]
 800e038:	b103      	cbz	r3, 800e03c <_fstat_r+0x1c>
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	bd38      	pop	{r3, r4, r5, pc}
 800e03e:	bf00      	nop
 800e040:	2000dbf8 	.word	0x2000dbf8

0800e044 <_isatty_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4d06      	ldr	r5, [pc, #24]	; (800e060 <_isatty_r+0x1c>)
 800e048:	2300      	movs	r3, #0
 800e04a:	4604      	mov	r4, r0
 800e04c:	4608      	mov	r0, r1
 800e04e:	602b      	str	r3, [r5, #0]
 800e050:	f7f4 fb4b 	bl	80026ea <_isatty>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d102      	bne.n	800e05e <_isatty_r+0x1a>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	b103      	cbz	r3, 800e05e <_isatty_r+0x1a>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	2000dbf8 	.word	0x2000dbf8
 800e064:	00000000 	.word	0x00000000

0800e068 <log10>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	ed2d 8b02 	vpush	{d8}
 800e06e:	ec55 4b10 	vmov	r4, r5, d0
 800e072:	f000 f865 	bl	800e140 <__ieee754_log10>
 800e076:	4622      	mov	r2, r4
 800e078:	462b      	mov	r3, r5
 800e07a:	4620      	mov	r0, r4
 800e07c:	4629      	mov	r1, r5
 800e07e:	eeb0 8a40 	vmov.f32	s16, s0
 800e082:	eef0 8a60 	vmov.f32	s17, s1
 800e086:	f7f2 fd59 	bl	8000b3c <__aeabi_dcmpun>
 800e08a:	b998      	cbnz	r0, 800e0b4 <log10+0x4c>
 800e08c:	2200      	movs	r2, #0
 800e08e:	2300      	movs	r3, #0
 800e090:	4620      	mov	r0, r4
 800e092:	4629      	mov	r1, r5
 800e094:	f7f2 fd34 	bl	8000b00 <__aeabi_dcmple>
 800e098:	b160      	cbz	r0, 800e0b4 <log10+0x4c>
 800e09a:	2200      	movs	r2, #0
 800e09c:	2300      	movs	r3, #0
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0a6:	b160      	cbz	r0, 800e0c2 <log10+0x5a>
 800e0a8:	f7fd f848 	bl	800b13c <__errno>
 800e0ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800e0d8 <log10+0x70>
 800e0b0:	2322      	movs	r3, #34	; 0x22
 800e0b2:	6003      	str	r3, [r0, #0]
 800e0b4:	eeb0 0a48 	vmov.f32	s0, s16
 800e0b8:	eef0 0a68 	vmov.f32	s1, s17
 800e0bc:	ecbd 8b02 	vpop	{d8}
 800e0c0:	bd38      	pop	{r3, r4, r5, pc}
 800e0c2:	f7fd f83b 	bl	800b13c <__errno>
 800e0c6:	ecbd 8b02 	vpop	{d8}
 800e0ca:	2321      	movs	r3, #33	; 0x21
 800e0cc:	6003      	str	r3, [r0, #0]
 800e0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0d2:	4803      	ldr	r0, [pc, #12]	; (800e0e0 <log10+0x78>)
 800e0d4:	f000 b970 	b.w	800e3b8 <nan>
 800e0d8:	00000000 	.word	0x00000000
 800e0dc:	fff00000 	.word	0xfff00000
 800e0e0:	0800f328 	.word	0x0800f328

0800e0e4 <sqrt>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	ed2d 8b02 	vpush	{d8}
 800e0ea:	ec55 4b10 	vmov	r4, r5, d0
 800e0ee:	f000 f8b1 	bl	800e254 <__ieee754_sqrt>
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	eeb0 8a40 	vmov.f32	s16, s0
 800e0fe:	eef0 8a60 	vmov.f32	s17, s1
 800e102:	f7f2 fd1b 	bl	8000b3c <__aeabi_dcmpun>
 800e106:	b990      	cbnz	r0, 800e12e <sqrt+0x4a>
 800e108:	2200      	movs	r2, #0
 800e10a:	2300      	movs	r3, #0
 800e10c:	4620      	mov	r0, r4
 800e10e:	4629      	mov	r1, r5
 800e110:	f7f2 fcec 	bl	8000aec <__aeabi_dcmplt>
 800e114:	b158      	cbz	r0, 800e12e <sqrt+0x4a>
 800e116:	f7fd f811 	bl	800b13c <__errno>
 800e11a:	2321      	movs	r3, #33	; 0x21
 800e11c:	6003      	str	r3, [r0, #0]
 800e11e:	2200      	movs	r2, #0
 800e120:	2300      	movs	r3, #0
 800e122:	4610      	mov	r0, r2
 800e124:	4619      	mov	r1, r3
 800e126:	f7f2 fb99 	bl	800085c <__aeabi_ddiv>
 800e12a:	ec41 0b18 	vmov	d8, r0, r1
 800e12e:	eeb0 0a48 	vmov.f32	s0, s16
 800e132:	eef0 0a68 	vmov.f32	s1, s17
 800e136:	ecbd 8b02 	vpop	{d8}
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
 800e13c:	0000      	movs	r0, r0
	...

0800e140 <__ieee754_log10>:
 800e140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e144:	ec55 4b10 	vmov	r4, r5, d0
 800e148:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e14c:	462b      	mov	r3, r5
 800e14e:	da2f      	bge.n	800e1b0 <__ieee754_log10+0x70>
 800e150:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800e154:	4322      	orrs	r2, r4
 800e156:	d109      	bne.n	800e16c <__ieee754_log10+0x2c>
 800e158:	493b      	ldr	r1, [pc, #236]	; (800e248 <__ieee754_log10+0x108>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	2300      	movs	r3, #0
 800e15e:	2000      	movs	r0, #0
 800e160:	f7f2 fb7c 	bl	800085c <__aeabi_ddiv>
 800e164:	ec41 0b10 	vmov	d0, r0, r1
 800e168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16c:	2d00      	cmp	r5, #0
 800e16e:	da09      	bge.n	800e184 <__ieee754_log10+0x44>
 800e170:	ee10 2a10 	vmov	r2, s0
 800e174:	ee10 0a10 	vmov	r0, s0
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 f88d 	bl	8000298 <__aeabi_dsub>
 800e17e:	2200      	movs	r2, #0
 800e180:	2300      	movs	r3, #0
 800e182:	e7ed      	b.n	800e160 <__ieee754_log10+0x20>
 800e184:	4b31      	ldr	r3, [pc, #196]	; (800e24c <__ieee754_log10+0x10c>)
 800e186:	2200      	movs	r2, #0
 800e188:	4629      	mov	r1, r5
 800e18a:	ee10 0a10 	vmov	r0, s0
 800e18e:	f7f2 fa3b 	bl	8000608 <__aeabi_dmul>
 800e192:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800e196:	4604      	mov	r4, r0
 800e198:	460d      	mov	r5, r1
 800e19a:	460b      	mov	r3, r1
 800e19c:	492c      	ldr	r1, [pc, #176]	; (800e250 <__ieee754_log10+0x110>)
 800e19e:	428b      	cmp	r3, r1
 800e1a0:	dd08      	ble.n	800e1b4 <__ieee754_log10+0x74>
 800e1a2:	4622      	mov	r2, r4
 800e1a4:	462b      	mov	r3, r5
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f877 	bl	800029c <__adddf3>
 800e1ae:	e7d9      	b.n	800e164 <__ieee754_log10+0x24>
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	e7f3      	b.n	800e19c <__ieee754_log10+0x5c>
 800e1b4:	1518      	asrs	r0, r3, #20
 800e1b6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800e1ba:	4410      	add	r0, r2
 800e1bc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800e1c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e1c4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800e1c8:	f7f2 f9b4 	bl	8000534 <__aeabi_i2d>
 800e1cc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800e1d0:	3303      	adds	r3, #3
 800e1d2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800e1d6:	ec45 4b10 	vmov	d0, r4, r5
 800e1da:	4606      	mov	r6, r0
 800e1dc:	460f      	mov	r7, r1
 800e1de:	f000 f8f3 	bl	800e3c8 <__ieee754_log>
 800e1e2:	a313      	add	r3, pc, #76	; (adr r3, 800e230 <__ieee754_log10+0xf0>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	ec59 8b10 	vmov	r8, r9, d0
 800e1f0:	f7f2 fa0a 	bl	8000608 <__aeabi_dmul>
 800e1f4:	a310      	add	r3, pc, #64	; (adr r3, 800e238 <__ieee754_log10+0xf8>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	4640      	mov	r0, r8
 800e200:	4649      	mov	r1, r9
 800e202:	f7f2 fa01 	bl	8000608 <__aeabi_dmul>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4620      	mov	r0, r4
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7f2 f845 	bl	800029c <__adddf3>
 800e212:	a30b      	add	r3, pc, #44	; (adr r3, 800e240 <__ieee754_log10+0x100>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	4604      	mov	r4, r0
 800e21a:	460d      	mov	r5, r1
 800e21c:	4630      	mov	r0, r6
 800e21e:	4639      	mov	r1, r7
 800e220:	f7f2 f9f2 	bl	8000608 <__aeabi_dmul>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	e7bd      	b.n	800e1aa <__ieee754_log10+0x6a>
 800e22e:	bf00      	nop
 800e230:	11f12b36 	.word	0x11f12b36
 800e234:	3d59fef3 	.word	0x3d59fef3
 800e238:	1526e50e 	.word	0x1526e50e
 800e23c:	3fdbcb7b 	.word	0x3fdbcb7b
 800e240:	509f6000 	.word	0x509f6000
 800e244:	3fd34413 	.word	0x3fd34413
 800e248:	c3500000 	.word	0xc3500000
 800e24c:	43500000 	.word	0x43500000
 800e250:	7fefffff 	.word	0x7fefffff

0800e254 <__ieee754_sqrt>:
 800e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e258:	ec55 4b10 	vmov	r4, r5, d0
 800e25c:	4e55      	ldr	r6, [pc, #340]	; (800e3b4 <__ieee754_sqrt+0x160>)
 800e25e:	43ae      	bics	r6, r5
 800e260:	ee10 0a10 	vmov	r0, s0
 800e264:	ee10 3a10 	vmov	r3, s0
 800e268:	462a      	mov	r2, r5
 800e26a:	4629      	mov	r1, r5
 800e26c:	d110      	bne.n	800e290 <__ieee754_sqrt+0x3c>
 800e26e:	ee10 2a10 	vmov	r2, s0
 800e272:	462b      	mov	r3, r5
 800e274:	f7f2 f9c8 	bl	8000608 <__aeabi_dmul>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 f80c 	bl	800029c <__adddf3>
 800e284:	4604      	mov	r4, r0
 800e286:	460d      	mov	r5, r1
 800e288:	ec45 4b10 	vmov	d0, r4, r5
 800e28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e290:	2d00      	cmp	r5, #0
 800e292:	dc10      	bgt.n	800e2b6 <__ieee754_sqrt+0x62>
 800e294:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e298:	4330      	orrs	r0, r6
 800e29a:	d0f5      	beq.n	800e288 <__ieee754_sqrt+0x34>
 800e29c:	b15d      	cbz	r5, 800e2b6 <__ieee754_sqrt+0x62>
 800e29e:	ee10 2a10 	vmov	r2, s0
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	ee10 0a10 	vmov	r0, s0
 800e2a8:	f7f1 fff6 	bl	8000298 <__aeabi_dsub>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	f7f2 fad4 	bl	800085c <__aeabi_ddiv>
 800e2b4:	e7e6      	b.n	800e284 <__ieee754_sqrt+0x30>
 800e2b6:	1512      	asrs	r2, r2, #20
 800e2b8:	d074      	beq.n	800e3a4 <__ieee754_sqrt+0x150>
 800e2ba:	07d4      	lsls	r4, r2, #31
 800e2bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e2c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e2c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e2c8:	bf5e      	ittt	pl
 800e2ca:	0fda      	lsrpl	r2, r3, #31
 800e2cc:	005b      	lslpl	r3, r3, #1
 800e2ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e2d2:	2400      	movs	r4, #0
 800e2d4:	0fda      	lsrs	r2, r3, #31
 800e2d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e2da:	107f      	asrs	r7, r7, #1
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	2516      	movs	r5, #22
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e2e6:	1886      	adds	r6, r0, r2
 800e2e8:	428e      	cmp	r6, r1
 800e2ea:	bfde      	ittt	le
 800e2ec:	1b89      	suble	r1, r1, r6
 800e2ee:	18b0      	addle	r0, r6, r2
 800e2f0:	18a4      	addle	r4, r4, r2
 800e2f2:	0049      	lsls	r1, r1, #1
 800e2f4:	3d01      	subs	r5, #1
 800e2f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e2fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e2fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e302:	d1f0      	bne.n	800e2e6 <__ieee754_sqrt+0x92>
 800e304:	462a      	mov	r2, r5
 800e306:	f04f 0e20 	mov.w	lr, #32
 800e30a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e30e:	4281      	cmp	r1, r0
 800e310:	eb06 0c05 	add.w	ip, r6, r5
 800e314:	dc02      	bgt.n	800e31c <__ieee754_sqrt+0xc8>
 800e316:	d113      	bne.n	800e340 <__ieee754_sqrt+0xec>
 800e318:	459c      	cmp	ip, r3
 800e31a:	d811      	bhi.n	800e340 <__ieee754_sqrt+0xec>
 800e31c:	f1bc 0f00 	cmp.w	ip, #0
 800e320:	eb0c 0506 	add.w	r5, ip, r6
 800e324:	da43      	bge.n	800e3ae <__ieee754_sqrt+0x15a>
 800e326:	2d00      	cmp	r5, #0
 800e328:	db41      	blt.n	800e3ae <__ieee754_sqrt+0x15a>
 800e32a:	f100 0801 	add.w	r8, r0, #1
 800e32e:	1a09      	subs	r1, r1, r0
 800e330:	459c      	cmp	ip, r3
 800e332:	bf88      	it	hi
 800e334:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e338:	eba3 030c 	sub.w	r3, r3, ip
 800e33c:	4432      	add	r2, r6
 800e33e:	4640      	mov	r0, r8
 800e340:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e344:	f1be 0e01 	subs.w	lr, lr, #1
 800e348:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e34c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e350:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e354:	d1db      	bne.n	800e30e <__ieee754_sqrt+0xba>
 800e356:	430b      	orrs	r3, r1
 800e358:	d006      	beq.n	800e368 <__ieee754_sqrt+0x114>
 800e35a:	1c50      	adds	r0, r2, #1
 800e35c:	bf13      	iteet	ne
 800e35e:	3201      	addne	r2, #1
 800e360:	3401      	addeq	r4, #1
 800e362:	4672      	moveq	r2, lr
 800e364:	f022 0201 	bicne.w	r2, r2, #1
 800e368:	1063      	asrs	r3, r4, #1
 800e36a:	0852      	lsrs	r2, r2, #1
 800e36c:	07e1      	lsls	r1, r4, #31
 800e36e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e372:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e376:	bf48      	it	mi
 800e378:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e37c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e380:	4614      	mov	r4, r2
 800e382:	e781      	b.n	800e288 <__ieee754_sqrt+0x34>
 800e384:	0ad9      	lsrs	r1, r3, #11
 800e386:	3815      	subs	r0, #21
 800e388:	055b      	lsls	r3, r3, #21
 800e38a:	2900      	cmp	r1, #0
 800e38c:	d0fa      	beq.n	800e384 <__ieee754_sqrt+0x130>
 800e38e:	02cd      	lsls	r5, r1, #11
 800e390:	d50a      	bpl.n	800e3a8 <__ieee754_sqrt+0x154>
 800e392:	f1c2 0420 	rsb	r4, r2, #32
 800e396:	fa23 f404 	lsr.w	r4, r3, r4
 800e39a:	1e55      	subs	r5, r2, #1
 800e39c:	4093      	lsls	r3, r2
 800e39e:	4321      	orrs	r1, r4
 800e3a0:	1b42      	subs	r2, r0, r5
 800e3a2:	e78a      	b.n	800e2ba <__ieee754_sqrt+0x66>
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	e7f0      	b.n	800e38a <__ieee754_sqrt+0x136>
 800e3a8:	0049      	lsls	r1, r1, #1
 800e3aa:	3201      	adds	r2, #1
 800e3ac:	e7ef      	b.n	800e38e <__ieee754_sqrt+0x13a>
 800e3ae:	4680      	mov	r8, r0
 800e3b0:	e7bd      	b.n	800e32e <__ieee754_sqrt+0xda>
 800e3b2:	bf00      	nop
 800e3b4:	7ff00000 	.word	0x7ff00000

0800e3b8 <nan>:
 800e3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e3c0 <nan+0x8>
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	00000000 	.word	0x00000000
 800e3c4:	7ff80000 	.word	0x7ff80000

0800e3c8 <__ieee754_log>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	ec51 0b10 	vmov	r0, r1, d0
 800e3d0:	ed2d 8b04 	vpush	{d8-d9}
 800e3d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e3d8:	b083      	sub	sp, #12
 800e3da:	460d      	mov	r5, r1
 800e3dc:	da29      	bge.n	800e432 <__ieee754_log+0x6a>
 800e3de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3e2:	4303      	orrs	r3, r0
 800e3e4:	ee10 2a10 	vmov	r2, s0
 800e3e8:	d10c      	bne.n	800e404 <__ieee754_log+0x3c>
 800e3ea:	49cf      	ldr	r1, [pc, #828]	; (800e728 <__ieee754_log+0x360>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	f7f2 fa33 	bl	800085c <__aeabi_ddiv>
 800e3f6:	ec41 0b10 	vmov	d0, r0, r1
 800e3fa:	b003      	add	sp, #12
 800e3fc:	ecbd 8b04 	vpop	{d8-d9}
 800e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e404:	2900      	cmp	r1, #0
 800e406:	da05      	bge.n	800e414 <__ieee754_log+0x4c>
 800e408:	460b      	mov	r3, r1
 800e40a:	f7f1 ff45 	bl	8000298 <__aeabi_dsub>
 800e40e:	2200      	movs	r2, #0
 800e410:	2300      	movs	r3, #0
 800e412:	e7ee      	b.n	800e3f2 <__ieee754_log+0x2a>
 800e414:	4bc5      	ldr	r3, [pc, #788]	; (800e72c <__ieee754_log+0x364>)
 800e416:	2200      	movs	r2, #0
 800e418:	f7f2 f8f6 	bl	8000608 <__aeabi_dmul>
 800e41c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e420:	460d      	mov	r5, r1
 800e422:	4ac3      	ldr	r2, [pc, #780]	; (800e730 <__ieee754_log+0x368>)
 800e424:	4295      	cmp	r5, r2
 800e426:	dd06      	ble.n	800e436 <__ieee754_log+0x6e>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	f7f1 ff36 	bl	800029c <__adddf3>
 800e430:	e7e1      	b.n	800e3f6 <__ieee754_log+0x2e>
 800e432:	2300      	movs	r3, #0
 800e434:	e7f5      	b.n	800e422 <__ieee754_log+0x5a>
 800e436:	152c      	asrs	r4, r5, #20
 800e438:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e43c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e440:	441c      	add	r4, r3
 800e442:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e446:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e44a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e44e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e452:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e456:	ea42 0105 	orr.w	r1, r2, r5
 800e45a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e45e:	2200      	movs	r2, #0
 800e460:	4bb4      	ldr	r3, [pc, #720]	; (800e734 <__ieee754_log+0x36c>)
 800e462:	f7f1 ff19 	bl	8000298 <__aeabi_dsub>
 800e466:	1cab      	adds	r3, r5, #2
 800e468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	4682      	mov	sl, r0
 800e470:	468b      	mov	fp, r1
 800e472:	f04f 0200 	mov.w	r2, #0
 800e476:	dc53      	bgt.n	800e520 <__ieee754_log+0x158>
 800e478:	2300      	movs	r3, #0
 800e47a:	f7f2 fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e47e:	b1d0      	cbz	r0, 800e4b6 <__ieee754_log+0xee>
 800e480:	2c00      	cmp	r4, #0
 800e482:	f000 8122 	beq.w	800e6ca <__ieee754_log+0x302>
 800e486:	4620      	mov	r0, r4
 800e488:	f7f2 f854 	bl	8000534 <__aeabi_i2d>
 800e48c:	a390      	add	r3, pc, #576	; (adr r3, 800e6d0 <__ieee754_log+0x308>)
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	f7f2 f8b7 	bl	8000608 <__aeabi_dmul>
 800e49a:	a38f      	add	r3, pc, #572	; (adr r3, 800e6d8 <__ieee754_log+0x310>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	f7f2 f8ae 	bl	8000608 <__aeabi_dmul>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	e7ba      	b.n	800e42c <__ieee754_log+0x64>
 800e4b6:	a38a      	add	r3, pc, #552	; (adr r3, 800e6e0 <__ieee754_log+0x318>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	4650      	mov	r0, sl
 800e4be:	4659      	mov	r1, fp
 800e4c0:	f7f2 f8a2 	bl	8000608 <__aeabi_dmul>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	499b      	ldr	r1, [pc, #620]	; (800e738 <__ieee754_log+0x370>)
 800e4cc:	f7f1 fee4 	bl	8000298 <__aeabi_dsub>
 800e4d0:	4652      	mov	r2, sl
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	460f      	mov	r7, r1
 800e4d6:	465b      	mov	r3, fp
 800e4d8:	4650      	mov	r0, sl
 800e4da:	4659      	mov	r1, fp
 800e4dc:	f7f2 f894 	bl	8000608 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	f7f2 f88e 	bl	8000608 <__aeabi_dmul>
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	460f      	mov	r7, r1
 800e4f0:	b914      	cbnz	r4, 800e4f8 <__ieee754_log+0x130>
 800e4f2:	4632      	mov	r2, r6
 800e4f4:	463b      	mov	r3, r7
 800e4f6:	e0a2      	b.n	800e63e <__ieee754_log+0x276>
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7f2 f81b 	bl	8000534 <__aeabi_i2d>
 800e4fe:	a374      	add	r3, pc, #464	; (adr r3, 800e6d0 <__ieee754_log+0x308>)
 800e500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e504:	4680      	mov	r8, r0
 800e506:	4689      	mov	r9, r1
 800e508:	f7f2 f87e 	bl	8000608 <__aeabi_dmul>
 800e50c:	a372      	add	r3, pc, #456	; (adr r3, 800e6d8 <__ieee754_log+0x310>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	4604      	mov	r4, r0
 800e514:	460d      	mov	r5, r1
 800e516:	4640      	mov	r0, r8
 800e518:	4649      	mov	r1, r9
 800e51a:	f7f2 f875 	bl	8000608 <__aeabi_dmul>
 800e51e:	e0a7      	b.n	800e670 <__ieee754_log+0x2a8>
 800e520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e524:	f7f1 feba 	bl	800029c <__adddf3>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4650      	mov	r0, sl
 800e52e:	4659      	mov	r1, fp
 800e530:	f7f2 f994 	bl	800085c <__aeabi_ddiv>
 800e534:	ec41 0b18 	vmov	d8, r0, r1
 800e538:	4620      	mov	r0, r4
 800e53a:	f7f1 fffb 	bl	8000534 <__aeabi_i2d>
 800e53e:	ec53 2b18 	vmov	r2, r3, d8
 800e542:	ec41 0b19 	vmov	d9, r0, r1
 800e546:	ec51 0b18 	vmov	r0, r1, d8
 800e54a:	f7f2 f85d 	bl	8000608 <__aeabi_dmul>
 800e54e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e552:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4680      	mov	r8, r0
 800e55e:	4689      	mov	r9, r1
 800e560:	f7f2 f852 	bl	8000608 <__aeabi_dmul>
 800e564:	a360      	add	r3, pc, #384	; (adr r3, 800e6e8 <__ieee754_log+0x320>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	4606      	mov	r6, r0
 800e56c:	460f      	mov	r7, r1
 800e56e:	f7f2 f84b 	bl	8000608 <__aeabi_dmul>
 800e572:	a35f      	add	r3, pc, #380	; (adr r3, 800e6f0 <__ieee754_log+0x328>)
 800e574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e578:	f7f1 fe90 	bl	800029c <__adddf3>
 800e57c:	4632      	mov	r2, r6
 800e57e:	463b      	mov	r3, r7
 800e580:	f7f2 f842 	bl	8000608 <__aeabi_dmul>
 800e584:	a35c      	add	r3, pc, #368	; (adr r3, 800e6f8 <__ieee754_log+0x330>)
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	f7f1 fe87 	bl	800029c <__adddf3>
 800e58e:	4632      	mov	r2, r6
 800e590:	463b      	mov	r3, r7
 800e592:	f7f2 f839 	bl	8000608 <__aeabi_dmul>
 800e596:	a35a      	add	r3, pc, #360	; (adr r3, 800e700 <__ieee754_log+0x338>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f7f1 fe7e 	bl	800029c <__adddf3>
 800e5a0:	4642      	mov	r2, r8
 800e5a2:	464b      	mov	r3, r9
 800e5a4:	f7f2 f830 	bl	8000608 <__aeabi_dmul>
 800e5a8:	a357      	add	r3, pc, #348	; (adr r3, 800e708 <__ieee754_log+0x340>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	4680      	mov	r8, r0
 800e5b0:	4689      	mov	r9, r1
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4639      	mov	r1, r7
 800e5b6:	f7f2 f827 	bl	8000608 <__aeabi_dmul>
 800e5ba:	a355      	add	r3, pc, #340	; (adr r3, 800e710 <__ieee754_log+0x348>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f1 fe6c 	bl	800029c <__adddf3>
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	f7f2 f81e 	bl	8000608 <__aeabi_dmul>
 800e5cc:	a352      	add	r3, pc, #328	; (adr r3, 800e718 <__ieee754_log+0x350>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	f7f1 fe63 	bl	800029c <__adddf3>
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	463b      	mov	r3, r7
 800e5da:	f7f2 f815 	bl	8000608 <__aeabi_dmul>
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	4649      	mov	r1, r9
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	f7f1 fe59 	bl	800029c <__adddf3>
 800e5ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e5ee:	9b01      	ldr	r3, [sp, #4]
 800e5f0:	3551      	adds	r5, #81	; 0x51
 800e5f2:	431d      	orrs	r5, r3
 800e5f4:	2d00      	cmp	r5, #0
 800e5f6:	4680      	mov	r8, r0
 800e5f8:	4689      	mov	r9, r1
 800e5fa:	dd48      	ble.n	800e68e <__ieee754_log+0x2c6>
 800e5fc:	4b4e      	ldr	r3, [pc, #312]	; (800e738 <__ieee754_log+0x370>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	4650      	mov	r0, sl
 800e602:	4659      	mov	r1, fp
 800e604:	f7f2 f800 	bl	8000608 <__aeabi_dmul>
 800e608:	4652      	mov	r2, sl
 800e60a:	465b      	mov	r3, fp
 800e60c:	f7f1 fffc 	bl	8000608 <__aeabi_dmul>
 800e610:	4602      	mov	r2, r0
 800e612:	460b      	mov	r3, r1
 800e614:	4606      	mov	r6, r0
 800e616:	460f      	mov	r7, r1
 800e618:	4640      	mov	r0, r8
 800e61a:	4649      	mov	r1, r9
 800e61c:	f7f1 fe3e 	bl	800029c <__adddf3>
 800e620:	ec53 2b18 	vmov	r2, r3, d8
 800e624:	f7f1 fff0 	bl	8000608 <__aeabi_dmul>
 800e628:	4680      	mov	r8, r0
 800e62a:	4689      	mov	r9, r1
 800e62c:	b964      	cbnz	r4, 800e648 <__ieee754_log+0x280>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4630      	mov	r0, r6
 800e634:	4639      	mov	r1, r7
 800e636:	f7f1 fe2f 	bl	8000298 <__aeabi_dsub>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4650      	mov	r0, sl
 800e640:	4659      	mov	r1, fp
 800e642:	f7f1 fe29 	bl	8000298 <__aeabi_dsub>
 800e646:	e6d6      	b.n	800e3f6 <__ieee754_log+0x2e>
 800e648:	a321      	add	r3, pc, #132	; (adr r3, 800e6d0 <__ieee754_log+0x308>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	ec51 0b19 	vmov	r0, r1, d9
 800e652:	f7f1 ffd9 	bl	8000608 <__aeabi_dmul>
 800e656:	a320      	add	r3, pc, #128	; (adr r3, 800e6d8 <__ieee754_log+0x310>)
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	4604      	mov	r4, r0
 800e65e:	460d      	mov	r5, r1
 800e660:	ec51 0b19 	vmov	r0, r1, d9
 800e664:	f7f1 ffd0 	bl	8000608 <__aeabi_dmul>
 800e668:	4642      	mov	r2, r8
 800e66a:	464b      	mov	r3, r9
 800e66c:	f7f1 fe16 	bl	800029c <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f1 fe0e 	bl	8000298 <__aeabi_dsub>
 800e67c:	4652      	mov	r2, sl
 800e67e:	465b      	mov	r3, fp
 800e680:	f7f1 fe0a 	bl	8000298 <__aeabi_dsub>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4620      	mov	r0, r4
 800e68a:	4629      	mov	r1, r5
 800e68c:	e7d9      	b.n	800e642 <__ieee754_log+0x27a>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	4650      	mov	r0, sl
 800e694:	4659      	mov	r1, fp
 800e696:	f7f1 fdff 	bl	8000298 <__aeabi_dsub>
 800e69a:	ec53 2b18 	vmov	r2, r3, d8
 800e69e:	f7f1 ffb3 	bl	8000608 <__aeabi_dmul>
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	2c00      	cmp	r4, #0
 800e6a8:	f43f af23 	beq.w	800e4f2 <__ieee754_log+0x12a>
 800e6ac:	a308      	add	r3, pc, #32	; (adr r3, 800e6d0 <__ieee754_log+0x308>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	ec51 0b19 	vmov	r0, r1, d9
 800e6b6:	f7f1 ffa7 	bl	8000608 <__aeabi_dmul>
 800e6ba:	a307      	add	r3, pc, #28	; (adr r3, 800e6d8 <__ieee754_log+0x310>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	ec51 0b19 	vmov	r0, r1, d9
 800e6c8:	e727      	b.n	800e51a <__ieee754_log+0x152>
 800e6ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e720 <__ieee754_log+0x358>
 800e6ce:	e694      	b.n	800e3fa <__ieee754_log+0x32>
 800e6d0:	fee00000 	.word	0xfee00000
 800e6d4:	3fe62e42 	.word	0x3fe62e42
 800e6d8:	35793c76 	.word	0x35793c76
 800e6dc:	3dea39ef 	.word	0x3dea39ef
 800e6e0:	55555555 	.word	0x55555555
 800e6e4:	3fd55555 	.word	0x3fd55555
 800e6e8:	df3e5244 	.word	0xdf3e5244
 800e6ec:	3fc2f112 	.word	0x3fc2f112
 800e6f0:	96cb03de 	.word	0x96cb03de
 800e6f4:	3fc74664 	.word	0x3fc74664
 800e6f8:	94229359 	.word	0x94229359
 800e6fc:	3fd24924 	.word	0x3fd24924
 800e700:	55555593 	.word	0x55555593
 800e704:	3fe55555 	.word	0x3fe55555
 800e708:	d078c69f 	.word	0xd078c69f
 800e70c:	3fc39a09 	.word	0x3fc39a09
 800e710:	1d8e78af 	.word	0x1d8e78af
 800e714:	3fcc71c5 	.word	0x3fcc71c5
 800e718:	9997fa04 	.word	0x9997fa04
 800e71c:	3fd99999 	.word	0x3fd99999
	...
 800e728:	c3500000 	.word	0xc3500000
 800e72c:	43500000 	.word	0x43500000
 800e730:	7fefffff 	.word	0x7fefffff
 800e734:	3ff00000 	.word	0x3ff00000
 800e738:	3fe00000 	.word	0x3fe00000

0800e73c <_init>:
 800e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73e:	bf00      	nop
 800e740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e742:	bc08      	pop	{r3}
 800e744:	469e      	mov	lr, r3
 800e746:	4770      	bx	lr

0800e748 <_fini>:
 800e748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74a:	bf00      	nop
 800e74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e74e:	bc08      	pop	{r3}
 800e750:	469e      	mov	lr, r3
 800e752:	4770      	bx	lr
